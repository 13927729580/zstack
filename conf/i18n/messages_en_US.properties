# at: src/zstack/./compute/src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:86
# args: spec.getRequiredBackupStorageUuid(),bsType
the\ backup\ storage[uuid\:%s,\ type\:%s]\ requires\ bound\ primary\ storage,\ however,\ the\ primary\ storage\ has\ not\ been\ added = the backup storage[uuid:{0}, type:{1}] requires bound primary storage, however, the primary storage has not been added

# at: src/zstack/./compute/src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:79
# args: spec.getImage().getUuid(),spec.getRequiredBackupStorageUuid(),type,psUuids
The\ image[uuid\:%s]\ is\ on\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ that\ requires\ to\ work\ with\ primary\ storage[uuids\:%s],however,\ no\ host\ found\ suitable\ to\ work\ with\ those\ primary\ storage = The image[uuid:{0}] is on the backup storage[uuid:{1}, type:{2}] that requires to work with primary storage[uuids:{3}],however, no host found suitable to work with those primary storage

# at: src/zstack/./compute/src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:70
# args: spec.getImage().getUuid(),name,spec.getRequiredBackupStorageUuid(),spec.getImage().getType(),possiblePrimaryStorageTypes
The\ image[uuid\:%s,\ name\:%s]\ is\ on\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ that\ requires\ to\ work\ with\ primary\ storage[types\:%s],however,\ no\ host\ found\ suitable\ to\ work\ with\ those\ primary\ storage = The image[uuid:{0}, name:{1}] is on the backup storage[uuid:{2}, type:{3}] that requires to work with primary storage[types:{4}],however, no host found suitable to work with those primary storage

# at: src/zstack/./compute/src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java:56
# args: 
either\ volumeUuid\ or\ volumeSnapshotUuid\ must\ be\ set = either volumeUuid or volumeSnapshotUuid must be set

# at: src/zstack/./compute/src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java:75
# args: 
zoneUuids,\ clusterUuids,\ hostUuids\ must\ at\ least\ have\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids, clusterUuids, hostUuids must at least have one be none-empty list, or all is set to true

# at: src/zstack/./compute/src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java:90
# args: spec.getImage().getUuid(),spec.getImage().getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ deleted\ on\ all\ backup\ storage = the image[uuid:{0}, name:{1}] is deleted on all backup storage

# at: src/zstack/./compute/src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:55
# args: 
if\ cluster\ type\ is\ baremetal,\ then\ hypervisorType\ must\ be\ baremetal\ too,\ or\ vice\ versa = if cluster type is baremetal, then hypervisorType must be baremetal too, or vice versa

# at: src/zstack/./compute/src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:71
# args: 
only\ kvm\ hosts'\ operating\ system\ can\ be\ updated,\ for\ now = only kvm hosts' operating system can be updated, for now

# at: src/zstack/./compute/src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:82
# args: msg.getUuid()
there\ are\ hosts\ in\ cluster[uuid\:%s]\ in\ the\ PreMaintenance\ state,\ cannot\ update\ cluster\ os\ right\ now = there are hosts in cluster[uuid:{0}] in the PreMaintenance state, cannot update cluster os right now

# at: src/zstack/./compute/src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:94
# args: msg.getUuid()
not\ all\ hosts\ in\ cluster[uuid\:%s]\ are\ in\ the\ Connected\ status,\ cannot\ update\ cluster\ os\ right\ now = not all hosts in cluster[uuid:{0}] are in the Connected status, cannot update cluster os right now

# at: src/zstack/./compute/src/main/java/org/zstack/compute/host/HostApiInterceptor.java:81
# args: msg.getHostUuid()
can\ not\ update\ host[uuid\:%s]which\ is\ connecting\ or\ creating,\ please\ wait. = can not update host[uuid:{0}]which is connecting or creating, please wait.

# at: src/zstack/./compute/src/main/java/org/zstack/compute/host/HostApiInterceptor.java:87
# args: msg.getManagementIp()
managementIp[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = managementIp[{0}] is neither an IPv4 address nor a valid hostname

# at: src/zstack/./compute/src/main/java/org/zstack/compute/host/HostApiInterceptor.java:97
# args: msg.getHostUuid(),hostStatus
can\ not\ maintain\ host[uuid\:%s,\ status\:%s]which\ is\ not\ Connected = can not maintain host[uuid:{0}, status:{1}]which is not Connected

# at: src/zstack/./compute/src/main/java/org/zstack/compute/host/HostBase.java:615
# args: 
host\ is\ connecting = host is connecting

# at: src/zstack/./compute/src/main/java/org/zstack/compute/host/HostManagerImpl.java:266
# args: msg.getManagementIp()
there\ has\ been\ a\ host\ having\ managementIp[%s] = there has been a host having managementIp[{0}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/host/HostManagerImpl.java:272
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ not\ existing = cluster[uuid:{0}] is not existing

# at: src/zstack/./compute/src/main/java/org/zstack/compute/host/HostManagerImpl.java:363
# args: vo.getName(),vo.getManagementIp()
after\ connecting,\ host[name\:%s,\ ip\:%s]\ returns\ a\ null\ os\ version = after connecting, host[name:{0}, ip:{1}] returns a null os version

# at: src/zstack/./compute/src/main/java/org/zstack/compute/host/HostManagerImpl.java:394
# args: vo.getClusterUuid(),currentVersion,vo.getName(),vo.getManagementIp(),mineVersion
cluster[uuid\:%s]\ already\ has\ host\ with\ os\ version[%s],\ but\ new\ added\ host[name\:%s\ ip\:%s]\ has\ host\ os\ version[%s] = cluster[uuid:{0}] already has host with os version[{1}], but new added host[name:{2} ip:{3}] has host os version[{4}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/AbstractVmInstance.java:162
# args: currentState,msg.getMessageName(),checker.getStatesForOperation(msg.getMessageName())
current\ vm\ instance\ state[%s]\ doesn't\ allow\ to\ proceed\ message[%s],\ allowed\ states\ are\ %s = current vm instance state[{0}] doesn't allow to proceed message[{1}], allowed states are {2}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/DeleteVmGC.java:46
# args: hostUuid
the\ host[uuid\:%s]\ is\ not\ connected = the host[uuid:{0}] is not connected

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/IsoOperator.java:93
# args: vmUuid
VM[uuid\:%s]\ can\ only\ attach\ up\ to\ 3\ ISOs = VM[uuid:{0}] can only attach up to 3 ISOs

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/IsoOperator.java:42
# args: vmUuid,isoUuid
VM[uuid\:%s]\ has\ attached\ ISO[uuid\:%s] = VM[uuid:{0}] has attached ISO[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/IsoOperator.java:120
# args: vmUuid
VM[uuid\:%s]\ can\ only\ attach\ up\ to\ 3\ ISOs，Please\ detach\ the\ extra\ iso = VM[uuid:{0}] can only attach up to 3 ISOs，Please detach the extra iso

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/IsoOperator.java:131
# args: vmUuid,repeatedIsoUuids
VM[uuid\:%s]\ attached\ duplicate\ ios[uuid\:%s]，Please\ detach\ the\ extra\ iso = VM[uuid:{0}] attached duplicate ios[uuid:{1}]，Please detach the extra iso

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/IsoOperator.java:144
# args: vmUuid,isoUuid,isoUuid,isoUuid
VM[uuid\:%s]\ attached\ ios[%s]\ deviceId\ repeat，please\ detach\ the\ iso[%s],\ and\ then\ re-attach\ iso[%s] = VM[uuid:{0}] attached ios[{1}] deviceId repeat，please detach the iso[{2}], and then re-attach iso[{3}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/MacOperator.java:77
# args: mac
This\ is\ not\ a\ valid\ MAC\ address\ [%s] = This is not a valid MAC address [{0}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/MacOperator.java:87
# args: mac
Not\ a\ valid\ MAC\ address\ [%s] = Not a valid MAC address [{0}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/MacOperator.java:90
# args: 
Disallowed\ address = Disallowed address

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/MacOperator.java:93
# args: mac
Expected\ unicast\ mac\ address,\ found\ multicast\ MAC\ address\ [%s] = Expected unicast mac address, found multicast MAC address [{0}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmAllocatePrimaryStorageForAttachingDiskFlow.java:42
# args: spec.getVmInventory().getUuid()
\ Can\ not\ find\ the\ vm's\ host,\ please\ start\ the\ vm[%s],\ then\ mount\ the\ disk =  Can not find the vm's host, please start the vm[{0}], then mount the disk

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmDownloadIsoFlow.java:69
# args: iso.getUuid(),host.getZoneUuid(),spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ iso[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ running\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = cannot find the iso[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\n1. if the backup storage is attached to the zone where the VM[name: {2}, uuid:{3}] is running\n2. if the backup storage is in connected status, if not, try reconnecting it

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java:91
# args: imageUuid,spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage.\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ in\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = cannot find the image[uuid:{0}] in any connected backup storage. check below:\n1. if the backup storage is attached to the zone where the VM[name: {1}, uuid:{2}] is in\n2. if the backup storage is in connected status, if not, try reconnecting it

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java:85
# args: imageUuid,spec.getVmInventory().getZoneUuid(),spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ in\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = cannot find the image[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\n1. if the backup storage is attached to the zone where the VM[name: {2}, uuid:{3}] is in\n2. if the backup storage is in connected status, if not, try reconnecting it

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java:113
# args: zoneUuid,isoImageUuid
no\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s]\ contains\ the\ ISO[uuid\:%s] = no backup storage attached to the zone[uuid:{0}] contains the ISO[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:560
# args: 
rootDiskOfferingUuid\ cannot\ be\ null\ when\ image\ mediaType\ is\ ISO = rootDiskOfferingUuid cannot be null when image mediaType is ISO

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:117
# args: 
rootVolumeOffering\ is\ needed\ when\ image\ media\ type\ is\ ISO = rootVolumeOffering is needed when image media type is ISO

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:127
# args: msg.getVmInstanceUuid(),msg.getHostUuid()
the\ vm[uuid\:%s]\ is\ already\ on\ host[uuid\:%s] = the vm[uuid:{0}] is already on host[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:181
# args: 
the\ VM\ cannot\ do\ online\ cpu/memory\ update\ because\ it\ is\ not\ of\ NUMA\ architecture.\ Please\ stop\ the\ VM\ then\ do\ the\ cpu/memory\ update\ again = the VM cannot do online cpu/memory update because it is not of NUMA architecture. Please stop the VM then do the cpu/memory update again

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:187
# args: vo.getUuid(),vo.getState(),StringUtils.join(list(VmInstanceState.Running, VmInstanceState.Stopped), ",")
The\ state\ of\ vm[uuid\:%s]\ is\ %s.\ Only\ these\ state[%s]\ is\ allowed\ to\ update\ cpu\ or\ memory. = The state of vm[uuid:{0}] is {1}. Only these state[{2}] is allowed to update cpu or memory.

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:159
# args: vo.getUuid()
can't\ decrease\ capacity\ when\ vm[uuid\:%s]\ is\ running = can't decrease capacity when vm[uuid:{0}] is running

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:198
# args: vo.getUuid()
can't\ decrease\ cpu\ of\ vm[uuid\:%s]\ when\ it\ is\ running = can't decrease cpu of vm[uuid:{0}] when it is running

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:204
# args: vo.getUuid()
can't\ decrease\ memory\ size\ of\ vm[uuid\:%s]\ when\ it\ is\ running = can't decrease memory size of vm[uuid:{0}] when it is running

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:215
# args: 
either\ l3NetworkUuids\ or\ imageUuid\ must\ be\ set = either l3NetworkUuids or imageUuid must be set

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:230
# args: ip
%s\ is\ not\ a\ valid\ IPv4\ address = {0} is not a valid IPv4 address

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:256
# args: ip,vmNicVO.getUuid()
ip\ address\ [%s]\ already\ set\ to\ vmNic\ [uuid\:%s] = ip address [{0}] already set to vmNic [uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:241
# args: ip,rangeVO.getNetworkCidr()
ip\ address\ [%s]\ is\ not\ in\ ip\ range\ [%s] = ip address [{0}] is not in ip range [{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:250
# args: ip
%s\ is\ not\ a\ valid\ IPv6\ address = {0} is not a valid IPv6 address

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:261
# args: ip,rangeVO.getStartIp(),rangeVO.getEndIp()
ip\ address\ [%s]\ is\ not\ in\ ip\ range\ [startIp\ %s,\ endIp\ %s] = ip address [{0}] is not in ip range [startIp {1}, endIp {2}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:295
# args: msg.getVmInstanceUuid(),msg.getL3NetworkUuid()
the\ VM[uuid\:%s]\ has\ no\ nic\ on\ the\ L3\ network[uuid\:%s] = the VM[uuid:{0}] has no nic on the L3 network[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:306
# args: o,msg.getBootOrder()
invalid\ boot\ device[%s]\ in\ boot\ order%s = invalid boot device[{0}] in boot order{1}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:315
# args: msg.getVmInstanceUuid(),msg.getIsoUuid()
VM[uuid\:%s]\ already\ has\ an\ ISO[uuid\:%s]\ attached = VM[uuid:{0}] already has an ISO[uuid:{1}] attached

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:330
# args: msg.getVmInstanceUuid()
VM[uuid\:%s]\ has\ multiple\ ISOs\ attached,\ specify\ the\ isoUuid\ when\ detaching = VM[uuid:{0}] has multiple ISOs attached, specify the isoUuid when detaching

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:465
# args: l3NetworkVO.getUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ disabled = unable to attach a L3 network. The L3 network[uuid:{0}] is disabled

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:427
# args: msg.getStaticIp(),msg.getL3NetworkUuid()
the\ static\ IP[%s]\ is\ not\ in\ any\ IP\ range\ of\ the\ L3\ network[uuid\:%s] = the static IP[{0}] is not in any IP range of the L3 network[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:434
# args: msg.getStaticIp(),msg.getL3NetworkUuid()
the\ static\ IP[%s]\ has\ been\ occupied\ on\ the\ L3\ network[uuid\:%s] = the static IP[{0}] has been occupied on the L3 network[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:445
# args: msg.getVmInstanceUuid(),state
unable\ to\ attach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = unable to attach a L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:456
# args: vmNicVO.getL3NetworkUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = unable to attach a L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:468
# args: l3NetworkVO.getUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ a\ system\ network\ and\ vm\ is\ a\ user\ vm = unable to attach a L3 network. The L3 network[uuid:{0}] is a system network and vm is a user vm

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:483
# args: msg.getVmInstanceUuid(),state
unable\ to\ detach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = unable to detach a L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:509
# args: msg.getVmInstanceUuid(),state
vm[uuid\:%s]\ can\ only\ attach\ volume\ when\ state\ is\ Running\ or\ Stopped,\ current\ state\ is\ %s = vm[uuid:{0}] can only attach volume when state is Running or Stopped, current state is {1}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:521
# args: msg.getInstanceOfferingUuid()
instance\ offering[uuid\:%s]\ is\ Disabled,\ can't\ create\ vm\ from\ it = instance offering[uuid:{0}] is Disabled, can't create vm from it

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:524
# args: msg.getInstanceOfferingUuid(),itype
instance\ offering[uuid\:%s,\ type\:%s]\ is\ not\ UserVm\ type,\ can't\ create\ vm\ from\ it = instance offering[uuid:{0}, type:{1}] is not UserVm type, can't create vm from it

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:546
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ Disabled,\ can't\ create\ vm\ from\ it = image[uuid:{0}] is Disabled, can't create vm from it

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:551
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ not\ ready\ yet,\ can't\ create\ vm\ from\ it = image[uuid:{0}] is not ready yet, can't create vm from it

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:556
# args: msg.getImageUuid(),imgFormat
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ and\ ISO\ can\ be\ used\ to\ create\ vm = image[uuid:{0}] is of mediaType: {1}, only RootVolumeTemplate and ISO can be used to create vm

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:565
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ system\ image,\ can't\ be\ used\ to\ create\ user\ vm = image[uuid:{0}] is system image, can't be used to create user vm

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:584
# args: diskUuids
disk\ offerings[uuids\:%s]\ are\ Disabled,\ can\ not\ create\ vm\ from\ it = disk offerings[uuids:{0}] are Disabled, can not create vm from it

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:680
# args: 
The\ console\ password\ cannot\ start\ with\ 'password'\ which\ may\ trigger\ a\ VNC\ security\ issue = The console password cannot start with 'password' which may trigger a VNC security issue

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:689
# args: msg.getVmNicUuid(),msg.getVmNicUuid()
vmNic[uuid\:%s]\ is\ not\ attached\ to\ vmInstance = vmNic[uuid:{0}] is not attached to vmInstance

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:697
# args: msg.getL3NetworkUuid(),msg.getVmNicUuid()
L3\ network[uuid\:%s]\ has\ already\ been\ to\ attached\ vmNic[uuid\:%s] = L3 network[uuid:{0}] has already been to attached vmNic[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:717
# args: ipVO.getL3NetworkUuid(),msg.getVmNicUuid()
there\ is\ another\ IPv6\ stateful-dhcp\ network[uuid\:%s]\ attached\ vmNic[uuid\:%s] = there is another IPv6 stateful-dhcp network[uuid:{0}] attached vmNic[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:706
# args: ipVO.getL3NetworkUuid(),msg.getVmNicUuid()
there\ is\ another\ IPv4\ network[uuid\:%s]\ attached\ vmNic[uuid\:%s] = there is another IPv4 network[uuid:{0}] attached vmNic[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:735
# args: l3Vo.getL2NetworkUuid(),oldL3.getL2NetworkUuid()
l2Network\ [uuid\:%s]\ to\ be\ attached\ is\ different\ from\ l2Network\ [uuid\:%s]\ of\ the\ nic = l2Network [uuid:{0}] to be attached is different from l2Network [uuid:{1}] of the nic

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:121
# args: self.getUuid(),hostUuid,reply.getError()
unable\ to\ check\ state\ of\ the\ vm[uuid\:%s]\ on\ the\ host[uuid\:%s],\ %s;put\ the\ VM\ into\ the\ Unknown\ state = unable to check state of the vm[uuid:{0}] on the host[uuid:{1}], {2};put the VM into the Unknown state

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:229
# args: vo.getUuid(),vo.getName()
vm[uuid\:%s,\ name\:%s]\ has\ been\ deleted = vm[uuid:{0}, name:{1}] has been deleted

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:647
# args: self.getUuid(),l3Uuid
the\ vm[uuid\:%s]\ has\ no\ nic\ on\ the\ L3\ network[uuid\:%s] = the vm[uuid:{0}] has no nic on the L3 network[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:1013
# args: 
the\ vm\ has\ been\ deleted = the vm has been deleted

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:1154
# args: self.getUuid(),originalState,currentState,originalHostUuid,currentHostUuid,errCode
failed\ to\ handle\ abnormal\ lifecycle\ of\ the\ vm[uuid\:%s,\ original\ state\:\ %s,\ current\ state\:%s,original\ host\:\ %s,\ current\ host\:\ %s],\ %s = failed to handle abnormal lifecycle of the vm[uuid:{0}, original state: {1}, current state:{2},original host: {3}, current host: {4}], {5}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3416
# args: isoUuid,self.getUuid(),isoDeviceId,currentIsoDeviceId
Iso[uuid\:%s]\ deviceId\ exception\ occurs\ when\ vm[uuid\:%s]\ is\ attached\ to\ iso.\ Expected\ to\ be\ %s,\ actually\ %s = Iso[uuid:{0}] deviceId exception occurs when vm[uuid:{1}] is attached to iso. Expected to be {2}, actually {3}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3480
# args: isoUuid,psUuid,self.getName(),self.getUuid()
the\ ISO[uuid\:%s]\ is\ on\ backup\ storage\ that\ is\ not\ compatible\ of\ the\ primary\ storage[uuid\:%s]\ where\ the\ VM[name\:%s,\ uuid\:%s]\ is\ on = the ISO[uuid:{0}] is on backup storage that is not compatible of the primary storage[uuid:{1}] where the VM[name:{2}, uuid:{3}] is on

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3843
# args: self.getHostUuid(),cpuNum - oldCpuNum,struct.alignedMemory - oldMemorySize
host[uuid\:%s]\ capacity\ is\ not\ enough\ to\ offer\ cpu[%s],\ memory[%s\ bytes] = host[uuid:{0}] capacity is not enough to offer cpu[{1}], memory[{2} bytes]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3812
# args: memorySize,struct.alignedMemory
automatically\ align\ memory\ from\ %s\ to\ %s = automatically align memory from {0} to {1}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:4063
# args: isoUuid,self.getUuid()
ISO[uuid\:%s]\ is\ not\ attached\ to\ VM[uuid\:%s] = ISO[uuid:{0}] is not attached to VM[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceBase.java:4684
# args: self.getUuid()
unable\ to\ start\ the\ vm[uuid\:%s].\ It\ doesn't\ have\ any\ nic,\ please\ attach\ a\ nic\ and\ try\ again = unable to start the vm[uuid:{0}]. It doesn't have any nic, please attach a nic and try again

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:53
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStartNewCreatedVmExtensionPoint[%s]\ refuses\ to\ create\ vm[uuid\:%s]\ because\ %s = VmInstanceStartNewCreatedVmExtensionPoint[{0}] refuses to create vm[uuid:{1}] because {2}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:95
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStopVmExtensionPoint[%s]\ refuses\ to\ stop\ vm[uuid\:%s]\ because\ %s = VmInstanceStopVmExtensionPoint[{0}] refuses to stop vm[uuid:{1}] because {2}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:137
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceRebootExtensionPoint[%s]\ refuses\ to\ reboot\ vm[uuid\:%s]\ because\ %s = VmInstanceRebootExtensionPoint[{0}] refuses to reboot vm[uuid:{1}] because {2}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:179
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceDestroyVmExtensionPoint[%s]\ refuses\ to\ destroy\ vm[uuid\:%s]\ because\ %s = VmInstanceDestroyVmExtensionPoint[{0}] refuses to destroy vm[uuid:{1}] because {2}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:220
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStartExtensionPoint[%s]\ refuses\ to\ start\ vm[uuid\:%s]\ because\ %s = VmInstanceStartExtensionPoint[{0}] refuses to start vm[uuid:{1}] because {2}

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:417
# args: msg.getImageUuid(),msg.getZoneUuid()
the\ image[uuid\:%s]\ is\ not\ on\ any\ backup\ storage\ that\ has\ been\ attached\ to\ the\ zone[uuid\:%s] = the image[uuid:{0}] is not on any backup storage that has been attached to the zone[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:485
# args: image.getName(),image.getUuid()
the\ image[name\:%s,\ uuid\:%s]\ is\ an\ ISO,\ rootDiskOfferingUuid\ must\ be\ set = the image[name:{0}, uuid:{1}] is an ISO, rootDiskOfferingUuid must be set

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:525
# args: image.getName(),image.getUuid()
zoneUuid\ must\ be\ set\ because\ the\ image[name\:%s,\ uuid\:%s]\ is\ on\ multiple\ backup\ storage = zoneUuid must be set because the image[name:{0}, uuid:{1}] is on multiple backup storage

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1429
# args: hostname,tag
hostname[%s]\ specified\ in\ system\ tag[%s]\ is\ not\ a\ valid\ domain\ name = hostname[{0}] specified in system tag[{1}] is not a valid domain name

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1441
# args: hostnameCount
only\ one\ hostname\ system\ tag\ is\ allowed,\ but\ %s\ got = only one hostname system tag is allowed, but {0} got

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1473
# args: ip,sysTag
%s\ is\ not\ a\ valid\ IPv6\ address.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = {0} is not a valid IPv6 address. Please correct your system tag[{1}] of static IP

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1467
# args: ip,sysTag
%s\ is\ not\ a\ valid\ IPv4\ address.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = {0} is not a valid IPv4 address. Please correct your system tag[{1}] of static IP

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1489
# args: ip,l3Uuid
IP[%s]\ is\ not\ available\ on\ the\ L3\ network[uuid\:%s] = IP[{0}] is not available on the L3 network[uuid:{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1512
# args: tag,sameTag.getResourceUuid(),hostname,l3Uuid
conflict\ hostname\ in\ system\ tag[%s];\ there\ has\ been\ a\ VM[uuid\:%s]\ having\ hostname[%s]\ on\ L3\ network[uuid\:%s] = conflict hostname in system tag[{0}]; there has been a VM[uuid:{1}] having hostname[{2}] on L3 network[uuid:{3}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1543
# args: o,order
invalid\ boot\ device[%s]\ in\ boot\ order[%s] = invalid boot device[{0}] in boot order[{1}]

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1561
# args: resourceUuid
Already\ have\ one\ userdata\ systemTag\ for\ vm[uuid\:\ %s]. = Already have one userdata systemTag for vm[uuid: {0}].

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1581
# args: 
Shouldn't\ be\ more\ than\ one\ userdata\ systemTag\ for\ one\ vm. = Shouldn't be more than one userdata systemTag for one vm.

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2043
# args: ref.getResourceUuid()
the\ resource[uuid\:%s]\ is\ a\ ROOT\ volume,\ you\ cannot\ change\ its\ owner,\ instead,change\ the\ owner\ of\ the\ VM\ the\ root\ volume\ belongs\ to = the resource[uuid:{0}] is a ROOT volume, you cannot change its owner, instead,change the owner of the VM the root volume belongs to

# at: src/zstack/./compute/src/main/java/org/zstack/compute/vm/VmTracer.java:108
# args: vmUuid,hostUuid
A\ strange\ vm[%s]\ was\ found\ on\ the\ host[%s],\ May\ cause\ problems,\ Please\ manually\ clean\ this\ vm = A strange vm[{0}] was found on the host[{1}], May cause problems, Please manually clean this vm

# at: src/zstack/./configuration/src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:86
# args: msg.getAllocatorStrategy()
unsupported\ host\ allocation\ strategy[%s] = unsupported host allocation strategy[{0}]

# at: src/zstack/./configuration/src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:72
# args: msg.getType()
unsupported\ instance\ offering\ type[%s] = unsupported instance offering type[{0}]

# at: src/zstack/./configuration/src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:76
# args: msg.getCpuNum()
cpu\ num[%s]\ is\ less\ than\ 1 = cpu num[{0}] is less than 1

# at: src/zstack/./configuration/src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:80
# args: msg.getMemorySize()
memory\ size[%s\ bytes]\ is\ less\ than\ 16M,\ no\ modern\ operating\ system\ is\ likely\ able\ to\ boot\ with\ such\ small\ memory\ size = memory size[{0} bytes] is less than 16M, no modern operating system is likely able to boot with such small memory size

# at: src/zstack/./configuration/src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:92
# args: msg.getAllocationStrategy()
unsupported\ primary\ storage\ allocation\ strategy[%s] = unsupported primary storage allocation strategy[{0}]

# at: src/zstack/./console/src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:103
# args: 
the\ console\ agent\ is\ not\ connected;\ it's\ mostly\ like\ the\ management\ node\ just\ starts,\ please\ wait\ for\ the\ console\ agent\ connected. = the console agent is not connected; it's mostly like the management node just starts, please wait for the console agent connected.

# at: src/zstack/./console/src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:124
# args: vm.getUuid()
cannot\ find\ host\ IP\ of\ the\ vm[uuid\:%s],\ is\ the\ vm\ running??? = cannot find host IP of the vm[uuid:{0}], is the vm running???

# at: src/zstack/./console/src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:246
# args: vm.getUuid(),vo.getTargetHostname(),vo.getTargetPort(),vo.getProxyHostname(),vo.getProxyPort(),errorCode.toString()
failed\ to\ delete\ a\ console\ proxy[vmUuid\:%s,\ host\ IP\:\ %s,\ host\ port\:\ %s,\ proxy\ IP\:\ %s,\ proxy\ port\:\ %s],\ %s = failed to delete a console proxy[vmUuid:{0}, host IP: {1}, host port: {2}, proxy IP: {3}, proxy port: {4}], {5}

# at: src/zstack/./console/src/main/java/org/zstack/console/ConsoleApiInterceptor.java:52
# args: msg.getVmInstanceUuid(),state
Console\ is\ only\ available\ when\ the\ VM[uuid\:%s]\ is\ Running,\ but\ the\ current\ state\ is\ %s = Console is only available when the VM[uuid:{0}] is Running, but the current state is {1}

# at: src/zstack/./console/src/main/java/org/zstack/console/ConsoleProxyAgentTracker.java:63
# args: resourceUuid,reply.getError()
unable\ to\ ping\ the\ console\ proxy\ agent[uuid\:%s],\ %s = unable to ping the console proxy agent[uuid:{0}], {1}

# at: src/zstack/./console/src/main/java/org/zstack/console/ConsoleProxyAgentTracker.java:81
# args: resourceUuid
successfully\ reconnected\ the\ console\ proxy\ agent[uuid\:%s] = successfully reconnected the console proxy agent[uuid:{0}]

# at: src/zstack/./console/src/main/java/org/zstack/console/ConsoleProxyAgentTracker.java:78
# args: resourceUuid,reply.getError()
failed\ to\ reconnect\ console\ proxy\ agent[uuid\:%s],\ %s = failed to reconnect console proxy agent[uuid:{0}], {1}

# at: src/zstack/./console/src/main/java/org/zstack/console/ConsoleProxyBase.java:62
# args: uri.toString()
establish\ VNC\:\ unexpected\ uri\:\ %s = establish VNC: unexpected uri: {0}

# at: src/zstack/./console/src/main/java/org/zstack/console/ConsoleProxyBase.java:148
# args: ret.getError()
unable\ to\ check\ console\ proxy\ availability,\ because\ %s = unable to check console proxy availability, because {0}

# at: src/zstack/./console/src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:329
# args: uuid
invalid\ management\ node\ UUID[%s] = invalid management node UUID[{0}]

# at: src/zstack/./console/src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:450
# args: 
failed\ to\ configure\ consoleProxyOverriddenIp = failed to configure consoleProxyOverriddenIp

# at: src/zstack/./console/src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:473
# args: 
failed\ to\ reconnect\ console\ proxy = failed to reconnect console proxy

# at: src/zstack/./core/src/main/java/org/zstack/core/ansible/AnsibleRunner.java:374
# args: 
User\ name\ or\ password\ or\ port\ number\ may\ be\ problematic = User name or password or port number may be problematic

# at: src/zstack/./core/src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java:107
# args: srcFolder,srcRes.getStdout(),srcRes.getStderr()
cannot\ check\ md5sum\ of\ files\ in\ the\ folder[%s].\nstdout\:%s\nstderr\:%s = cannot check md5sum of files in the folder[{0}].\nstdout:{1}\nstderr:{2}

# at: src/zstack/./core/src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java:122
# args: dstFolder,hostname,dstRes.getStdout(),dstRes.getStderr()
cannot\ check\ md5sum\ of\ files\ in\ the\ folder[%s]\ on\ the\ host[ip\:%s].\nstdout\:%s\nstderr\:%s = cannot check md5sum of files in the folder[{0}] on the host[ip:{1}].\nstdout:{2}\nstderr:{3}

# at: src/zstack/./core/src/main/java/org/zstack/core/cloudbus/CloudBusImpl2.java:683
# args: errMsg
message\ is\ not\ in\ corrected\ JSON\ mediaType,\ %s = message is not in corrected JSON mediaType, {0}

# at: src/zstack/./core/src/main/java/org/zstack/core/cloudbus/EventFacadeImpl.java:68
# args: EventFacade.WEBHOOK_TYPE
for\ webhooks\ with\ type[%s],\ the\ field\ opaque\ cannot\ be\ null = for webhooks with type[{0}], the field opaque cannot be null

# at: src/zstack/./core/src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java:72
# args: msg.getCategory(),msg.getName()
unable\ to\ find\ GlobalConfig[category\:%s,\ name\:%s] = unable to find GlobalConfig[category:{0}, name:{1}]

# at: src/zstack/./core/src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java:113
# args: msg.getCategory(),msg.getName()
Unable\ to\ find\ GlobalConfig[category\:\ %s,\ name\:\ %s] = Unable to find GlobalConfig[category: {0}, name: {1}]

# at: src/zstack/./core/src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:17
# args: service.getName()
service[%s]\ has\ been\ registered = service[{0}] has been registered

# at: src/zstack/./core/src/main/java/org/zstack/core/gc/GarbageCollectorManagerImpl.java:210
# args: vo.getUuid(),vo.getName()
cannot\ trigger\ a\ finished\ GC\ job[uuid\:%s,\ name\:%s] = cannot trigger a finished GC job[uuid:{0}, name:{1}]

# at: src/zstack/./core/src/main/java/org/zstack/core/notification/NotificationManager.java:243
# args: newValue
%s\ is\ not\ a\ valid\ URL = {0} is not a valid URL

# at: src/zstack/./core/src/main/java/org/zstack/core/progress/ProgressApiInterceptor.java:38
# args: msg.getApiId()
parameter\ apiId[%s]\ is\ not\ a\ valid\ uuid. = parameter apiId[{0}] is not a valid uuid.

# at: src/zstack/./core/src/main/java/org/zstack/core/rest/RESTFacadeImpl.java:507
# args: method.toString().toLowerCase(),url,rsp.getStatusCode(),rsp.getBody()
failed\ to\ %s\ to\ %s,\ status\ code\:\ %s,\ response\ body\:\ %s = failed to {0} to {1}, status code: {2}, response body: {3}

# at: src/zstack/./core/src/main/java/org/zstack/core/rest/RESTFacadeImpl.java:502
# args: method.toString().toLowerCase(),url,e.getMessage()
failed\ to\ %s\ to\ %s,\ IO\ Error\:\ %s = failed to {0} to {1}, IO Error: {2}

# at: src/zstack/./core/src/main/java/org/zstack/core/rest/RESTFacadeImpl.java:550
# args: url,finalTimeout
unable\ to\ echo\ %s\ in\ %sms = unable to echo {0} in {1}ms

# at: src/zstack/./core/src/main/java/org/zstack/core/retry/Retry.java:102
# args: __name__,times,interval
an\ operation[%s]\ fails\ after\ retrying\ %s\ times\ with\ the\ interval\ %s\ seconds = an operation[{0}] fails after retrying {1} times with the interval {2} seconds

# at: src/zstack/./core/src/main/java/org/zstack/core/salt/SaltRunner.java:297
# args: stateName,targetIp,retry
failed\ to\ run\ salt\ state[%s]\ on\ system[%s],\ failed\ after\ %s\ retries = failed to run salt state[{0}] on system[{1}], failed after {2} retries

# at: src/zstack/./core/src/main/java/org/zstack/core/webhook/WebhookApiInterceptor.java:28
# args: url
Invalid\ url[%s] = Invalid url[{0}]

# at: src/zstack/./externalservice/src/main/java/org/zstack/externalservice/cronjob/CronJobImpl.java:54
# args: 
crond\ is\ not\ running = crond is not running

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountBase.java:301
# args: group.getUuid(),msg.getAccountUuid()
the\ user\ group[uuid\:%s]\ does\ not\ belong\ to\ the\ account[uuid\:%s] = the user group[uuid:{0}] does not belong to the account[uuid:{1}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountBase.java:403
# args: msg.getName(),msg.getIdentityUuid()
cannot\ find\ Quota[name\:\ %s]\ for\ the\ account[uuid\:\ %s] = cannot find Quota[name: {0}] for the account[uuid: {1}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountBase.java:453
# args: ruuid,resourceType,self.getUuid()
Revoke\ Shared\ resource[uuid\:%s\ type\:%s]\ of\ account[uuid\:%s] = Revoke Shared resource[uuid:{0} type:{1}] of account[uuid:{2}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountBase.java:450
# args: ruuid,resourceType,self.getUuid(),auuid
Revoke\ Shared\ resource[uuid\:%s\ type\:%s]\ of\ account[uuid\:%s]\ from\ account[uuid\:%s] = Revoke Shared resource[uuid:{0} type:{1}] of account[uuid:{2}] from account[uuid:{3}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountBase.java:482
# args: self.getUuid(),ruuid
the\ account[uuid\:\ %s]\ doesn't\ have\ a\ resource[uuid\:\ %s] = the account[uuid: {0}] doesn't have a resource[uuid: {1}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountBase.java:523
# args: ruuid,resourceType,auuid
Shared\ resource[uuid\:%s\ type\:%s]\ to\ account[uuid\:%s] = Shared resource[uuid:{0} type:{1}] to account[uuid:{2}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountBase.java:506
# args: ruuid,resourceType
Shared\ resource[uuid\:%s\ type\:%s]\ to\ public = Shared resource[uuid:{0} type:{1}] to public

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountBase.java:539
# args: user.getUuid(),msg.getAccountUuid()
the\ user[uuid\:%s]\ does\ not\ belong\ to\ the\ account[uuid\:%s] = the user[uuid:{0}] does not belong to the account[uuid:{1}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:204
# args: resourceUuid
cannot\ find\ the\ resource[uuid\:%s];\ wrong\ resourceUuid\ or\ the\ resource\ is\ admin\ resource = cannot find the resource[uuid:{0}]; wrong resourceUuid or the resource is admin resource

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:359
# args: msg.getUserUuid()
the\ user\ specified\ by\ the\ userUuid[%s]\ does\ not\ belong\ to\ the\ current\ account,\ and\ the\ current\ account\ is\ not\ an\ admin\ account,\ so\ it\ has\ no\ permission\ to\ check\ the\ user'spermissions = the user specified by the userUuid[{0}] does not belong to the current account, and the current account is not an admin account, so it has no permission to check the user'spermissions

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:479
# args: msg.getAccountName()
account[%s]\ not\ found = account[{0}] not found

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1187
# args: accountUuid
cannot\ find\ the\ account[uuid\:%s] = cannot find the account[uuid:{0}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1666
# args: 
accountName\ and\ accountUuid\ cannot\ both\ be\ null,\ you\ must\ specify\ at\ least\ one = accountName and accountUuid cannot both be null, you must specify at least one

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1677
# args: msg.getName(),msg.getAccountUuid()
unable\ to\ create\ a\ group.\ A\ group\ called\ %s\ is\ already\ under\ the\ account[uuid\:%s] = unable to create a group. A group called {0} is already under the account[uuid:{1}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1687
# args: msg.getName(),msg.getAccountUuid()
unable\ to\ create\ a\ user.\ A\ user\ called\ %s\ is\ already\ under\ the\ account[uuid\:%s] = unable to create a user. A user called {0} is already under the account[uuid:{1}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1696
# args: msg.getName()
unable\ to\ create\ an\ account.\ An\ account\ already\ called\ %s = unable to create an account. An account already called {0}

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1703
# args: 
account\ cannot\ delete\ itself = account cannot delete itself

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1709
# args: 
cannot\ delete\ builtin\ admin\ account. = cannot delete builtin admin account.

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1715
# args: 
Only\ admin\ can\ delete\ account. = Only admin can delete account.

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1723
# args: 
the\ current\ session\ is\ an\ account\ session.\ You\ need\ to\ specify\ the\ field\ 'uuid'\ of\ the\ user\ you\ want\ to\ update = the current session is an account session. You need to specify the field 'uuid' of the user you want to update

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1738
# args: msg.getUuid()
your\ are\ login\ as\ a\ user,\ you\ cannot\ another\ user[uuid\:%s] = your are login as a user, you cannot another user[uuid:{0}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1746
# args: 
all\ is\ set\ to\ false,\ accountUuids\ cannot\ be\ null\ or\ empty = all is set to false, accountUuids cannot be null or empty

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1754
# args: 
toPublic\ is\ set\ to\ false,\ accountUuids\ cannot\ be\ null\ or\ empty = toPublic is set to false, accountUuids cannot be null or empty

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1803
# args: policy.getName(),policy.getUuid(),msg.getSession().getAccountUuid()
policy[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = policy[name: {0}, uuid: {1}] doesn't belong to the account[uuid: {2}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1817
# args: user.getName(),user.getUuid(),msg.getSession().getAccountUuid()
user[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = user[name: {0}, uuid: {1}] doesn't belong to the account[uuid: {2}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1821
# args: group.getName(),group.getUuid(),msg.getSession().getAccountUuid()
group[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = group[name: {0}, uuid: {1}] doesn't belong to the account[uuid: {2}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1829
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ effect\ field.\ Invalid\ statement[%s] = a statement must have effect field. Invalid statement[{0}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1832
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ action\ field.\ Invalid\ statement[%s] = a statement must have action field. Invalid statement[{0}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1835
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ a\ non-empty\ action\ field.\ Invalid\ statement[%s] = a statement must have a non-empty action field. Invalid statement[{0}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1860
# args: 
the\ name\ of\ admin\ account\ cannot\ be\ updated = the name of admin account cannot be updated

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1866
# args: 
only\ admin\ account\ can\ update\ it's\ password = only admin account can update it's password

# at: src/zstack/./identity/src/main/java/org/zstack/identity/AccountManagerImpl.java:1874
# args: account.getUuid(),account.getName(),msg.getUuid()
account[uuid\:\ %s,\ name\:\ %s]\ is\ a\ normal\ account,\ it\ cannot\ reset\ the\ password\ of\ another\ account[uuid\:\ %s] = account[uuid: {0}, name: {1}] is a normal account, it cannot reset the password of another account[uuid: {2}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/QuotaUtil.java:60
# args: quotaCompareInfo.resourceTargetOwnerAccountUuid,quotaCompareInfo.quotaName,quotaCompareInfo.quotaValue,quotaCompareInfo.currentUsed,quotaCompareInfo.request
quota\ exceeding.The\ resource\ owner(or\ target\ resource\ owner)\ account[uuid\:\ %s]\ exceeds\ a\ quota[name\:\ %s,\ value\:\ %s],\ Current\ used\:%s,\ Request\:%s.\ Please\ contact\ the\ administrator. = quota exceeding.The resource owner(or target resource owner) account[uuid: {0}] exceeds a quota[name: {1}, value: {2}], Current used:{3}, Request:{4}. Please contact the administrator.

# at: src/zstack/./identity/src/main/java/org/zstack/identity/QuotaUtil.java:110
# args: currentAccountUuid,quotaName,quotaValue
quota\ exceeding.\ The\ account[uuid\:\ %s]\ exceeds\ a\ quota[name\:\ %s,\ value\:\ %s].\ Please\ contact\ the\ administrator. = quota exceeding. The account[uuid: {0}] exceeds a quota[name: {1}, value: {2}]. Please contact the administrator.

# at: src/zstack/./identity/src/main/java/org/zstack/identity/QuotaUtil.java:117
# args: currentAccountUuid,quotaName,quotaValue,currentUsed,request
quota\ exceeding.\ The\ account[uuid\:\ %s]\ exceeds\ a\ quota[name\:\ %s,\ value\:\ %s],\ Current\ used\:%s,\ Request\:%s.\ Please\ contact\ the\ administrator. = quota exceeding. The account[uuid: {0}] exceeds a quota[name: {1}, value: {2}], Current used:{3}, Request:{4}. Please contact the administrator.

# at: src/zstack/./identity/src/main/java/org/zstack/identity/Session.java:37
# args: 
Login\ sessions\ hit\ limit\ of\ max\ allowed\ concurrent\ login\ sessions = Login sessions hit limit of max allowed concurrent login sessions

# at: src/zstack/./identity/src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:190
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),uuid,resourceType.getSimpleName()
permission\ denied,\ the\ account[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ resource[uuid\:%s,\ type\:%s] = permission denied, the account[uuid:{0}] is not the owner of the resource[uuid:{1}, type:{2}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:210
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),resourceWithNoAccess,resourceType.getSimpleName()
the\ account[uuid\:%s]\ has\ no\ access\ to\ the\ resources[uuid\:%s,\ type\:%s] = the account[uuid:{0}] has no access to the resources[uuid:{1}, type:{2}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:90
# args: 
operation\ is\ denied\ by\ default = operation is denied by default

# at: src/zstack/./identity/src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:187
# args: p.getUuid()
the\ operation\ is\ denied\ by\ the\ policy[uuid\:%s] = the operation is denied by the policy[uuid:{0}]

# at: src/zstack/./identity/src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:200
# args: p.getUuid(),fname
the\ operation\ is\ denied\ by\ the\ policy[uuid\:%s],\ field[%s]\ is\ not\ permitted\ to\ set = the operation is denied by the policy[uuid:{0}], field[{1}] is not permitted to set

# at: src/zstack/./identity/src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java:28
# args: 
cannot\ delete\ a\ system\ or\ predefined\ role = cannot delete a system or predefined role

# at: src/zstack/./image/src/main/java/org/zstack/image/BackupStorageDeleteBitGC.java:35
# args: backupStorageUuid,bsStatus
the\ backup\ storage[uuid\:%s]\ is\ not\ in\ status\ of\ Connected,\ current\ status\ is\ %s = the backup storage[uuid:{0}] is not in status of Connected, current status is {1}

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageApiInterceptor.java:82
# args: vol.getUuid(),vol.getStatus()
volume[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = volume[uuid:{0}] is not Ready, it's {1}

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageApiInterceptor.java:86
# args: vol.getUuid(),vol.getState()
volume[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = volume[uuid:{0}] is not Enabled, it's {1}

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageApiInterceptor.java:157
# args: 
ISO\ cannot\ be\ used\ as\ system\ image = ISO cannot be used as system image

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageApiInterceptor.java:163
# args: msg.getFormat()
unknown\ format[%s] = unknown format[{0}]

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageApiInterceptor.java:167
# args: msg.getType()
unsupported\ image\ type[%s] = unsupported image type[{0}]

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageApiInterceptor.java:186
# args: msg.getBackupStorageUuids(),BackupStorageStatus.Connected,BackupStorageState.Enabled
no\ backup\ storage\ specified\ in\ uuids%s\ is\ available\ for\ adding\ this\ image;\ they\ are\ not\ in\ status\ %s\ or\ not\ in\ state\ %s,\ or\ the\ uuid\ is\ invalid\ backup\ storage\ uuid = no backup storage specified in uuids{0} is available for adding this image; they are not in status {1} or not in state {2}, or the uuid is invalid backup storage uuid

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageApiInterceptor.java:197
# args: 
url\ must\ starts\ with\ 'file\:///',\ 'http\://',\ 'https\://'，\ 'ftp\://',\ 'sftp\://'\ or\ '/' = url must starts with 'file:///', 'http://', 'https://'， 'ftp://', 'sftp://' or '/'

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageBase.java:152
# args: self.getUuid(),self.getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ on\ any\ backup\ storage = the image[uuid:{0}, name:{1}] is not on any backup storage

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageBase.java:162
# args: self.getUuid(),self.getName()
No\ connected\ backup\ storage\ found\ for\ image[uuid\:%s,\ name\:%s] = No connected backup storage found for image[uuid:{0}, name:{1}]

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageBase.java:271
# args: size,bsUuid,reply.getError()
failed\ to\ return\ capacity[%s]\ to\ the\ backup\ storage[uuid\:%s],\ %s = failed to return capacity[{0}] to the backup storage[uuid:{1}], {2}

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageBase.java:568
# args: self.getUuid(),self.getName(),bsUuid
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ on\ the\ backup\ storage[uuid\:%s] = the image[uuid:{0}, name:{1}] is not on the backup storage[uuid:{2}]

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageBase.java:510
# args: self.getUuid(),self.getName(),ref.getStatus(),bsUuid
the\ image[uuid\:%s,\ name\:%s]'s\ status[%s]\ is\ not\ Deleted\ on\ the\ backup\ storage[uuid\:%s] = the image[uuid:{0}, name:{1}]'s status[{2}] is not Deleted on the backup storage[uuid:{3}]

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageBase.java:552
# args: self.getUuid(),self.getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ on\ any\ backup\ storage = the image[uuid:{0}, name:{1}] is not deleted on any backup storage

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageBase.java:573
# args: self.getUuid(),self.getName(),bsUuid
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ on\ the\ backup\ storage[uuid\:%s] = the image[uuid:{0}, name:{1}] is not deleted on the backup storage[uuid:{2}]

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageManagerImpl.java:433
# args: bootModeCount
only\ one\ bootMode\ system\ tag\ is\ allowed,\ but\ %d\ got = only one bootMode system tag is allowed, but {0} got

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageManagerImpl.java:451
# args: bootMode,systemTag
[%s]\ specified\ in\ system\ tag\ [%s]\ is\ not\ a\ valid\ boot\ mode = [{0}] specified in system tag [{1}] is not a valid boot mode

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageManagerImpl.java:549
# args: imageUuid,bsUuid,reply.getError()
failed\ to\ expunge\ the\ image[uuid\:%s]\ on\ the\ backup\ storage[uuid\:%s],\ will\ try\ it\ later.\ %s = failed to expunge the image[uuid:{0}] on the backup storage[uuid:{1}], will try it later. {2}

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageManagerImpl.java:858
# args: name,imageUuid
added\ image\ [name\:\ %s,\ uuid\:\ %s] = added image [name: {0}, uuid: {1}]

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageManagerImpl.java:862
# args: name,imageUuid,reason.toString()
upload\ image\ [name\:\ %s,\ uuid\:\ %s]\ failed\:\ %s = upload image [name: {0}, uuid: {1}] failed: {2}

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageManagerImpl.java:885
# args: 
upload\ session\ expired = upload session expired

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageManagerImpl.java:1376
# args: msgData.getBackupStorageUuids(),JSONObjectUtil.toJsonString(errs)
unable\ to\ allocate\ backup\ storage\ specified\ by\ uuids%s,\ list\ errors\ are\:\ %s = unable to allocate backup storage specified by uuids{0}, list errors are: {1}

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageManagerImpl.java:1487
# args: msgData.getRootVolumeUuid()
failed\ to\ create\ image\ from\ root\ volume[uuid\:%s]\ on\ all\ backup\ storage,\ see\ cause\ for\ one\ of\ errors = failed to create image from root volume[uuid:{0}] on all backup storage, see cause for one of errors

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageManagerImpl.java:1763
# args: msgData.getBackupStorageUuids(),JSONObjectUtil.toJsonString(errs)
failed\ to\ allocate\ all\ backup\ storage[uuid\:%s],\ a\ list\ of\ error\:\ %s = failed to allocate all backup storage[uuid:{0}], a list of error: {1}

# at: src/zstack/./image/src/main/java/org/zstack/image/ImageManagerImpl.java:1864
# args: msgData.getVolumeUuid(),msgData.getBackupStorageUuids()
failed\ to\ create\ data\ volume\ template\ from\ volume[uuid\:%s]\ on\ all\ backup\ storage%s.\ See\ cause\ for\ one\ of\ errors = failed to create data volume template from volume[uuid:{0}] on all backup storage{1}. See cause for one of errors

# at: src/zstack/./longjob/src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:67
# args: msg.getJobName()
%s\ is\ not\ an\ API = {0} is not an API

# at: src/zstack/./longjob/src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:130
# args: 
cannot\ cancel\ longjob\ that\ is\ succeeded = cannot cancel longjob that is succeeded

# at: src/zstack/./longjob/src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:133
# args: 
cannot\ cancel\ longjob\ that\ is\ already\ canceled = cannot cancel longjob that is already canceled

# at: src/zstack/./longjob/src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:136
# args: 
cannot\ cancel\ longjob\ that\ is\ failed = cannot cancel longjob that is failed

# at: src/zstack/./longjob/src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:147
# args: 
delete\ longjob\ only\ when\ it's\ succeeded,\ canceled,\ or\ failed = delete longjob only when it's succeeded, canceled, or failed

# at: src/zstack/./longjob/src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:158
# args: 
rerun\ longjob\ only\ when\ it's\ succeeded,\ canceled,\ or\ failed = rerun longjob only when it's succeeded, canceled, or failed

# at: src/zstack/./longjob/src/main/java/org/zstack/longjob/LongJobFactoryImpl.java:31
# args: jobName
%s\ has\ no\ corresponding\ longjob = {0} has no corresponding longjob

# at: src/zstack/./longjob/src/main/java/org/zstack/longjob/LongJobUtils.java:26
# args: longJobUuid
long\ job[uuid\:%s]\ has\ been\ canceled = long job[uuid:{0}] has been canceled

# at: src/zstack/./network/src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:66
# args: msg.getL2NetworkUuid(),msg.getClusterUuid()
l2Network[uuid\:%s]\ has\ attached\ to\ cluster[uuid\:%s],\ can't\ attach\ again = l2Network[uuid:{0}] has attached to cluster[uuid:{1}], can't attach again

# at: src/zstack/./network/src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:75
# args: msg.getL2NetworkUuid(),msg.getClusterUuid()
l2Network[uuid\:%s]\ has\ not\ attached\ to\ cluster[uuid\:%s] = l2Network[uuid:{0}] has not attached to cluster[uuid:{1}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:89
# args: msg.getType()
unsupported\ l2Network\ type[%s] = unsupported l2Network type[{0}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java:553
# args: vl2.getUuid(),vl2.getName(),msg.getClusterUuid(),vl2.getPhysicalInterface(),vl2.getVlan(),tl2.getUuid()
There\ has\ been\ a\ L2VlanNetwork[uuid\:%s,\ name\:%s]\ attached\ to\ cluster[uuid\:%s]\ that\ has\ physical\ interface[%s],\ vlan[%s].\ Failed\ to\ attach\ L2VlanNetwork[uuid\:%s] = There has been a L2VlanNetwork[uuid:{0}, name:{1}] attached to cluster[uuid:{2}] that has physical interface[{3}], vlan[{4}]. Failed to attach L2VlanNetwork[uuid:{5}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java:535
# args: l2.getUuid(),l2.getName(),msg.getClusterUuid(),l2.getPhysicalInterface(),tl2.getUuid()
There\ has\ been\ a\ l2Network[uuid\:%s,\ name\:%s]\ attached\ to\ cluster[uuid\:%s]\ that\ has\ physical\ interface[%s].\ Failed\ to\ attach\ l2Network[uuid\:%s] = There has been a l2Network[uuid:{0}, name:{1}] attached to cluster[uuid:{2}] that has physical interface[{3}]. Failed to attach l2Network[uuid:{4}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:116
# args: 
you\ must\ update\ system\ and\ category\ both = you must update system and category both

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:351
# args: L3NetworkCategory.validCombination
not\ valid\ combination\ of\ system\ and\ category,only\ %s\ are\ valid = not valid combination of system and category,only {0} are valid

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:161
# args: msg.getIp()
invalid\ IP[%s] = invalid IP[{0}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:145
# args: msg.getL3NetworkUuid()
no\ ip\ range\ in\ l3[%s] = no ip range in l3[{0}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:149
# args: msg.getRouterInterfaceIp(),ipRangeVO.getUuid(),ipRangeVO.getNetworkCidr(),msg.getL3NetworkUuid()
ip[%s]\ is\ not\ in\ the\ cidr\ of\ ip\ range[uuid\:%s,\ cidr\:%s]\ which\ l3\ network[%s]\ attached = ip[{0}] is not in the cidr of ip range[uuid:{1}, cidr:{2}] which l3 network[{3}] attached

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:153
# args: msg.getRouterInterfaceIp(),ipRangeVO.getUuid(),ipRangeVO.getStartIp(),ipRangeVO.getEndIp(),msg.getL3NetworkUuid()
ip[%s]\ in\ ip\ range[uuid\:%s,\ startIp\:%s,\ endIp\:%s]\ which\ l3\ network[%s]\ attached,\ this\ is\ not\ allowed = ip[{0}] in ip range[uuid:{1}, startIp:{2}, endIp:{3}] which l3 network[{4}] attached, this is not allowed

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:167
# args: 
ipRangeUuid\ and\ l3NetworkUuid\ cannot\ both\ be\ null;\ you\ must\ set\ either\ one. = ipRangeUuid and l3NetworkUuid cannot both be null; you must set either one.

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:289
# args: msg.getNetworkCidr()
%s\ is\ not\ a\ valid\ network\ cidr = {0} is not a valid network cidr

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:214
# args: msg.getGateway()
%s\ is\ not\ a\ valid\ ipv6\ address = {0} is not a valid ipv6 address

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:218
# args: msg.getStartIp(),msg.getEndIp(),msg.getPrefixLen(),msg.getGateway()
[startIp\ %s,\ endIp\ %s,\ prefixLen\ %d,\ gateway\ %s]\ is\ not\ a\ valid\ ipv6\ range = [startIp {0}, endIp {1}, prefixLen {2}, gateway {3}] is not a valid ipv6 range

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:228
# args: IPv6Constants.IPV6_PREFIX_LEN_MIN,IPv6Constants.IPV6_PREFIX_LEN_MAX
ip\ range\ prefix\ length\ is\ out\ of\ range\ [%d\ -\ %d]\  = ip range prefix length is out of range [{0} - {1}] 

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:234
# args: l3Vo.getUuid(),l3Vo.getName()
l3\ network\ [uuid\ %s\:\ name\ %s]\ is\ not\ a\ ipv6\ network = l3 network [uuid {0}: name {1}] is not a ipv6 network

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:240
# args: ipr.getAddressMode(),rangeVOS.get(0).getAddressMode()
addressMode[%s]\ is\ different\ from\ L3Netowork\ address\ mode[%s] = addressMode[{0}] is different from L3Netowork address mode[{1}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:246
# args: IPv6Constants.IPV6_STATELESS_PREFIX_LEN
ipv6\ prefix\ length\ must\ be\ %d\ for\ Stateless-DHCP\ or\ SLAAC = ipv6 prefix length must be {0} for Stateless-DHCP or SLAAC

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:256
# args: ipr.getStartIp(),ipr.getEndIp(),r.getStartIp(),r.getEndIp()
new\ ip\ range\ [startip\ \:%s,\ endip\ \:%s]\ is\ overlaped\ with\ old\ ip\ range[startip\ \:%s,\ endip\ \:%s] = new ip range [startip :{0}, endip :{1}] is overlaped with old ip range[startip :{2}, endip :{3}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:266
# args: r.getNetworkCidr(),ipr.getNetworkCidr()
new\ network\ CIDR\ [%s]\ is\ different\ from\ old\ network\ cidr\ [%s] = new network CIDR [{0}] is different from old network cidr [{1}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:464
# args: ipr.getGateway(),r.getGateway()
new\ add\ ip\ range\ gateway\ %s\ is\ different\ from\ old\ gateway\ %s = new add ip range gateway {0} is different from old gateway {1}

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:286
# args: msg.getNetworkCidr()
%s\ is\ not\ an\ allowed\ network\ cidr,\ because\ it\ doesn't\ have\ usable\ ip\ range = {0} is not an allowed network cidr, because it doesn't have usable ip range

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:309
# args: 
ipRangeUuids,\ L3NetworkUuids,\ zoneUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = ipRangeUuids, L3NetworkUuids, zoneUuids must have at least one be none-empty list, or all is set to true

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:330
# args: msg.getType()
unsupported\ l3network\ type[%s] = unsupported l3network type[{0}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:336
# args: msg.getDnsDomain()
%s\ is\ not\ a\ valid\ domain\ name = {0} is not a valid domain name

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:378
# args: l3Vo.getUuid(),l3Vo.getName()
l3\ network\ [uuid\ %s\:\ name\ %s]\ is\ not\ a\ ipv4\ network = l3 network [uuid {0}: name {1}] is not a ipv4 network

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:382
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ D\ class\ addresses\ which\ are\ for\ multicast = the IP range[{0} ~ {1}] contains D class addresses which are for multicast

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:386
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ E\ class\ addresses\ which\ are\ reserved = the IP range[{0} ~ {1}] contains E class addresses which are reserved

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:390
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ link\ local\ addresses\ which\ are\ reserved = the IP range[{0} ~ {1}] contains link local addresses which are reserved

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:396
# args: ipr.getGateway(),ipr.getStartIp(),ipr.getNetmask()
the\ gateway[%s]\ is\ not\ in\ the\ subnet\ %s/%s = the gateway[{0}] is not in the subnet {1}/{2}

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:400
# args: ipr.getEndIp(),ipr.getStartIp(),ipr.getNetmask()
the\ endip[%s]\ is\ not\ in\ the\ subnet\ %s/%s = the endip[{0}] is not in the subnet {1}/{2}

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:404
# args: ipr.getStartIp()
start\ ip[%s]\ is\ not\ a\ IPv4\ address = start ip[{0}] is not a IPv4 address

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:408
# args: ipr.getEndIp()
end\ ip[%s]\ is\ not\ a\ IPv4\ address = end ip[{0}] is not a IPv4 address

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:412
# args: ipr.getGateway()
gateway[%s]\ is\ not\ a\ IPv4\ address = gateway[{0}] is not a IPv4 address

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:416
# args: ipr.getNetmask()
netmask[%s]\ is\ not\ a\ netmask,\ and\ the\ IP\ range\ netmask\ cannot\ be\ 0.0.0.0 = netmask[{0}] is not a netmask, and the IP range netmask cannot be 0.0.0.0

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:420
# args: 
ip\ allocation\ can\ not\ contain\ network\ address\ or\ broadcast\ address = ip allocation can not contain network address or broadcast address

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:428
# args: ipr.getStartIp(),ipr.getEndIp()
start\ ip[%s]\ is\ behind\ end\ ip[%s] = start ip[{0}] is behind end ip[{1}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:433
# args: ipr.getGateway(),ipr.getStartIp(),ipr.getEndIp()
gateway[%s]\ can\ not\ be\ part\ of\ range[%s,\ %s] = gateway[{0}] can not be part of range[{1}, {2}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:444
# args: r.getUuid(),r.getStartIp(),r.getEndIp()
overlap\ with\ ip\ range[uuid\:%s,\ start\ ip\:%s,\ end\ ip\:\ %s] = overlap with ip range[uuid:{0}, start ip:{1}, end ip: {2}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:454
# args: r.getUuid(),rcidr,cidr
multiple\ CIDR\ on\ the\ same\ L3\ network\ is\ not\ allowed.\ There\ has\ been\ a\ IP\ range[uuid\:%s,\ CIDR\:%s],\ the\ new\ IP\ range[CIDR\:%s]\ is\ not\ in\ the\ CIDR\ with\ the\ existing\ one = multiple CIDR on the same L3 network is not allowed. There has been a IP range[uuid:{0}, CIDR:{1}], the new IP range[CIDR:{2}] is not in the CIDR with the existing one

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:486
# args: manner,ip
%s[%s]\ is\ not\ a\ IPv6\ address = {0}[{1}] is not a IPv6 address

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:482
# args: manner,ip
%s[%s]\ is\ not\ a\ IPv4\ address = {0}[{1}] is not a IPv4 address

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:498
# args: msg.getDns(),msg.getL3NetworkUuid()
there\ has\ been\ a\ DNS[%s]\ on\ L3\ network[uuid\:%s] = there has been a DNS[{0}] on L3 network[uuid:{1}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:521
# args: msg.getL3NetworkUuid()
prefix\ [%s]\ is\ not\ a\ IPv4\ network\ cidr = prefix [{0}] is not a IPv4 network cidr

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:508
# args: msg.getNexthop()
nexthop[%s]\ is\ not\ a\ IPv4\ address = nexthop[{0}] is not a IPv4 address

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:515
# args: msg.getPrefix(),msg.getL3NetworkUuid()
there\ has\ been\ a\ hostroute\ for\ prefix[%s]\ on\ L3\ network[uuid\:%s] = there has been a hostroute for prefix[{0}] on L3 network[uuid:{1}]

# at: src/zstack/./network/src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:528
# args: msg.getPrefix(),msg.getL3NetworkUuid()
there\ is\ no\ hostroute\ for\ prefix[%s]\ on\ L3\ network[uuid\:%s] = there is no hostroute for prefix[{0}] on L3 network[uuid:{1}]

# at: src/zstack/./network/src/main/java/org/zstack/network/service/DhcpExtension.java:266
# args: vm.getUuid(),errorCode
unable\ to\ change\ the\ VM[uuid\:%s]'s\ default\ L3\ network\ in\ the\ DHCP\ backend,\ %s.\ You\ may\ need\ to\ reboot\ the\ VM\ to\ use\ the\ new\ default\ L3\ network\ setting = unable to change the VM[uuid:{0}]'s default L3 network in the DHCP backend, {1}. You may need to reboot the VM to use the new default L3 network setting

# at: src/zstack/./network/src/main/java/org/zstack/network/service/HostRouteExtension.java:88
# args: msg.getL3NetworkUuid()
L3Network\ [uuid\:\ %s]\ provide\ type\ null = L3Network [uuid: {0}] provide type null

# at: src/zstack/./network/src/main/java/org/zstack/network/service/HostRouteExtension.java:113
# args: msg.getL3NetworkUuid()
L3Network\ [uuid\:\ %s]\ does\ not\ have\ host\ route\ service = L3Network [uuid: {0}] does not have host route service

# at: src/zstack/./network/src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:41
# args: 
networkServices\ cannot\ be\ empty = networkServices cannot be empty

# at: src/zstack/./network/src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:62
# args: puuid
network\ service\ for\ provider[uuid\:%s]\ must\ be\ specified = network service for provider[uuid:{0}] must be specified

# at: src/zstack/./network/src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:67
# args: puuid
cannot\ find\ network\ service\ provider[uuid\:%s]\ or\ it\ provides\ no\ services = cannot find network service provider[uuid:{0}] or it provides no services

# at: src/zstack/./network/src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:81
# args: puuid,notSupported
network\ service\ provider[uuid\:%s]\ doesn't\ provide\ services%s = network service provider[uuid:{0}] doesn't provide services{1}

# at: src/zstack/./network/src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:93
# args: type,msg.getL3NetworkUuid()
there\ has\ been\ a\ network\ service[%s]\ attached\ to\ L3\ network[uuid\:%s] = there has been a network service[{0}] attached to L3 network[uuid:{1}]

# at: src/zstack/./network/src/main/java/org/zstack/network/service/NetworkServiceManagerImpl.java:374
# args: l3NetworkUuid,serviceType
L3Network[uuid\:%s]\ doesn't\ have\ network\ service[type\:%s]\ enabled\ or\ no\ provider\ provides\ this\ network\ service = L3Network[uuid:{0}] doesn't have network service[type:{1}] enabled or no provider provides this network service

# at: src/zstack/./network/src/main/java/org/zstack/network/service/NetworkServiceManagerImpl.java:503
# args: spec.getVmInventory().getUuid(),l3.getUuid(),errorCode
unable\ to\ release\ a\ network\ service\ of\ the\ VM[uuid\:%s]\ when\ rolling\ back\ an\ attached\ L3\ network[uuid\:\ %s],\ %s.\ You\ may\ need\ to\ reboot\ the\ VM\ to\ fix\ the\ issue = unable to release a network service of the VM[uuid:{0}] when rolling back an attached L3 network[uuid: {1}], {2}. You may need to reboot the VM to fix the issue

# at: src/zstack/./plugin/applianceVm/src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:131
# args: self.getUuid(),getSelf().getStatus(),msg.getPath()
appliance\ vm[uuid\:%s]\ is\ in\ status\ of\ %s\ that\ cannot\ make\ http\ call\ to\ %s = appliance vm[uuid:{0}] is in status of {1} that cannot make http call to {2}

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:77
# args: msg.getPoolName()
operation\ failure,\ because\ the\ poolName[poolName\:%s]\ can\ not\ include\ unprintable\ ascii\ characters. = operation failure, because the poolName[poolName:{0}] can not include unprintable ascii characters.

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:91
# args: msg.getPoolName(),duplicatePoolUuid
Ceph\ pool[uuid\:%s]\ with\ this\ name\ is\ already\ added\ into\ ZStack\ and\ used\ elsewhere,\ cannot\ reuse\ the\ ceph\ pool. = Ceph pool[uuid:{0}] with this name is already added into ZStack and used elsewhere, cannot reuse the ceph pool.

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:86
# args: msg.getPoolName(),duplicatePoolUuid
creation\ failure,\ duplicate\ poolName[%s].\ There\ has\ been\ a\ pool[uuid\:%s]\ with\ the\ same\ name\ existing. = creation failure, duplicate poolName[{0}]. There has been a pool[uuid:{1}] with the same name existing.

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:119
# args: existing
cannot\ add\ ceph\ primary\ storage,\ there\ has\ been\ some\ ceph\ primary\ storage\ using\ mon[hostnames\:%s] = cannot add ceph primary storage, there has been some ceph primary storage using mon[hostnames:{0}]

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:130
# args: uri.getHostname()
Cannot\ add\ same\ host[%s]\ in\ mons = Cannot add same host[{0}] in mons

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:156
# args: 
Adding\ the\ same\ Mon\ node\ is\ not\ allowed = Adding the same Mon node is not allowed

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:195
# args: monUrl,MON_URL_FORMAT
invalid\ monUrl[%s].\ A\ valid\ url\ is\ in\ format\ of\ %s = invalid monUrl[{0}]. A valid url is in format of {1}

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:202
# args: 
dataVolumePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = dataVolumePoolName can be null but cannot be an empty string

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:207
# args: 
rootVolumePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = rootVolumePoolName can be null but cannot be an empty string

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:212
# args: 
imageCachePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = imageCachePoolName can be null but cannot be an empty string

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:235
# args: existing
cannot\ add\ ceph\ backup\ storage,\ there\ has\ been\ some\ ceph\ backup\ storage\ using\ mon[hostnames\:%s] = cannot add ceph backup storage, there has been some ceph backup storage using mon[hostnames:{0}]

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:243
# args: 
poolName\ is\ required\ when\ importImages\ is\ true = poolName is required when importImages is true

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:241
# args: 
poolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = poolName can be null but cannot be an empty string

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/CephMonBase.java:54
# args: 
The\ problem\ may\ be\ caused\ by\ an\ incorrect\ user\ name\ or\ password\ or\ SSH\ port\ or\ unstable\ network\ environment = The problem may be caused by an incorrect user name or password or SSH port or unstable network environment

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:1107
# args: self.getUuid(),JSONObjectUtil.toJsonString(errorCodes)
unable\ to\ connect\ to\ the\ ceph\ backup\ storage[uuid\:%s].\ Failed\ to\ connect\ all\ ceph\ mons.\ Errors\ are\ %s = unable to connect to the ceph backup storage[uuid:{0}]. Failed to connect all ceph mons. Errors are {1}

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:1228
# args: otherCeph.getName(),otherCeph.getUuid(),fsId
there\ is\ another\ CEPH\ backup\ storage[name\:%s,\ uuid\:%s]\ with\ the\ same\ FSID[%s],\ you\ cannot\ add\ the\ same\ CEPH\ setup\ as\ two\ different\ backup\ storage = there is another CEPH backup storage[name:{0}, uuid:{1}] with the same FSID[{2}], you cannot add the same CEPH setup as two different backup storage

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:1641
# args: 
unable\ to\ add\ mon\ to\ ceph\ backup\ storage = unable to add mon to ceph backup storage

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java:86
# args: uuid
cannot\ update\ status\ of\ the\ ceph\ backup\ storage\ mon[uuid\:%s],\ it\ has\ been\ deleted.This\ error\ can\ be\ ignored = cannot update status of the ceph backup storage mon[uuid:{0}], it has been deleted.This error can be ignored

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3063
# args: 
unable\ to\ connect\ mons = unable to connect mons

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3126
# args: base.getSelf().getHostname(),fsid,getSelf().getFsid()
the\ mon[ip\:%s]\ returns\ a\ fsid[%s]\ different\ from\ the\ current\ fsid[%s]\ of\ the\ cep\ cluster,are\ you\ adding\ a\ mon\ not\ belonging\ to\ current\ cluster\ mistakenly? = the mon[ip:{0}] returns a fsid[{1}] different from the current fsid[{2}] of the cep cluster,are you adding a mon not belonging to current cluster mistakenly?

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:1344
# args: backupStorage.getUuid(),backupStorage.getName(),bsFsid,self.getUuid(),self.getName(),getSelf().getFsid()
the\ backup\ storage[uuid\:%s,\ name\:%s,\ fsid\:%s]\ is\ not\ in\ the\ same\ ceph\ cluster\ with\ the\ primary\ storage[uuid\:%s,\ name\:%s,\ fsid\:%s] = the backup storage[uuid:{0}, name:{1}, fsid:{2}] is not in the same ceph cluster with the primary storage[uuid:{3}, name:{4}, fsid:{5}]

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2027
# args: psUuid,bsUuid
fsid\ is\ not\ same\ between\ ps[%s]\ and\ bs[%s],\ create\ template\ is\ forbidden. = fsid is not same between ps[{0}] and bs[{1}], create template is forbidden.

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2429
# args: self.getUuid()
ceph\ primary\ storage[uuid\:%s]\ may\ have\ been\ deleted. = ceph primary storage[uuid:{0}] may have been deleted.

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2416
# args: self.getUuid(),JSONObjectUtil.toJsonString(errorCodes)
unable\ to\ connect\ to\ the\ ceph\ primary\ storage[uuid\:%s].\ Failed\ to\ connect\ all\ ceph\ mons.\ Errors\ are\ %s = unable to connect to the ceph primary storage[uuid:{0}]. Failed to connect all ceph mons. Errors are {1}

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2413
# args: self.getUuid()
unable\ to\ connect\ to\ the\ ceph\ primary\ storage[uuid\:%s].\ Failed\ to\ connect\ all\ ceph\ mons. = unable to connect to the ceph primary storage[uuid:{0}]. Failed to connect all ceph mons.

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2533
# args: 
the\ fsid\ returned\ by\ mons\ are\ mismatching,\ it\ seems\ the\ mons\ belong\ to\ different\ ceph\ clusters\:\n = the fsid returned by mons are mismatching, it seems the mons belong to different ceph clusters:\n

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2551
# args: otherCeph.getName(),otherCeph.getUuid(),fsId
there\ is\ another\ CEPH\ primary\ storage[name\:%s,\ uuid\:%s]\ with\ the\ same\ FSID[%s],\ you\ cannot\ add\ the\ same\ CEPH\ setup\ as\ two\ different\ primary\ storage = there is another CEPH primary storage[name:{0}, uuid:{1}] with the same FSID[{2}], you cannot add the same CEPH setup as two different primary storage

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2740
# args: mon.getSelf().getUuid(),self.getUuid(),self.getName(),errorCode
failed\ to\ reconnect\ the\ mon[uuid\:%s]\ server\ of\ the\ ceph\ primary\ storage[uuid\:%s,\ name\:%s],\ %s = failed to reconnect the mon[uuid:{0}] server of the ceph primary storage[uuid:{1}, name:{2}], {3}

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2795
# args: self.getUuid(),self.getName(),mon.getSelf().getUuid(),res.error
the\ ceph\ primary\ storage[uuid\:%s,\ name\:%s]\ is\ down,\ as\ one\ mon[uuid\:%s]\ reports\ an\ operation\ failure[%s] = the ceph primary storage[uuid:{0}, name:{1}] is down, as one mon[uuid:{2}] reports an operation failure[{3}]

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3107
# args: 
unable\ to\ add\ mon\ to\ ceph\ primary\ storage = unable to add mon to ceph primary storage

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3397
# args: bsType
unable\ to\ upload\ bits\ to\ the\ backup\ storage[type\:%s],\ we\ only\ support\ CEPH = unable to upload bits to the backup storage[type:{0}], we only support CEPH

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3469
# args: 
backing\ up\ snapshots\ to\ backup\ storage\ is\ a\ depreciated\ feature,\ which\ will\ be\ removed\ in\ future\ version = backing up snapshots to backup storage is a depreciated feature, which will be removed in future version

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:357
# args: vol.getPrimaryStorageUuid()
cannot\ find\ any\ Connected\ ceph\ mon\ for\ the\ primary\ storage[uuid\:%s] = cannot find any Connected ceph mon for the primary storage[uuid:{0}]

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:649
# args: 
not\ support\ take\ volumes\ snapshots\ on\ multiple\ ps\ when\ including\ ceph = not support take volumes snapshots on multiple ps when including ceph

# at: src/zstack/./plugin/ceph/src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java:91
# args: uuid
cannot\ update\ status\ of\ the\ ceph\ primary\ storage\ mon[uuid\:%s],\ it\ has\ been\ deleted.This\ error\ can\ be\ ignored = cannot update status of the ceph primary storage mon[uuid:{0}], it has been deleted.This error can be ignored

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:80
# args: 
either\ eipUuid\ or\ vipUuid\ must\ be\ set = either eipUuid or vipUuid must be set

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:86
# args: msg.getEipUuid()
eip[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ cannot\ get\ attachable\ vm\ nic = eip[uuid:{0}] is not in state of Enabled, cannot get attachable vm nic

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:101
# args: guestIpUuid,vmNicUuid
ip\ [uuid\:%s]\ is\ attached\ to\ vm\ nic\ [%s] = ip [uuid:{0}] is attached to vm nic [{1}]

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:112
# args: msg.getEipUuid(),vmNicUuid
eip[uuid\:%s]\ has\ attached\ to\ another\ vm\ nic[uuid\:%s],\ can't\ attach\ again = eip[uuid:{0}] has attached to another vm nic[uuid:{1}], can't attach again

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:118
# args: msg.getEipUuid(),EipState.Enabled,state
eip[uuid\:\ %s]\ can\ only\ be\ attached\ when\ state\ is\ %s,\ current\ state\ is\ %s = eip[uuid: {0}] can only be attached when state is {1}, current state is {2}

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:148
# args: msg.getVmNicUuid(),msg.getEipUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ EIP[uuid\:%s]\ are\ the\ same\ network = guest l3Network of vm nic[uuid:{0}] and vip l3Network of EIP[uuid:{1}] are the same network

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:165
# args: msg.getEipUuid(),msg.getVmNicUuid()
Ip\ address\ [uuid\:%s]\ is\ not\ belonged\ to\ nic\ [uuid\:%s] = Ip address [uuid:{0}] is not belonged to nic [uuid:{1}]

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:178
# args: msg.getUuid()
eip[uuid\:%s]\ has\ not\ attached\ to\ any\ vm\ nic = eip[uuid:{0}] has not attached to any vm nic

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:201
# args: vipIp.getIpVersion(),guestIp.getIpVersion()
vip\ ipVersion\ [%d]\ is\ different\ from\ guestIp\ ipVersion\ [%d]. = vip ipVersion [{0}] is different from guestIp ipVersion [{1}].

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:208
# args: vipIp.getIp(),guestRange.getStartIp(),guestRange.getEndIp()
Vip[%s]\ is\ in\ the\ guest\ ip\ range\ [%s,\ %s] = Vip[{0}] is in the guest ip range [{1}, {2}]

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:228
# args: vmUuid,vip.getL3NetworkUuid(),vip.getUuid(),vip.getName(),vip.getIp()
the\ vm[uuid\:%s]\ that\ the\ EIP\ is\ about\ to\ attach\ is\ already\ on\ the\ public\ network[uuid\:%s]\ from\ which\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:%s]\ comes = the vm[uuid:{0}] that the EIP is about to attach is already on the public network[uuid:{1}] from which the vip[uuid:{2}, name:{3}, ip:{4}] comes

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:238
# args: msg.getVipUuid(),vip.getUseFor()
vip[uuid\:%s]\ has\ been\ occupied\ other\ network\ service\ entity[%s] = vip[uuid:{0}] has been occupied other network service entity[{1}]

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:243
# args: msg.getVipUuid(),VipState.Enabled,vip.getState()
vip[uuid\:%s]\ is\ not\ in\ state[%s],\ current\ state\ is\ %s = vip[uuid:{0}] is not in state[{1}], current state is {2}

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:278
# args: state.toString()
vm\ state[%s]\ is\ not\ allowed\ to\ operate\ eip,\ maybe\ you\ should\ wait\ the\ vm\ process\ complete = vm state[{0}] is not allowed to operate eip, maybe you should wait the vm process complete

# at: src/zstack/./plugin/eip/src/main/java/org/zstack/network/service/eip/EipManagerImpl.java:1242
# args: l3.getUuid(),l3.getName(),vm.getUuid(),vm.getName()
unable\ to\ attach\ the\ L3\ network[uuid\:%s,\ name\:%s]\ to\ the\ vm[uuid\:%s,\ name\:%s],\ because\ the\ L3\ network\ is\ providing\ EIP\ to\ one\ of\ the\ vm's\ nic = unable to attach the L3 network[uuid:{0}, name:{1}] to the vm[uuid:{2}, name:{3}], because the L3 network is providing EIP to one of the vm's nic

# at: src/zstack/./plugin/flatNetworkProvider/src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:259
# args: 
l3\ network\ uuid\ cannot\ be\ null = l3 network uuid cannot be null

# at: src/zstack/./plugin/flatNetworkProvider/src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:289
# args: msg.getL3NetworkUuid()
Cannot\ find\ DhcpIp\ for\ l3\ network[uuid\:%s] = Cannot find DhcpIp for l3 network[uuid:{0}]

# at: src/zstack/./plugin/flatNetworkProvider/src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:621
# args: inv.getUuid(),destHostUuid
cannot\ configure\ DHCP\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = cannot configure DHCP for vm[uuid:{0}] on the destination host[uuid:{1}]

# at: src/zstack/./plugin/flatNetworkProvider/src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:804
# args: vm.getUuid(),applyHostUuidForRollback,errorCode
failed\ to\ re-apply\ DHCP\ configuration\ of\ the\ vm[uuid\:%s]\ to\ the\ host[uuid\:%s],\ %s.\ You\ may\ need\ to\ reboot\ the\ VM\ to\ make\ the\ DHCP\ works = failed to re-apply DHCP configuration of the vm[uuid:{0}] to the host[uuid:{1}], {2}. You may need to reboot the VM to make the DHCP works

# at: src/zstack/./plugin/flatNetworkProvider/src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java:99
# args: vmNicUuid
L2Network\ where\ vip's\ L3Network\ based\ hasn't\ attached\ the\ cluster\ where\ vmNic[uuid\:%s]\ located = L2Network where vip's L3Network based hasn't attached the cluster where vmNic[uuid:{0}] located

# at: src/zstack/./plugin/flatNetworkProvider/src/main/java/org/zstack/network/service/flat/FlatEipBackend.java:147
# args: eips.stream().map( e -> e.vip).collect(Collectors.toList()),inv.getUuid(),inv.getName(),inv.getHostUuid(),errorCode
after\ migration,\ failed\ to\ apply\ EIPs[uuids\:%s]\ to\ the\ vm[uuid\:%s,\ name\:%s]\ on\ the\ destination\ host[uuid\:%s],\ %s = after migration, failed to apply EIPs[uuids:{0}] to the vm[uuid:{1}, name:{2}] on the destination host[uuid:{3}], {4}

# at: src/zstack/./plugin/flatNetworkProvider/src/main/java/org/zstack/network/service/flat/FlatEipBackend.java:299
# args: eips.stream().map( e -> e.vip).collect(Collectors.toList()),vm.getUuid(),vm.getName(),applyHostUuidForRollback,errorCode
after\ migration,\ failed\ to\ apply\ EIPs[uuids\:%s]\ to\ the\ vm[uuid\:%s,\ name\:%s]\ on\ the\ destination\ host[uuid\:%s],\ %s.You\ may\ need\ to\ reboot\ the\ VM\ to\ resolve\ the\ issue = after migration, failed to apply EIPs[uuids:{0}] to the vm[uuid:{1}, name:{2}] on the destination host[uuid:{3}], {4}.You may need to reboot the VM to resolve the issue

# at: src/zstack/./plugin/flatNetworkProvider/src/main/java/org/zstack/network/service/flat/FlatEipBackend.java:577
# args: vmUuid,vm.getState()
unable\ to\ apply\ the\ EIP\ operation\ for\ the\ the\ vm[uuid\:%s,\ state\:%s],\ because\ cannot\ find\ the\ VM's\ hostUUid = unable to apply the EIP operation for the the vm[uuid:{0}, state:{1}], because cannot find the VM's hostUUid

# at: src/zstack/./plugin/flatNetworkProvider/src/main/java/org/zstack/network/service/flat/FlatUserdataBackend.java:361
# args: struct.getHostUuid()
host[uuid\:%s]\ is\ not\ connected = host[uuid:{0}] is not connected

# at: src/zstack/./plugin/fusionstor/src/main/java/org/zstack/storage/fusionstor/primary/FusionstorPrimaryStorageBase.java:1718
# args: self.getUuid()
fusionstor\ primary\ storage[uuid\:%s]\ may\ have\ been\ deleted. = fusionstor primary storage[uuid:{0}] may have been deleted.

# at: src/zstack/./plugin/fusionstor/src/main/java/org/zstack/storage/fusionstor/primary/FusionstorPrimaryStorageFactory.java:182
# args: cap.getUuid()
the\ total\ capacity\ of\ the\ fusionstor\ primary\ is\ wrong,\ uuid[%s] = the total capacity of the fusionstor primary is wrong, uuid[{0}]

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMApiInterceptor.java:47
# args: msg.getManagementIp()
there\ has\ been\ a\ kvm\ host\ having\ management\ ip[%s] = there has been a kvm host having management ip[{0}]

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMApiInterceptor.java:54
# args: msg.getVmInstanceUuid(),vo.getPlatform()
unable\ to\ detach\ a\ L3\ network\ on\ kvm\ host\ because\ platform\ of\ vm[uuid\:\ %s]\ is\ %s = unable to detach a L3 network on kvm host because platform of vm[uuid: {0}] is {1}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMConnectExtensionForL2Network.java:129
# args: l2.getType()
KVMConnectExtensionForL2Network\ wont's\ support\ L2Network[type\:%s] = KVMConnectExtensionForL2Network wont's support L2Network[type:{0}]

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMConsoleHypervisorBackend.java:78
# args: rsp.getPort(),vm.getUuid()
unexpected\ VNC\ port\ number[%d]\ for\ VM\ [uuid\:%s] = unexpected VNC port number[{0}] for VM [uuid:{1}]

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:558
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),result.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:%d\ ]\ to\ do\ DNS\ check,\ please\ check\ if\ username/password\ is\ wrong;\ %s = unable to connect to KVM[ip:{0}, username:{1}, sshPort:{2} ] to do DNS check, please check if username/password is wrong; {3}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:600
# args: self.getUuid(),self.getStatus()
the\ host[uuid\:%s,\ status\:%s]\ is\ not\ Connected = the host[uuid:{0}, status:{1}] is not Connected

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:977
# args: volume.getUuid(),state
cannot\ do\ volume\ snapshot\ merge\ when\ vm[uuid\:%s]\ is\ in\ state\ of\ %s.\ The\ operation\ is\ only\ allowed\ when\ vm\ is\ Running\ or\ Stopped = cannot do volume snapshot merge when vm[uuid:{0}] is in state of {1}. The operation is only allowed when vm is Running or Stopped

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:984
# args: KVMConstant.MIN_LIBVIRT_LIVE_BLOCK_COMMIT_VERSION,libvirtVersion
live\ volume\ snapshot\ merge\ needs\ libvirt\ version\ greater\ than\ %s,\ current\ libvirt\ version\ is\ %s.\ Please\ stop\ vm\ and\ redo\ the\ operation\ or\ detach\ the\ volume\ if\ it's\ data\ volume = live volume snapshot merge needs libvirt version greater than {0}, current libvirt version is {1}. Please stop vm and redo the operation or detach the volume if it's data volume

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:1064
# args: msg.getVmUuid(),vmState
vm[uuid\:%s]\ is\ not\ Running\ or\ Stopped,\ current\ state[%s] = vm[uuid:{0}] is not Running or Stopped, current state[{1}]

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:1452
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
failed\ to\ update\ nic[vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s = failed to update nic[vm:{0}] on kvm host[uuid:{1}, ip:{2}],because {3}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:1517
# args: msg.getNicInventory().getUuid(),msg.getNicInventory().getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
failed\ to\ attach\ nic[uuid\:%s,\ vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s = failed to attach nic[uuid:{0}, vm:{1}] on kvm host[uuid:{2}, ip:{3}],because {4}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:1595
# args: vol.getUuid(),vol.getInstallPath(),vm.getUuid(),vm.getName(),getSelf().getUuid(),getSelf().getManagementIp(),ret.getError()
failed\ to\ detach\ data\ volume[uuid\:%s,\ installPath\:%s]\ from\ vm[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = failed to detach data volume[uuid:{0}, installPath:{1}] from vm[uuid:{2}, name:{3}] on kvm host[uuid:{4}, ip:{5}], because {6}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:1710
# args: vol.getUuid(),vol.getInstallPath(),vm.getUuid(),vm.getName(),getSelf().getUuid(),getSelf().getManagementIp(),ret.getError()
failed\ to\ attach\ data\ volume[uuid\:%s,\ installPath\:%s]\ to\ vm[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = failed to attach data volume[uuid:{0}, installPath:{1}] to vm[uuid:{2}, name:{3}] on kvm host[uuid:{4}, ip:{5}], because {6}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:1768
# args: vminv.getUuid(),vminv.getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ destroy\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = failed to destroy vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:1934
# args: vminv.getUuid(),vminv.getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ stop\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = failed to stop vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2427
# args: rsp.getError(),msg.getPhysicalInterface(),context.getInventory().getUuid(),context.getInventory().getManagementIp()
%s,\ failed\ to\ check\ physical\ network\ interfaces[names\ \:\ %s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s] = {0}, failed to check physical network interfaces[names : {1}] on kvm host[uuid:{2}, ip:{3}]

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2490
# args: self.getUuid(),ret.getHostUuid()
detected\ abnormal\ status[host\ uuid\ change,\ expected\:\ %s\ but\:\ %s]\ of\ kvmagent,it's\ mainly\ caused\ by\ kvmagent\ restarts\ behind\ zstack\ management\ server.\ Report\ this\ to\ ping\ task,\ it\ will\ issue\ a\ reconnect\ soon = detected abnormal status[host uuid change, expected: {0} but: {1}] of kvmagent,it's mainly caused by kvmagent restarts behind zstack management server. Report this to ping task, it will issue a reconnect soon

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2611
# args: self.getUuid(),self.getManagementIp(),connectPath,rsp.getError()
unable\ to\ connect\ to\ kvm\ host[uuid\:%s,\ ip\:%s,\ url\:%s],\ because\ %s = unable to connect to kvm host[uuid:{0}, ip:{1}, url:{2}], because {3}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2666
# args: 
host\ can\ not\ access\ any\ primary\ storage,\ please\ check\ network = host can not access any primary storage, please check network

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2806
# args: getSelf().getPort(),KVMGlobalConfig.TEST_SSH_PORT_ON_OPEN_TIMEOUT.value(Long.class)
the\ host'\ ssh\ port[%s]\ not\ open\ after\ %s\ seconds,\ connect\ timeout = the host' ssh port[{0}] not open after {1} seconds, connect timeout

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2861
# args: checkList
failed\ to\ ping\ all\ DNS/IP\ in\ %s;\ please\ check\ /etc/resolv.conf\ to\ make\ sure\ your\ host\ is\ able\ to\ reach\ public\ internet = failed to ping all DNS/IP in {0}; please check /etc/resolv.conf to make sure your host is able to reach public internet

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2859
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),ret.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:\ %d,\ ]\ to\ do\ DNS\ check,\ please\ check\ if\ username/password\ is\ wrong;\ %s = unable to connect to KVM[ip:{0}, username:{1}, sshPort: {2}, ] to do DNS check, please check if username/password is wrong; {3}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2887
# args: self.getManagementIp(),restf.getHostName(),ret.getStderr(),ret.getExitErrorMessage()
the\ KVM\ host[ip\:%s]\ cannot\ access\ the\ management\ node's\ callback\ url.\ It\ seems\ that\ the\ KVM\ host\ cannot\ reach\ the\ management\ IP[%s].\ %s\ %s = the KVM host[ip:{0}] cannot access the management node's callback url. It seems that the KVM host cannot reach the management IP[{1}]. {2} {3}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2884
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),ret.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:%d]\ to\ check\ the\ management\ node\ connectivity,please\ check\ if\ username/password\ is\ wrong;\ %s = unable to connect to KVM[ip:{0}, username:{1}, sshPort:{2}] to check the management node connectivity,please check if username/password is wrong; {3}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:3027
# args: 
cannot\ find\ either\ 'vmx'\ or\ 'svm'\ in\ /proc/cpuinfo,\ please\ make\ sure\ you\ have\ enabled\ virtualization\ in\ your\ BIOS\ setting = cannot find either 'vmx' or 'svm' in /proc/cpuinfo, please make sure you have enabled virtualization in your BIOS setting

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2742
# args: self.getUuid(),self.getClusterUuid()
host\ [uuid\:%s]\ cannot\ be\ added\ to\ cluster\ [uuid\:%s]\ because\ qemu/libvirt\ version\ does\ not\ match = host [uuid:{0}] cannot be added to cluster [uuid:{1}] because qemu/libvirt version does not match

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:2763
# args: self.getUuid(),self.getClusterUuid()
host\ [uuid\:%s]\ cannot\ be\ added\ to\ cluster\ [uuid\:%s]\ because\ cpu\ model\ name\ does\ not\ match = host [uuid:{0}] cannot be added to cluster [uuid:{1}] because cpu model name does not match

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:3183
# args: 
host\ is\ not\ in\ the\ connected\ status,\ cannot\ update\ os = host is not in the connected status, cannot update os

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHost.java:3181
# args: 
host\ is\ in\ the\ premaintenance\ state,\ cannot\ update\ os = host is in the premaintenance state, cannot update os

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHostCapacityExtension.java:54
# args: host.getUuid(),rsp.getTotalMemory(),SizeUtils.sizeStringToBytes(KVMGlobalConfig.RESERVED_MEMORY_CAPACITY.value())
The\ host[uuid\:%s]'s\ available\ memory\ capacity[%s]\ is\ lower\ than\ the\ reserved\ capacity[%s] = The host[uuid:{0}]'s available memory capacity[{1}] is lower than the reserved capacity[{2}]

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHostFactory.java:87
# args: msg.getClusterUuid(),KVMConstant.KVM_HYPERVISOR_TYPE
cluster[uuid\:%s]\ hypervisorType\ is\ not\ %s = cluster[uuid:{0}] hypervisorType is not {1}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHostFactory.java:106
# args: e.getMessage()
fail\ to\ load\ host\ info\ from\ file.\ because\n%s = fail to load host info from file. because\n{0}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHostFactory.java:262
# args: cmd.hostUuid,cmd.reason
the\ kvm\ host[uuid\:%s]\ asks\ the\ management\ server\ to\ reconnect\ it\ for\ %s = the kvm host[uuid:{0}] asks the management server to reconnect it for {1}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHostFactory.java:280
# args: str
there\ are\ still\ hosts\ not\ have\ the\ same\ cpu\ model,\ details\:\ %s = there are still hosts not have the same cpu model, details: {0}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMHostFactory.java:301
# args: hostUuid
host[uuid\:%s]\ does\ not\ have\ cpu\ model\ information,\ you\ can\ reconnect\ the\ host\ to\ fix\ it = host[uuid:{0}] does not have cpu model information, you can reconnect the host to fix it

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:70
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}] on kvm host[uuid:{3}], because {4}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:121
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ l2NoVlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:\ %s],\ %s = failed to check bridge[{0}] for l2NoVlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid: {3}], {4}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:73
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vlan.getVlan(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}, vlan:{3}] on kvm host[uuid:{4}], because {5}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:125
# args: cmd.getBridgeName(),l2vlan.getUuid(),l2vlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ l2VlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = failed to check bridge[{0}] for l2VlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java:112
# args: hto.getHostUuid(),rsp.getError()
failed\ to\ apply\ rules\ of\ security\ group\ rules\ to\ kvm\ host[uuid\:%s],\ because\ %s = failed to apply rules of security group rules to kvm host[uuid:{0}], because {1}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java:155
# args: hostUuid,rsp.getError()
failed\ to\ check\ default\ rules\ of\ security\ group\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to check default rules of security group on kvm host[uuid:{0}], because {1}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:92
# args: host.getUuid(),host.getManagementIp(),ret.getError()
unable\ to\ do\ vm\ sync\ on\ host[uuid\:%s,\ ip\:%s]\ because\ %s = unable to do vm sync on host[uuid:{0}, ip:{1}] because {2}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:128
# args: cmd.vmUuid,state,cmd.hostUuid
an\ anonymous\ VM[uuid\:%s,\ state\:%s]\ is\ detected\ on\ the\ host[uuid\:%s] = an anonymous VM[uuid:{0}, state:{1}] is detected on the host[uuid:{2}]

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:144
# args: cmd.vmState,cmd.vmUuid,cmd.hostUuid,reply.getError()
failed\ to\ report\ state[%s]\ of\ the\ vm[uuid\:%s]\ on\ the\ host[uuid\:%s],\ %s = failed to report state[{0}] of the vm[uuid:{1}] on the host[uuid:{2}], {3}

# at: src/zstack/./plugin/kvm/src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:216
# args: host.getUuid(),host.getName(),errorCode
failed\ to\ sync\ VM\ states\ on\ the\ host[uuid\:%s,\ name\:%s],\ %s = failed to sync VM states on the host[uuid:{0}, name:{1}], {2}

# at: src/zstack/./plugin/ldap/src/main/java/org/zstack/ldap/LdapApiInterceptor.java:108
# args: type,LdapConstant.OpenLdap.TYPE,LdapConstant.WindowsAD.TYPE
Wrong\ LdapServerType[%s],\ valid\ values\:\ [%,%s] = Wrong LdapServerType[{0}], valid values: [%,{1}]

# at: src/zstack/./plugin/ldap/src/main/java/org/zstack/ldap/LdapApiInterceptor.java:115
# args: 
There\ is\ no\ ldap\ server\ in\ the\ system,\ Please\ add\ a\ ldap\ server\ first. = There is no ldap server in the system, Please add a ldap server first.

# at: src/zstack/./plugin/ldap/src/main/java/org/zstack/ldap/LdapApiInterceptor.java:130
# args: e.toString()
Cannot\ connect\ to\ LDAP\ server,\ %s = Cannot connect to LDAP server, {0}

# at: src/zstack/./plugin/ldap/src/main/java/org/zstack/ldap/LdapManagerImpl.java:634
# args: filter,e.toString()
query\ ldap\ entry[filter\:\ %s]\ fail,\ %s = query ldap entry[filter: {0}] fail, {1}

# at: src/zstack/./plugin/ldap/src/main/java/org/zstack/ldap/LdapManagerImpl.java:610
# args: e.toString()
query\ ldap\ entry\ fail,\ %s = query ldap entry fail, {0}

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:133
# args: l3Uuids,LoadBalancerConstants.LB_NETWORK_SERVICE_TYPE_STRING
L3\ networks[uuids\:%s]\ of\ the\ vm\ nics\ has\ no\ network\ service[%s]\ enabled = L3 networks[uuids:{0}] of the vm nics has no network service[{1}] enabled

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:143
# args: existingNics,msg.getListenerUuid()
the\ vm\ nics[uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ listener[uuid\:%s] = the vm nics[uuid:{0}] are already on the load balancer listener[uuid:{1}]

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:256
# args: msg.getLoadBalancerPort(),luuid
conflict\ loadBalancerPort[%s],\ a\ listener[uuid\:%s]\ has\ used\ that\ port = conflict loadBalancerPort[{0}], a listener[uuid:{1}] has used that port

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:261
# args: 
udp\ port\ 53\ is\ used\ by\ dns\ daemon = udp port 53 is used by dns daemon

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:274
# args: 
tcp\ port\ 22,\ 7272\ is\ used\ by\ vrouter = tcp port 22, 7272 is used by vrouter

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:301
# args: vo.getProtocol()
loadbalancer\ listener\ with\ type\ %s\ does\ not\ need\ certificate = loadbalancer listener with type {0} does not need certificate

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:305
# args: msg.getCertificateUuid(),msg.getListenerUuid()
loadbalancer\ listener\ [uuid\:%s]\ already\ had\ certificate = loadbalancer listener [uuid:{0}] already had certificate

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:315
# args: msg.getCertificateUuid(),msg.getListenerUuid()
certificate\ [uuid\:%s]\ is\ not\ added\ to\ loadbalancer\ listener\ [uuid\:%s] = certificate [uuid:{0}] is not added to loadbalancer listener [uuid:{1}]

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1032
# args: msg.getVmNicUuids().get(0)
the\ L3\ network\ of\ vm\ nic[uuid\:%s]\ doesn't\ have\ load\ balancer\ service\ enabled = the L3 network of vm nic[uuid:{0}] doesn't have load balancer service enabled

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1059
# args: self.getUuid(),self.getProviderType(),msg.getVmNicUuids().get(0),providerType
service\ provider\ type\ mismatching.\ The\ load\ balancer[uuid\:%s]\ is\ provided\ by\ the\ service\ provider[type\:%s],\ but\ the\ L3\ network\ of\ vm\ nic[uuid\:%s]\ is\ enabled\ with\ the\ service\ provider[type\:\ %s] = service provider type mismatching. The load balancer[uuid:{0}] is provided by the service provider[type:{1}], but the L3 network of vm nic[uuid:{2}] is enabled with the service provider[type: {3}]

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:97
# args: msg.getLoadBalancerUuid()
cannot\ find\ the\ load\ balancer[uuid\:%s] = cannot find the load balancer[uuid:{0}]

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:377
# args: tag.getTag()
cannot\ delete\ the\ system\ tag[%s].\ The\ load\ balancer\ plugin\ relies\ on\ it,\ you\ can\ only\ update\ it = cannot delete the system tag[{0}]. The load balancer plugin relies on it, you can only update it

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:396
# args: algorithm,LoadBalancerConstants.BALANCE_ALGORITHMS
invalid\ balance\ algorithm[%s],\ valid\ algorithms\ are\ %s = invalid balance algorithm[{0}], valid algorithms are {1}

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:410
# args: systemTag,s
invalid\ unhealthy\ threshold[%s],\ %s\ is\ not\ a\ number = invalid unhealthy threshold[{0}], {1} is not a number

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:424
# args: systemTag,s
invalid\ healthy\ threshold[%s],\ %s\ is\ not\ a\ number = invalid healthy threshold[{0}], {1} is not a number

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:438
# args: systemTag,s
invalid\ healthy\ timeout[%s],\ %s\ is\ not\ a\ number = invalid healthy timeout[{0}], {1} is not a number

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:452
# args: systemTag,s
invalid\ connection\ idle\ timeout[%s],\ %s\ is\ not\ a\ number = invalid connection idle timeout[{0}], {1} is not a number

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:466
# args: systemTag,s
invalid\ health\ check\ interval[%s],\ %s\ is\ not\ a\ number = invalid health check interval[{0}], {1} is not a number

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:480
# args: systemTag,s
invalid\ max\ connection[%s],\ %s\ is\ not\ a\ number = invalid max connection[{0}], {1} is not a number

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:493
# args: systemTag
invalid\ health\ target[%s],\ the\ format\ is\ targetCheckProtocol\:port,\ for\ example,\ tcp\:default = invalid health target[{0}], the format is targetCheckProtocol:port, for example, tcp:default

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:498
# args: systemTag,protocol,LoadBalancerConstants.HEALTH_CHECK_TARGET_PROTOCOLS
invalid\ health\ target[%s],\ the\ target\ checking\ protocol[%s]\ is\ invalid,\ valid\ protocols\ are\ %s = invalid health target[{0}], the target checking protocol[{1}] is invalid, valid protocols are {2}

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:510
# args: systemTag,port
invalid\ invalid\ health\ target[%s],\ port[%s]\ is\ not\ a\ number = invalid invalid health target[{0}], port[{1}] is not a number

# at: src/zstack/./plugin/loadBalancer/src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:507
# args: systemTag,port
invalid\ invalid\ health\ target[%s],\ port[%s]\ is\ not\ in\ the\ range\ of\ [1,\ 65535] = invalid invalid health target[{0}], port[{1}] is not in the range of [1, 65535]

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:90
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ on\ any\ local\ primary\ storage = the volume[uuid:{0}] is not on any local primary storage

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:95
# args: msg.getVolumeUuid(),msg.getDestHostUuid()
the\ volume[uuid\:%s]\ is\ already\ on\ the\ host[uuid\:%s] = the volume[uuid:{0}] is already on the host[uuid:{1}]

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:101
# args: msg.getPrimaryStorageUuid()
the\ primary\ storage[uuid\:%s]\ is\ not\ found = the primary storage[uuid:{0}] is not found

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:105
# args: ref.getPrimaryStorageUuid()
the\ primary\ storage[uuid\:%s]\ is\ disabled\ or\ maintenance\ cold\ migrate\ is\ not\ allowed = the primary storage[uuid:{0}] is disabled or maintenance cold migrate is not allowed

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:114
# args: msg.getDestHostUuid(),ref.getPrimaryStorageUuid(),msg.getVolumeUuid()
the\ dest\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ local\ primary\ storage[uuid\:%s]\ where\ the\ volume[uuid\:%s]\ locates = the dest host[uuid:{0}] doesn't belong to the local primary storage[uuid:{1}] where the volume[uuid:{2}] locates

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:120
# args: msg.getDestHostUuid(),msg.getPrimaryStorageUuid(),physicalThreshold,refVO.getAvailablePhysicalCapacity()
the\ dest\ host[uuid\:%s]\ doesn't\ have\ enough\ physical\ capacity\ due\ to\ the\ threshold\ of\ primary\ storage[uuid\:%s]\ is\ %f\ but\ available\ physical\ capacity\ is\ %d = the dest host[uuid:{0}] doesn't have enough physical capacity due to the threshold of primary storage[uuid:{1}] is {2} but available physical capacity is {3}

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:127
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ in\ status\ of\ Ready,\ cannot\ migrate\ it = the volume[uuid:{0}] is not in status of Ready, cannot migrate it

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:139
# args: vol.getUuid(),vol.getVmInstanceUuid(),vmstate
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ is\ in\ state\ of\ %s,\ please\ stop\ it\ before\ migration = the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm is in state of {2}, please stop it before migration

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:147
# args: vol.getUuid(),vol.getVmInstanceUuid(),count
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ still\ has\ %s\ data\ volumes\ attached,\ please\ detach\ them\ before\ migration = the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm still has {2} data volumes attached, please detach them before migration

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:152
# args: vol.getUuid(),vol.getVmInstanceUuid()
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ still\ has\ ISO\ attached,\ please\ detach\ it\ before\ migration = the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm still has ISO attached, please detach it before migration

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:177
# args: originClusterUuid,clusterUuid,vol.getVmInstanceUuid()
The\ two\ clusters[uuid\:%s,uuid\:%s]\ cannot\ access\ each\ other\ in\ l2\ network\ \ when\ migrate\ the\ vm[uuid\:%s]\ to\ another\ cluster = The two clusters[uuid:{0},uuid:{1}] cannot access each other in l2 network  when migrate the vm[uuid:{2}] to another cluster

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:132
# args: vol.getUuid(),vol.getName(),vol.getVmInstanceUuid()
the\ data\ volume[uuid\:%s,\ name\:\ %s]\ is\ still\ attached\ to\ the\ VM[uuid\:%s].\ Please\ detach\ it\ before\ migration = the data volume[uuid:{0}, name: {1}] is still attached to the VM[uuid:{2}]. Please detach it before migration

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:191
# args: msg.getUrl()
the\ url[%s]\ is\ not\ an\ absolute\ path\ starting\ with\ '/' = the url[{0}] is not an absolute path starting with '/'

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:262
# args: msg.getPrimaryStorageUuid()
The\ primary\ storage[uuid\:%s]\ is\ disabled\ cold\ migrate\ is\ not\ allowed = The primary storage[uuid:{0}] is disabled cold migrate is not allowed

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:560
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ not\ on\ the\ local\ storage\ anymore,it\ may\ have\ been\ deleted = volume[uuid:{0}] is not on the local storage anymore,it may have been deleted

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:1361
# args: resUuid,uuid
Resource[uuid\:%s]\ can\ only\ be\ operated\ on\ host[uuid\:%s],\ but\ the\ host\ has\ been\ deleted = Resource[uuid:{0}] can only be operated on host[uuid:{1}], but the host has been deleted

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:1357
# args: resUuid
cannot\ find\ any\ host\ which\ has\ resource[uuid\:%s] = cannot find any host which has resource[uuid:{0}]

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:1354
# args: resUuid,vo.getResourceName(),vo.getResourceType()
cannot\ find\ any\ host\ which\ has\ resource[uuid\:%s],\ name\ \:[%s],\ type\ \:[%s] = cannot find any host which has resource[uuid:{0}], name :[{1}], type :[{2}]

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:2008
# args: msg.getVolumeUuid(),self.getUuid()
unable\ to\ create\ the\ data\ volume[uuid\:\ %s]\ on\ a\ local\ primary\ storage[uuid\:%s],\ because\ the\ hostUuid\ is\ not\ specified. = unable to create the data volume[uuid: {0}] on a local primary storage[uuid:{1}], because the hostUuid is not specified.

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:103
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,clusterUuid
There\ is\ no\ LocalStorage\ primary\ storage[state\=%s,status\=%s]\ on\ the\ cluster[%s],\ when\ the\ cluster\ mounts\ multiple\ primary\ storage,\ the\ system\ uses\ the\ local\ primary\ storage\ by\ default.\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = There is no LocalStorage primary storage[state={0},status={1}] on the cluster[{2}], when the cluster mounts multiple primary storage, the system uses the local primary storage by default. Check the state/status of primary storage and make sure they have been attached to clusters

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:122
# args: psUuid
the\ type\ of\ primary\ storage[uuid\:%s]\ chosen\ is\ not\ local\ storage,\ check\ if\ the\ resource\ can\ be\ created\ on\ other\ storage\ when\ cluster\ has\ attached\ local\ primary\ storage = the type of primary storage[uuid:{0}] chosen is not local storage, check if the resource can be created on other storage when cluster has attached local primary storage

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:185
# args: requiredPrimaryStorageUuidForDataVolume.getUuid(),requiredPrimaryStorageUuidForDataVolume.getType(),LocalStorageConstants.LOCAL_STORAGE_TYPE
The\ cluster\ mounts\ multiple\ primary\ storage[%s(%s),\ other\ non-LocalStorage\ primary\ storage],\ primaryStorageUuidForDataVolume\ cannot\ be\ specified\ %s = The cluster mounts multiple primary storage[{0}({1}), other non-LocalStorage primary storage], primaryStorageUuidForDataVolume cannot be specified {2}

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java:119
# args: spec.getDestHost().getClusterUuid()
The\ cluster[uuid\=%s]\ mounts\ multiple\ primary\ storage[LocalStorage,\ other\ non-LocalStorage\ primary\ storage],\ You\ must\ specify\ the\ primary\ storage\ where\ the\ root\ disk\ is\ located = The cluster[uuid={0}] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the root disk is located

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java:125
# args: spec.getDestHost().getClusterUuid()
The\ cluster[uuid\=%s]\ mounts\ multiple\ primary\ storage[LocalStorage,\ other\ non-LocalStorage\ primary\ storage],\ You\ must\ specify\ the\ primary\ storage\ where\ the\ data\ disk\ is\ located = The cluster[uuid={0}] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the data disk is located

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:268
# args: hvType,bsType
no\ LocalStorageBackupStorageMediator\ supporting\ hypervisor[%s]\ and\ backup\ storage\ type[%s]\  = no LocalStorageBackupStorageMediator supporting hypervisor[{0}] and backup storage type[{1}] 

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:353
# args: spec.getVmInventory().getHypervisorType()
local\ storage\ doesn't\ support\ live\ migration\ for\ hypervisor[%s] = local storage doesn't support live migration for hypervisor[{0}]

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:569
# args: volume.getUuid(),vm.getUuid(),vm.getRootVolumeUuid(),rootHost,volume.getUuid(),dataHost
cannot\ attach\ the\ data\ volume[uuid\:%s]\ to\ the\ vm[uuid\:%s].\ Both\ vm's\ root\ volume\ and\ the\ data\ volume\ are\ on\ local\ primary\ storage,\ but\ they\ are\ on\ different\ hosts.\ The\ root\ volume[uuid\:%s]\ is\ on\ the\ host[uuid\:%s]\ but\ the\ data\ volume[uuid\:\ %s]\ is\ on\ the\ host[uuid\:\ %s] = cannot attach the data volume[uuid:{0}] to the vm[uuid:{1}]. Both vm's root volume and the data volume are on local primary storage, but they are on different hosts. The root volume[uuid:{2}] is on the host[uuid:{3}] but the data volume[uuid: {4}] is on the host[uuid: {5}]

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:797
# args: vol.getName(),vol.getUuid(),vol.getPrimaryStorageUuid()
the\ data\ volume[name\:%s,\ uuid\:%s]\ is\ on\ the\ local\ storage[uuid\:%s];\ however,the\ host\ on\ which\ the\ data\ volume\ is\ has\ been\ deleted.\ Unable\ to\ recover\ this\ volume = the data volume[name:{0}, uuid:{1}] is on the local storage[uuid:{2}]; however,the host on which the data volume is has been deleted. Unable to recover this volume

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:839
# args: vm.getUuid(),vm.getName(),psuuid
unable\ to\ recover\ the\ vm[uuid\:%s,\ name\:%s].\ The\ vm's\ root\ volume\ is\ on\ the\ local\ storage[uuid\:%s];\ however,\ the\ host\ on\ which\ the\ root\ volume\ is\ has\ been\ deleted = unable to recover the vm[uuid:{0}, name:{1}]. The vm's root volume is on the local storage[uuid:{2}]; however, the host on which the root volume is has been deleted

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:876
# args: vm.getUuid()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ data\ volumes\ on\ local\ storage.\ Need\ detach\ all\ data\ volumes\ first. = unable to live migrate vm[uuid:{0}] with data volumes on local storage. Need detach all data volumes first.

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:881
# args: vm.getUuid(),vm.getPlatform()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ local\ storage.\ Only\ linux\ guest\ is\ supported.\ Current\ platform\ is\ [%s] = unable to live migrate vm[uuid:{0}] with local storage. Only linux guest is supported. Current platform is [{1}]

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:886
# args: vm.getUuid()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ ISO\ on\ local\ storage.\ Need\ detach\ all\ ISO\ first. = unable to live migrate vm[uuid:{0}] with ISO on local storage. Need detach all ISO first.

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:917
# args: vm.getUuid()
unable\ to\ live\ migrate\ with\ local\ storage.\ The\ vm[uuid\:%s]\ has\ volumes\ on\ local\ storage,to\ protect\ your\ data,\ please\ stop\ the\ vm\ and\ do\ the\ volume\ migration = unable to live migrate with local storage. The vm[uuid:{0}] has volumes on local storage,to protect your data, please stop the vm and do the volume migration

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:967
# args: LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()
To\ create\ data\ volume\ on\ the\ local\ primary\ storage,\ you\ must\ specify\ the\ host\ that\ the\ data\ volume\ is\ going\ to\ be\ created\ using\ the\ system\ tag\ [%s] = To create data volume on the local primary storage, you must specify the host that the data volume is going to be created using the system tag [{0}]

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:977
# args: hostUuid,msg.getPrimaryStorageUuid()
the\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ local\ primary\ storage[uuid\:%s] = the host[uuid:{0}] doesn't belong to the local primary storage[uuid:{1}]

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:1595
# args: 
root\ image\ has\ been\ deleted,\ cannot\ reimage\ now = root image has been deleted, cannot reimage now

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageKvmFactory.java:105
# args: context.getInventory().getUuid(),priUuid,reply.getError()
KVM\ host[uuid\:\ %s]\ fails\ to\ be\ added\ into\ local\ primary\ storage[uuid\:\ %s],\ %s = KVM host[uuid: {0}] fails to be added into local primary storage[uuid: {1}], {2}

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java:215
# args: greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download\ bits\ from\ the\ SFTP\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ local\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = failed to download bits from the SFTP backup storage[hostname:{0}, path: {1}] to the local primary storage[uuid:{2}, path: {3}], {4}

# at: src/zstack/./plugin/localstorage/src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java:266
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),backupStorageInstallPath,rsp.getError()
failed\ to\ upload\ bits\ from\ the\ local\ storage[uuid\:%s,\ path\:%s]\ to\ the\ SFTP\ backup\ storage[hostname\:%s,\ path\:%s],\ %s = failed to upload bits from the local storage[uuid:{0}, path:{1}] to the SFTP backup storage[hostname:{2}, path:{3}], {4}

# at: src/zstack/./plugin/mediator/src/main/java/org/zstack/mediator/ApiValidator.java:112
# args: l3NetworkUuid,vmNicVO.getL3NetworkUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ cidr\ of\ l3[%s]\ to\ attach\ overlapped\ with\ l3[%s]\ already\ attached\ to\ vm = unable to attach a L3 network. The cidr of l3[{0}] to attach overlapped with l3[{1}] already attached to vm

# at: src/zstack/./plugin/mediator/src/main/java/org/zstack/mediator/ApiValidator.java:144
# args: vm.getName(),vm.getUuid(),StringUtils.join(pfStr, ",")
the\ vm[name\:%s,\ uuid\:%s]\ already\ has\ some\ port\ forwarding\ rules%s\ attached = the vm[name:{0}, uuid:{1}] already has some port forwarding rules{2} attached

# at: src/zstack/./plugin/mediator/src/main/java/org/zstack/mediator/ApiValidator.java:165
# args: vm.getName(),vm.getUuid(),StringUtils.join(eipStr, ",")
the\ vm[name\:%s,\ uuid\:%s]\ already\ has\ some\ EIPs%s\ attached = the vm[name:{0}, uuid:{1}] already has some EIPs{2} attached

# at: src/zstack/./plugin/mediator/src/main/java/org/zstack/mediator/ApiValidator.java:184
# args: msg.getVipUuid(),vipUseForList.toString()
the\ vip[uuid\:%s]\ already\ has\ bound\ to\ other\ service[%s] = the vip[uuid:{0}] already has bound to other service[{1}]

# at: src/zstack/./plugin/mediator/src/main/java/org/zstack/mediator/ApiValidator.java:224
# args: Long.toString(range.getStart()),Long.toString(range.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),vipUuid,protocol
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ used\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ %s\  = Current port range[{0}, {1}] is conflicted with used port range [{2}, {3}] with vip[uuid: {4}] protocol: {5} 

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:46
# args: url,zoneUuid
there\ has\ been\ a\ nfs\ primary\ storage\ having\ url\ as\ %s\ in\ zone[uuid\:%s] = there has been a nfs primary storage having url as {0} in zone[uuid:{1}]

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:65
# args: 
found\ multiple\ CIDR = found multiple CIDR

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:78
# args: cidr
invalid\ CIDR\:\ %s = invalid CIDR: {0}

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:82
# args: ipAddr,cidr
IP\ address[%s]\ is\ not\ in\ CIDR[%s] = IP address[{0}] is not in CIDR[{1}]

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:96
# args: vms.size(),StringUtils.join(vms, "\n")
there\ are\ %s\ running\ VMs\ on\ the\ NFS\ primary\ storage,\ please\ stop\ them\ and\ try\ again\:\n%s\n = there are {0} running VMs on the NFS primary storage, please stop them and try again:\n{1}\n

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:225
# args: 
cannot\ find\ usable\ backend = cannot find usable backend

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:283
# args: 
no\ usable\ backend\ found = no usable backend found

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:423
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getSnapshot().getUuid(),msg.getSnapshot().getName()
no\ host\ in\ Connected\ status\ to\ which\ nfs\ primary\ storage[uuid\:%s,\ name\:%s]\ attached\ found\ to\ revert\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s,\ name\:%s] = no host in Connected status to which nfs primary storage[uuid:{0}, name:{1}] attached found to revert volume[uuid:{2}] to snapshot[uuid:{3}, name:{4}]

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:454
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getVolume().getRootImageUuid()
no\ host\ in\ Connected\ status\ to\ which\ nfs\ primary\ storage[uuid\:%s,\ name\:%s]\ attached\ found\ to\ revert\ volume[uuid\:%s]\ to\ image[uuid\:%s] = no host in Connected status to which nfs primary storage[uuid:{0}, name:{1}] attached found to revert volume[uuid:{2}] to image[uuid:{3}]

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:502
# args: self.getUuid(),sinv.getUuid(),errorCode,NfsPrimaryStorageGlobalConfig.GC_INTERVAL.value(Long.class)
NFS\ primary\ storage[uuid\:%s]\ failed\ to\ delete\ a\ volume\ snapshot[uuid\:%s],\ %s.\ A\ GC\ job[uuid\:%s]\ is\ scheduled\ to\ cleanup\ it\ in\ the\ interval\ of\ %s\ seconds = NFS primary storage[uuid:{0}] failed to delete a volume snapshot[uuid:{1}], {2}. A GC job[uuid:{3}] is scheduled to cleanup it in the interval of {4} seconds

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:533
# args: vol.getVmInstanceUuid(),state
vm[uuid\:%s]\ is\ not\ Running,\ Paused\ or\ Stopped,\ current\ state\ is\ %s = vm[uuid:{0}] is not Running, Paused or Stopped, current state is {1}

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:576
# args: self.getUuid()
primary\ storage[uuid\:%s]\ doesn't\ attach\ to\ any\ cluster = primary storage[uuid:{0}] doesn't attach to any cluster

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:756
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getVolume().getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ usable\ host\ to\ create\ the\ data\ volume[uuid\:%s,\ name\:%s] = the NFS primary storage[uuid:{0}, name:{1}] cannot find any usable host to create the data volume[uuid:{2}, name:{3}]

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1164
# args: self.getUuid(),self.getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ hosts\ in\ attached\ clusters\ to\ perform\ the\ operation = the NFS primary storage[uuid:{0}, name:{1}] cannot find hosts in attached clusters to perform the operation

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1281
# args: self.getUuid(),self.getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = the NFS primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:113
# args: psUuid,vmUuid,volumeUuid
the\ NFS\ primary\ storage[uuid\:%s]\ is\ not\ attached\ to\ any\ clusters,\ and\ cannot\ expunge\ the\ root\ volume[uuid\:%s]\ of\ the\ VM[uuid\:%s] = the NFS primary storage[uuid:{0}] is not attached to any clusters, and cannot expunge the root volume[uuid:{1}] of the VM[uuid:{2}]

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:259
# args: pri.getUuid()
cannot\ find\ a\ Connected\ host\ to\ execute\ command\ for\ nfs\ primary\ storage[uuid\:%s] = cannot find a Connected host to execute command for nfs primary storage[uuid:{0}]

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:280
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ Connected\ host-NFS\ connection\ to\ execute\ command\ for\ nfs\ primary\ storage[uuid\:%s] = cannot find a host which has Connected host-NFS connection to execute command for nfs primary storage[uuid:{0}]

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:582
# args: msg.getVolume().getUuid()
cannot\ get\ root\ image\ of\ volume[uuid\:%s],\ may\ be\ it\ create\ from\ iso = cannot get root image of volume[uuid:{0}], may be it create from iso

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:225
# args: inv.getUuid(),inv.getName(),clusterUuid,versionInCluster,otherVersion,QCOW3_QEMU_IMG_VERSION,QCOW3_QEMU_IMG_VERSION
unable\ to\ attach\ a\ primary\ storage[uuid\:%s,\ name\:%s]\ to\ cluster[uuid\:%s].\ Kvm\ host\ in\ the\ cluster\ has\ qemu-img\ with\ version[%s];\ but\ the\ primary\ storage\ has\ attached\ to\ another\ cluster\ that\ has\ kvm\ host\ which\ has\ qemu-img\ with\ version[%s].\ qemu-img\ version\ greater\ than\ %s\ is\ incompatible\ with\ versions\ less\ than\ %s,\ this\ will\ causes\ volume\ snapshot\ operation\ to\ fail.\ Please\ avoid\ attaching\ a\ primary\ storage\ to\ clusters\ that\ have\ different\ Linux\ distributions,\ in\ order\ to\ prevent\ qemu-img\ version\ mismatch = unable to attach a primary storage[uuid:{0}, name:{1}] to cluster[uuid:{2}]. Kvm host in the cluster has qemu-img with version[{3}]; but the primary storage has attached to another cluster that has kvm host which has qemu-img with version[{4}]. qemu-img version greater than {5} is incompatible with versions less than {6}, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:358
# args: inv.getUuid()
no\ host\ accessed\ to\ the\ nfs[uuid\:%s] = no host accessed to the nfs[uuid:{0}]

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:382
# args: inv.getUuid()
no\ host\ in\ is\ Connected\ or\ primary\ storage[uuid\:%s]\ attach\ no\ cluster = no host in is Connected or primary storage[uuid:{0}] attach no cluster

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:420
# args: psInv.getUuid(),huuid,reply.isSuccess() ? rsp.getError() : reply.getError()
failed\ to\ ping\ nfs\ primary\ storage[uuid\:%s]\ from\ host[uuid\:%s],because\ %s.\ disconnect\ this\ host-ps\ connection = failed to ping nfs primary storage[uuid:{0}] from host[uuid:{1}],because {2}. disconnect this host-ps connection

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:608
# args: msg.getHostUuid()
The\ chosen\ host[uuid\:%s]\ to\ perform\ storage\ migration\ is\ lost = The chosen host[uuid:{0}] to perform storage migration is lost

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:882
# args: volume.getUuid(),volume.getName(),host.getUuid(),host.getManagementIp(),rsp.getError()
unable\ to\ create\ empty\ volume[uuid\:%s,\ \ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = unable to create empty volume[uuid:{0},  name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1061
# args: vol.getUuid(),sinv.getUuid(),host.getUuid(),host.getManagementIp(),rsp.getError()
failed\ to\ revert\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ %s = failed to revert volume[uuid:{0}] to snapshot[uuid:{1}] on kvm host[uuid:{2}, ip:{3}], {4}

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1099
# args: vol.getUuid(),vol.getRootImageUuid(),host.getUuid(),host.getManagementIp(),rsp.getError()
failed\ to\ revert\ volume[uuid\:%s]\ to\ image[uuid\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ %s = failed to revert volume[uuid:{0}] to image[uuid:{1}] on kvm host[uuid:{2}, ip:{3}], {4}

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1316
# args: pinv.getUuid(),pinv.getName(),oldMountPoint,newMountPoint,hostUuid,errorCode
unable\ to\ update\ the\ nfs[uuid\:%s,\ name\:%s]\ mount\ point\ from\ %s\ to\ %s\ on\ the\ host[uuid\:%s],\ %s.\ Put\ the\ host-nfs\ into\ Disconnected\ status = unable to update the nfs[uuid:{0}, name:{1}] mount point from {2} to {3} on the host[uuid:{4}], {5}. Put the host-nfs into Disconnected status

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1377
# args: inv.getUuid(),huuid,errorCode.toString()
fail\ to\ mount\ nfs[uuid\:%s]\ from\ host[uuid\:%s],\ because\:%s = fail to mount nfs[uuid:{0}] from host[uuid:{1}], because:{2}

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java:158
# args: backupStorageInstallPath,greply.getHostname(),pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download[%s]\ from\ SftpBackupStorage[hostname\:%s]\ to\ nfs\ primary\ storage[uuid\:%s,\ path\:%s],\ %s = failed to download[{0}] from SftpBackupStorage[hostname:{1}] to nfs primary storage[uuid:{2}, path:{3}], {4}

# at: src/zstack/./plugin/nfsPrimaryStorage/src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java:215
# args: pinv.getUuid(),primaryStorageInstallPath,hostname,backupStorageInstallPath,rsp.getError()
failed\ to\ upload\ bits\ from\ nfs\ primary\ storage[uuid\:%s,\ path\:%s]\ to\ SFTP\ backup\ storage[hostname\:%s,\ path\:\ %s],\ %s = failed to upload bits from nfs primary storage[uuid:{0}, path:{1}] to SFTP backup storage[hostname:{2}, path: {3}], {4}

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:208
# args: msg.getVmNicUuid(),msg.getVipUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ vip[uuid\:\ %s]\ are\ the\ same\ network = guest l3Network of vm nic[uuid:{0}] and vip l3Network of vip[uuid: {1}] are the same network

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:183
# args: msg.getVipUuid(),useForList.toString()
the\ vip[uuid\:%s]\ has\ been\ occupied\ other\ network\ service\ entity[%s] = the vip[uuid:{0}] has been occupied other network service entity[{1}]

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:68
# args: msg.getRuleUuid(),state
Port\ forwarding\ rule[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ current\ state\ is\ %s = Port forwarding rule[uuid:{0}] is not in state of Enabled, current state is {1}

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:83
# args: msg.getUuid()
port\ forwarding\ rule\ rule[uuid\:%s]\ has\ not\ been\ attached\ to\ any\ vm\ nic,\ can't\ detach = port forwarding rule rule[uuid:{0}] has not been attached to any vm nic, can't detach

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:97
# args: msg.getRuleUuid(),vmNicUuid
port\ forwarding\ rule[uuid\:%s]\ has\ been\ attached\ to\ vm\ nic[uuid\:%s],\ can't\ attach\ again = port forwarding rule[uuid:{0}] has been attached to vm nic[uuid:{1}], can't attach again

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:102
# args: msg.getRuleUuid(),state
port\ forwarding\ rule[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ \ current\ state\ is\ %s.\ A\ rule\ can\ only\ be\ attached\ when\ its\ state\ is\ Enabled = port forwarding rule[uuid:{0}] is not in state of Enabled,  current state is {1}. A rule can only be attached when its state is Enabled

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:121
# args: msg.getVmNicUuid(),msg.getRuleUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ port\ forwarding\ rule[uuid\:%s]\ are\ the\ same\ network = guest l3Network of vm nic[uuid:{0}] and vip l3Network of port forwarding rule[uuid:{1}] are the same network

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:168
# args: msg.getVipPortStart(),msg.getVipPortEnd(),msg.getPrivatePortStart(),msg.getPrivatePortEnd()
for\ range\ port\ forwarding,\ the\ port\ range\ size\ must\ match;\ vip\ range[%s,\ %s]'s\ size\ doesn't\ match\ range[%s,\ %s]'s\ size = for range port forwarding, the port range size must match; vip range[{0}, {1}]'s size doesn't match range[{2}, {3}]'s size

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:175
# args: msg.getAllowedCidr()
invalid\ CIDR[%s] = invalid CIDR[{0}]

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:193
# args: vipStart,vipEnd,vo.getUuid(),vo.getVipPortStart(),vo.getVipPortEnd()
vip\ port\ range[vipStartPort\:%s,\ vipEndPort\:%s]\ overlaps\ with\ rule[uuid\:%s,\ vipStartPort\:%s,\ vipEndPort\:%s] = vip port range[vipStartPort:{0}, vipEndPort:{1}] overlaps with rule[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]

# at: src/zstack/./plugin/portForwarding/src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:245
# args: vm.getName(),vm.getUuid(),vipUuid
the\ VM[name\:%s\ uuid\:%s]\ already\ has\ port\ forwarding\ rules\ that\ have\ different\ VIPs\ than\ the\ one[uuid\:%s] = the VM[name:{0} uuid:{1}] already has port forwarding rules that have different VIPs than the one[uuid:{2}]

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:70
# args: msg.getSecurityGroupUuid(),msg.getL3NetworkUuid()
security\ group[uuid\:%s]\ has\ not\ attached\ to\ l3Network[uuid\:%s],\ can't\ detach = security group[uuid:{0}] has not attached to l3Network[uuid:{1}], can't detach

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:118
# args: msg.getSecurityGroupUuid(),msg.getL3NetworkUuid()
security\ group[uuid\:%s]\ has\ attached\ to\ l3Network[uuid\:%s],\ can't\ attach\ again = security group[uuid:{0}] has attached to l3Network[uuid:{1}], can't attach again

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:126
# args: msg.getL3NetworkUuid(),SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE
the\ L3\ network[uuid\:%s]\ doesn't\ have\ the\ network\ service\ type[%s]\ enabled = the L3 network[uuid:{0}] doesn't have the network service type[{1}] enabled

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:132
# args: msg.getL3NetworkUuid(),l3Vo.getIpVersion(),msg.getSecurityGroupUuid(),sgVo.getIpVersion()
the\ L3\ network[uuid\:%s]\ ipVersion\ [%d]\ is\ different\ from\ securityGroup\ [uuid\:%s]\ ipVersion\ [%d] = the L3 network[uuid:{0}] ipVersion [{1}] is different from securityGroup [uuid:{2}] ipVersion [{3}]

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:215
# args: JSONObjectUtil.toJsonString(ao)
rule\ type\ can\ not\ be\ null.\ rule\ dump\:\ %s = rule type can not be null. rule dump: {0}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:220
# args: ao.getType(),JSONObjectUtil.toJsonString(ao)
unknown\ rule\ type[%s],\ rule\ can\ only\ be\ Ingress/Egress.\ rule\ dump\:\ %s = unknown rule type[{0}], rule can only be Ingress/Egress. rule dump: {1}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:226
# args: JSONObjectUtil.toJsonString(ao)
protocol\ can\ not\ be\ null.\ rule\ dump\:\ %s = protocol can not be null. rule dump: {0}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:232
# args: ao.getProtocol(),JSONObjectUtil.toJsonString(ao)
invalid\ protocol[%s].\ Valid\ protocols\ are\ [TCP,\ UDP,\ ICMP,\ ALL].\ rule\ dump\:\ %s = invalid protocol[{0}]. Valid protocols are [TCP, UDP, ICMP, ALL]. rule dump: {1}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:239
# args: JSONObjectUtil.toJsonString(ao)
can\ not\ set\ port\ for\ protocol\ [type\:ALL].\ rule\ dump\:\ %s = can not set port for protocol [type:ALL]. rule dump: {0}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:237
# args: JSONObjectUtil.toJsonString(ao)
startPort\ can\ not\ be\ null.\ rule\ dump\:\ %s = startPort can not be null. rule dump: {0}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:251
# args: ao.getStartPort(),JSONObjectUtil.toJsonString(ao)
invalid\ startPort[%s].\ Valid\ range\ is\ [0,\ 65535].\ rule\ dump\:\ %s = invalid startPort[{0}]. Valid range is [0, 65535]. rule dump: {1}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:244
# args: ao.getStartPort(),JSONObjectUtil.toJsonString(ao)
invalid\ ICMP\ type[%s].\ Valid\ type\ is\ [-1,\ 255].\ rule\ dump\:\ %s = invalid ICMP type[{0}]. Valid type is [-1, 255]. rule dump: {1}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:270
# args: ao.getEndPort(),JSONObjectUtil.toJsonString(ao)
invalid\ endPort[%s].\ Valid\ range\ is\ [0,\ 65535].\ rule\ dump\:\ %s = invalid endPort[{0}]. Valid range is [0, 65535]. rule dump: {1}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:263
# args: ao.getEndPort(),JSONObjectUtil.toJsonString(ao)
invalid\ ICMP\ code[%s].\ Valid\ range\ is\ [-1,\ 3].\ rule\ dump\:\ %s = invalid ICMP code[{0}]. Valid range is [-1, 3]. rule dump: {1}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:280
# args: ao.getAllowedCidr(),JSONObjectUtil.toJsonString(ao)
invalid\ CIDR[%s].\ rule\ dump\:\ %s = invalid CIDR[{0}]. rule dump: {1}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:284
# args: sgVo.getIpVersion(),ao.getIpVersion()
security\ group\ rule\ ipVersion\ [%d]\ is\ different\ from\ security\ group\ version\ [%d] = security group rule ipVersion [{0}] is different from security group version [{1}]

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:293
# args: JSONObjectUtil.toJsonString(msg.getRules().get(j))
rule\ should\ not\ be\ duplicated.\ rule\ dump\:\ %s = rule should not be duplicated. rule dump: {0}

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:319
# args: JSONObjectUtil.toJsonString(sao),svo.getRemoteSecurityGroupUuid()
rule\ exist.\ rule\ dump\:\ %s,\ remoteSecurityGroupUuid\:[%s] = rule exist. rule dump: {0}, remoteSecurityGroupUuid:[{1}]

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:346
# args: rsgVo.getIpVersion(),sgVo.getIpVersion()
remote\ security\ group\ ipVersion\ [%d]\ is\ different\ from\ security\ group\ version\ [%d] = remote security group ipVersion [{0}] is different from security group version [{1}]

# at: src/zstack/./plugin/securityGroup/src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:1106
# args: wrongUuids,securityGroupUuid
VM\ nics[uuids\:%s]\ are\ not\ on\ L3\ networks\ that\ have\ been\ attached\ to\ the\ security\ group[uuid\:%s] = VM nics[uuids:{0}] are not on L3 networks that have been attached to the security group[uuid:{1}]

# at: src/zstack/./plugin/sftpBackupStorage/src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:101
# args: scheme,url
SftpBackupStorage\ doesn't\ support\ scheme[%s]\ in\ url[%s] = SftpBackupStorage doesn't support scheme[{0}] in url[{1}]

# at: src/zstack/./plugin/sftpBackupStorage/src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:129
# args: ret.getError()
fail\ to\ download\ image,\ because\ %s = fail to download image, because {0}

# at: src/zstack/./plugin/sftpBackupStorage/src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:274
# args: self.getUuid(),ret.getUuid()
the\ uuid\ of\ sftpBackupStorage\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = the uuid of sftpBackupStorage agent changed[expected:{0}, actual:{1}], it's most likely the agent was manually restarted. Issue a reconnect to sync the status

# at: src/zstack/./plugin/sftpBackupStorage/src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java:69
# args: msg.getHostname()
duplicate\ backup\ storage.\ There\ has\ been\ a\ sftp\ backup\ storage[hostname\:%s]\ existing = duplicate backup storage. There has been a sftp backup storage[hostname:{0}] existing

# at: src/zstack/./plugin/sftpBackupStorage/src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:499
# args: rsp.getBackupStorageMetaFileName()
check\ image\ metadata\ file\:\ %s\ failed = check image metadata file: {0} failed

# at: src/zstack/./plugin/sftpBackupStorage/src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:351
# args: rsp.getBackupStorageMetaFileName()
create\ image\ metadata\ file\ \:\ %s\ failed = create image metadata file : {0} failed

# at: src/zstack/./plugin/sftpBackupStorage/src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:504
# args: rsp.getBackupStorageMetaFileName()
image\ metadata\ file\:\ %s\ is\ not\ exist = image metadata file: {0} is not exist

# at: src/zstack/./plugin/sharedMountPointPrimaryStorage/src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:1515
# args: ret.firstAccessHostUuids
hosts[uuid\:%s]\ have\ the\ same\ mount\ path,\ but\ actually\ mount\ different\ storage. = hosts[uuid:{0}] have the same mount path, but actually mount different storage.

# at: src/zstack/./plugin/sharedMountPointPrimaryStorage/src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java:408
# args: self.getUuid(),self.getName(),future.getErrorCode()
unable\ to\ reconnect\ the\ primary\ storage[uuid\:%s,\ name\:%s],\ %s = unable to reconnect the primary storage[uuid:{0}, name:{1}], {2}

# at: src/zstack/./plugin/sharedMountPointPrimaryStorage/src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java:500
# args: 
not\ supported\ operation = not supported operation

# at: src/zstack/./plugin/sharedMountPointPrimaryStorage/src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:106
# args: psUuid,vmUuid,volumeUuid
the\ SMP\ primary\ storage[uuid\:%s]\ is\ not\ attached\ to\ any\ clusters,\ and\ cannot\ expunge\ the\ root\ volume[uuid\:%s]\ of\ the\ VM[uuid\:%s] = the SMP primary storage[uuid:{0}] is not attached to any clusters, and cannot expunge the root volume[uuid:{1}] of the VM[uuid:{2}]

# at: src/zstack/./plugin/sharedMountPointPrimaryStorage/src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:300
# args: pri.getUuid()
cannot\ find\ a\ Connected\ host\ to\ execute\ command\ for\ smp\ primary\ storage[uuid\:%s] = cannot find a Connected host to execute command for smp primary storage[uuid:{0}]

# at: src/zstack/./plugin/sharedMountPointPrimaryStorage/src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:320
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ Connected\ host-SMP\ connection\ to\ execute\ command\ for\ smp\ primary\ storage[uuid\:%s] = cannot find a host which has Connected host-SMP connection to execute command for smp primary storage[uuid:{0}]

# at: src/zstack/./plugin/sharedMountPointPrimaryStorage/src/main/java/org/zstack/storage/primary/smp/SharedMountPointApiInterceptor.java:25
# args: 
\ the\ url\ contains\ an\ invalid\ folder[/dev\ or\ /proc\ or\ /sys] =  the url contains an invalid folder[/dev or /proc or /sys]

# at: src/zstack/./plugin/vip/src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:49
# args: msg.getAllocatorStrategy()
unsupported\ ip\ allocation\ strategy[%s] = unsupported ip allocation strategy[{0}]

# at: src/zstack/./plugin/vip/src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:61
# args: msg.getRequiredIp()
requiredIp[%s]\ is\ not\ in\ valid\ IPv6\ mediaType = requiredIp[{0}] is not in valid IPv6 mediaType

# at: src/zstack/./plugin/vip/src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:56
# args: msg.getRequiredIp()
requiredIp[%s]\ is\ not\ in\ valid\ IPv4\ mediaType = requiredIp[{0}] is not in valid IPv4 mediaType

# at: src/zstack/./plugin/vip/src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:70
# args: msg.getRequiredIp(),msg.getL3NetworkUuid()
there\ is\ already\ a\ vip[%s]\ on\ l3Network[uuid\:%s] = there is already a vip[{0}] on l3Network[uuid:{1}]

# at: src/zstack/./plugin/vip/src/main/java/org/zstack/network/service/vip/VipBase.java:143
# args: self.getUuid(),self.getName(),self.getIp(),self.getServiceProvider()
service\ provider\ of\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:\ %s]\ has\ been\ set\ to\ %s = service provider of the vip[uuid:{0}, name:{1}, ip: {2}] has been set to {3}

# at: src/zstack/./plugin/vip/src/main/java/org/zstack/network/service/vip/VipBase.java:576
# args: self.getUuid(),self.getIp()
Vip\ [uuid\ %s,\ ip\ %s]\ of\ router\ public\ interface\ can\ not\ be\ deleted = Vip [uuid {0}, ip {1}] of router public interface can not be deleted

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:263
# args: self.getName(),self.getUuid(),self.getState()
the\ virtual\ router[name\:%s,\ uuid\:%s,\ current\ state\:%s]\ is\ not\ running,and\ cannot\ perform\ required\ operation.\ Please\ retry\ your\ operation\ later\ once\ it\ is\ running = the virtual router[name:{0}, uuid:{1}, current state:{2}] is not running,and cannot perform required operation. Please retry your operation later once it is running

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:268
# args: self.getUuid(),getSelf().getStatus(),msg.getPath()
virtual\ router[uuid\:%s]\ is\ in\ status\ of\ %s\ that\ cannot\ make\ http\ call\ to\ %s = virtual router[uuid:{0}] is in status of {1} that cannot make http call to {2}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:454
# args: info.getIp(),info.getMac(),vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError()
unable\ to\ add\ nic[ip\:%s,\ mac\:%s]\ to\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s = unable to add nic[ip:{0}, mac:{1}] to virtual router vm[uuid:{2} ip:{3}], because {4}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:625
# args: info,vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError()
unable\ to\ detach\ nic[%s]\ from\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s = unable to detach nic[{0}] from virtual router vm[uuid:{1} ip:{2}], because {3}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:130
# args: msg.getImageUuid(),type,ImageMediaType.RootVolumeTemplate
image[uuid\:%s]'s\ mediaType\ is\ %s,\ the\ mediaType\ of\ a\ virtual\ router\ image\ must\ be\ %s = image[uuid:{0}]'s mediaType is {1}, the mediaType of a virtual router image must be {2}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:136
# args: msg.getImageUuid(),format
image[uuid\:%s]\ is\ of\ format\ %s,\ cannot\ be\ used\ for\ virtual\ router = image[uuid:{0}] is of format {1}, cannot be used for virtual router

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:106
# args: msg.getManagementNetworkUuid(),msg.getZoneUuid()
management\ network[uuid\:%s]\ is\ not\ in\ the\ same\ zone[uuid\:%s]\ this\ offering\ is\ going\ to\ create = management network[uuid:{0}] is not in the same zone[uuid:{1}] this offering is going to create

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:119
# args: msg.getManagementNetworkUuid(),msg.getZoneUuid()
public\ network[uuid\:%s]\ is\ not\ in\ the\ same\ zone[uuid\:%s]\ this\ offering\ is\ going\ to\ create = public network[uuid:{0}] is not in the same zone[uuid:{1}] this offering is going to create

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:147
# args: msg.getPublicNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ has\ the\ SNAT\ service\ enabled,\ it\ cannot\ be\ used\ as\ a\ public\ network = the L3 network[uuid: {0}] has the SNAT service enabled, it cannot be used as a public network

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:145
# args: msg.getManagementNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ has\ the\ SNAT\ service\ enabled,\ it\ cannot\ be\ used\ as\ a\ management\ network = the L3 network[uuid: {0}] has the SNAT service enabled, it cannot be used as a management network

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:158
# args: managementNetworkUuid
the\ management\ network[uuid\:%s]\ doesn't\ have\ any\ IP\ range = the management network[uuid:{0}] doesn't have any IP range

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:175
# args: managementNetworkUuid,gateway
the\ management\ network[uuid\:%s,\ gateway\:%s]\ is\ not\ reachable = the management network[uuid:{0}, gateway:{1}] is not reachable

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java:108
# args: iso.getIsoPath(),vrSpec.getDestHost().getUuid(),vrSpec.getDestHost().getManagementIp(),iso.getVirtualRouterUuid(),rsp.getError()
failed\ to\ create\ VirtualRouterBootstrapIso[%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s]\ for\ virtual\ router[uuid\:%s],\ because\ %s = failed to create VirtualRouterBootstrapIso[{0}] on kvm host[uuid:{1}, ip:{2}] for virtual router[uuid:{3}], because {4}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java:142
# args: iso.getIsoPath(),hostUuid,iso.getVirtualRouterUuid(),rsp.getError()
failed\ to\ delete\ VirtualRouterBootstrapIso[%s]\ on\ kvm\ host[uuid\:%s]\ for\ virtual\ router[uuid\:%s],\ because\ %s = failed to delete VirtualRouterBootstrapIso[{0}] on kvm host[uuid:{1}] for virtual router[uuid:{2}], because {3}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:279
# args: 
cannot\ create\ virtual\ Router\ vm\ while\ virtual\ router\ network\ overlaps\ with\ private\ network\ in\ ip\  = cannot create virtual Router vm while virtual router network overlaps with private network in ip 

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:795
# args: vr.getUuid(),l3Nw.getUuid(),vr.getState()
virtual\ router[uuid\:%s]\ for\ l3\ network[uuid\:%s]\ is\ not\ in\ Running\ state,\ current\ state\ is\ %s.\ We\ don't\ have\ HA\ feature\ now(it's\ coming\ soon),\ please\ restart\ it\ from\ UI\ and\ then\ try\ starting\ this\ vm\ again = virtual router[uuid:{0}] for l3 network[uuid:{1}] is not in Running state, current state is {2}. We don't have HA feature now(it's coming soon), please restart it from UI and then try starting this vm again

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1093
# args: msg.getL3NetworkUuid()
failed\ tot\ attach\ virtual\ router\ network\ services\ to\ l3Network[uuid\:%s].\ When\ eip\ is\ selected,\ snat\ must\ be\ selected\ too = failed tot attach virtual router network services to l3Network[uuid:{0}]. When eip is selected, snat must be selected too

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1097
# args: msg.getL3NetworkUuid()
failed\ tot\ attach\ virtual\ router\ network\ services\ to\ l3Network[uuid\:%s].\ When\ port\ forwarding\ is\ selected,\ snat\ must\ be\ selected\ too = failed tot attach virtual router network services to l3Network[uuid:{0}]. When port forwarding is selected, snat must be selected too

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1501
# args: toDeleteNics.stream().map( n -> n.getUuid()).collect(Collectors.toList())
can\ not\ detach\ nic\ [uuid\:%s] = can not detach nic [uuid:{0}]

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java:127
# args: vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError(),struct
unable\ to\ add\ dhcp\ entries\ to\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s,\ dhcp\ entry[%s] = unable to add dhcp entries to virtual router vm[uuid:{0} ip:{1}], because {2}, dhcp entry[{3}]

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterSyncDHCPOnStartFlow.java:178
# args: vr.getUuid(),vr.getManagementNic().getIp(),ret.getError()
unable\ to\ program\ dhcp\ entries\ served\ by\ virtual\ router[uuid\:%s,\ ip\:%s],\ %s = unable to program dhcp entries served by virtual router[uuid:{0}, ip:{1}], {2}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterDnsBackend.java:213
# args: vr.getUuid(),vr.getManagementNic().getIp(),struct,l3.getUuid(),l3.getName(),ret.getError()
virtual\ router[uuid\:%s,\ ip\:%s]\ failed\ to\ configure\ dns%s\ for\ L3Network[uuid\:%s,\ name\:%s],\ %s = virtual router[uuid:{0}, ip:{1}] failed to configure dns{2} for L3Network[uuid:{3}, name:{4}], {5}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterSyncDnsOnStartFlow.java:125
# args: vr.getName(),vr.getUuid(),JSONObjectUtil.toJsonString(dns),ret.getError()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ configure\ dns%s,\ %s\  = virtual router[name: {0}, uuid: {1}] failed to configure dns{2}, {3} 

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:163
# args: struct.getEip().getUuid(),struct.getEip().getName(),struct.getVip().getIp(),struct.getNic().getUuid(),vr.getUuid(),ret.getError()
failed\ to\ create\ eip[uuid\:%s,\ name\:%s,\ ip\:%s]\ for\ vm\ nic[uuid\:%s]\ on\ virtual\ router[uuid\:%s],\ %s = failed to create eip[uuid:{0}, name:{1}, ip:{2}] for vm nic[uuid:{3}] on virtual router[uuid:{4}], {5}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:199
# args: offering.getUuid(),l3inv.getUuid(),l3inv.getZoneUuid(),struct.getVip().getL3NetworkUuid(),struct.getEip().getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ EIP[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network's public network[uuid:{3}] is not the same to EIP[uuid:{4}]'s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:301
# args: struct.getEip().getUuid(),struct.getEip().getName(),struct.getVip().getIp(),struct.getNic().getUuid(),vr.getUuid(),ret.getError()
failed\ to\ remove\ eip[uuid\:%s,\ name\:%s,\ ip\:%s]\ for\ vm\ nic[uuid\:%s]\ on\ virtual\ router[uuid\:%s],\ %s = failed to remove eip[uuid:{0}, name:{1}, ip:{2}] for vm nic[uuid:{3}] on virtual router[uuid:{4}], {5}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterSyncEipOnStartFlow.java:190
# args: vr.getUuid(),ret.getError()
failed\ to\ sync\ eip\ on\ virtual\ router[uuid\:%s],\ %s = failed to sync eip on virtual router[uuid:{0}], {1}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:137
# args: msg.getVmNicUuids(),vrUuids
new\ add\ vm\ nics[uuids\:%s]\ and\ attached\ vmnics\ are\ not\ on\ the\ same\ vrouter,\ they\ are\ on\ vrouters[uuids\:%s] = new add vm nics[uuids:{0}] and attached vmnics are not on the same vrouter, they are on vrouters[uuids:{1}]

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:167
# args: msg.getVmNicUuids(),peerL3NetworkUuids,msg.getLoadBalancerUuid(),vrUuids
new\ add\ vm\ nics[uuids\:%s]\ and\ peer\ l3s[uuids\:%s]\ of\ loadbalancer[uuid\:\ %s]'s\ vip\ are\ not\ on\ the\ same\ vrouter,\ they\ are\ on\ vrouters[uuids\:%s] = new add vm nics[uuids:{0}] and peer l3s[uuids:{1}] of loadbalancer[uuid: {2}]'s vip are not on the same vrouter, they are on vrouters[uuids:{3}]

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:1188
# args: struct.getLb().getUuid()
cannot\ find\ virtual\ router\ for\ load\ balancer\ [uuid\:%s] = cannot find virtual router for load balancer [uuid:{0}]

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSnatBackend.java:83
# args: guestL3.getUuid(),guestL3.getName(),offering.getPublicNetworkUuid(),offering.getUuid(),offering.getName()
guest\ l3Network[uuid\:%s,\ name\:%s]\ needs\ SNAT\ service\ provided\ by\ virtual\ router,\ but\ public\ l3Network[uuid\:%s]\ of\ virtual\ router\ offering[uuid\:\ %s,\ name\:%s]\ is\ the\ same\ to\ this\ guest\ l3Network = guest l3Network[uuid:{0}, name:{1}] needs SNAT service provided by virtual router, but public l3Network[uuid:{2}] of virtual router offering[uuid: {3}, name:{4}] is the same to this guest l3Network

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSnatBackend.java:134
# args: vr.getUuid(),vr.getManagementNic().getIp(),JSONObjectUtil.toJsonString(info),spec.getVmInventory().getUuid(),spec.getVmInventory().getName(),struct.getL3Network().getUuid(),struct.getL3Network().getName(),ret.getError()
virtual\ router[uuid\:%s,\ ip\:%s]\ failed\ to\ apply\ snat[%s]\ for\ vm[uuid\:%s,\ name\:%s]\ on\ L3Network[uuid\:%s,\ name\:%s],\ because\ %s = virtual router[uuid:{0}, ip:{1}] failed to apply snat[{2}] for vm[uuid:{3}, name:{4}] on L3Network[uuid:{5}, name:{6}], because {7}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSyncSNATOnStartFlow.java:105
# args: vr.getName(),vr.getUuid(),JSONObjectUtil.toJsonString(snatInfo),ret.getError()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ sync\ snat%s,\ %s = virtual router[name: {0}, uuid: {1}] failed to sync snat{2}, {3}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ApplyPortforwardingRuleOnVirtualRouterVmFlow.java:81
# args: to.getVipIp(),to.getPrivateIp(),to.getVipPortStart(),to.getVipPortEnd(),to.getPrivatePortStart(),to.getPrivatePortEnd(),ret.getError()
failed\ to\ create\ port\ forwarding\ rule[vip\ ip\:\ %s,\ private\ ip\:\ %s,\ vip\ start\ port\:\ %s,\ vip\ end\ port\:\ %s,\ private\ start\ port\:\ %s,\ private\ end\ port\:\ %s],\ because\ %s = failed to create port forwarding rule[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}], because {6}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ReleasePortForwardingRuleOnVirtualRouterVmFlow.java:75
# args: JSONObjectUtil.toJsonString(to),ret.getError()
failed\ to\ revoke\ port\ forwarding\ rules\ %s,\ because\ %s = failed to revoke port forwarding rules {0}, because {1}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:159
# args: offering.getUuid(),struct.getGuestL3Network().getUuid(),struct.getGuestL3Network().getZoneUuid(),struct.getVip().getL3NetworkUuid(),struct.getRule().getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ PortForwarding\ rule[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network's public network[uuid:{3}] is not the same to PortForwarding rule[uuid:{4}]'s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:225
# args: rule.getVipPortStart(),rule.getVipPortEnd(),rule.getPrivatePortStart(),rule.getPrivatePortEnd()
virtual\ router\ doesn't\ support\ port\ forwarding\ range\ redirection,\ the\ vipPortStart\ must\ be\ equals\ to\ privatePortStart\ and\ vipPortEnd\ must\ be\ equals\ to\ privatePortEnd;but\ this\ rule\ rule\ has\ a\ mismatching\ range\:\ vip\ port[%s,\ %s],\ private\ port[%s,\ %s] = virtual router doesn't support port forwarding range redirection, the vipPortStart must be equals to privatePortStart and vipPortEnd must be equals to privatePortEnd;but this rule rule has a mismatching range: vip port[{0}, {1}], private port[{2}, {3}]

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:381
# args: vrVO.getUuid(),ret.getError()
failed\ to\ add\ portforwardings\ on\ virtual\ router[uuid\:%s],\ %s = failed to add portforwardings on virtual router[uuid:{0}], {1}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:449
# args: vrVO.getUuid(),ret.getError()
failed\ to\ revoke\ port\ forwardings\ on\ virtual\ router[uuid\:%s],\ %s = failed to revoke port forwardings on virtual router[uuid:{0}], {1}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterSyncPortForwardingRulesOnStartFlow.java:196
# args: vr.getName(),vr.getUuid(),ret.getError()
failed\ to\ sync\ port\ forwarding\ rules\ served\ by\ virtual\ router[name\:\ %s,\ uuid\:\ %s],\ because\ %s = failed to sync port forwarding rules served by virtual router[name: {0}, uuid: {1}], because {2}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterCreateVipForPublicIpFlow.java:62
# args: vr.getName(),vr.getUuid(),nic.getIp(),nic.getL3NetworkUuid()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ create\ vip\ for\ public\ ip\ %s\ because\ no\ ip\ range\ for\ l3NetworkUuid\ %s = virtual router[name: {0}, uuid: {1}] failed to create vip for public ip {2} because no ip range for l3NetworkUuid {3}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:177
# args: vipvo.getVirtualRouterVmUuid(),vrState
virtual\ router[uuid\:%s,\ state\:%s]\ is\ not\ running,\ current\ HA\ has\ not\ been\ supported,\ please\ manually\ start\ this\ virtual\ router = virtual router[uuid:{0}, state:{1}] is not running, current HA has not been supported, please manually start this virtual router

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:342
# args: vips.stream().map( v -> v.getIp()).collect(Collectors.toList()),nic.getVmInstanceUuid(),nic.getUuid(),nic.getIp(),ret.getError()
failed\ to\ sync\ vips[ips\:\ %s]\ on\ virtual\ router[uuid\:%s]\ for\ attaching\ nic[uuid\:\ %s,\ ip\:\ %s],\ because\ %s = failed to sync vips[ips: {0}] on virtual router[uuid:{1}] for attaching nic[uuid: {2}, ip: {3}], because {4}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java:182
# args: tos,vr.getUuid(),ret.getError()
failed\ to\ create\ vip%s\ on\ virtual\ router[uuid\:%s],\ because\ %s = failed to create vip{0} on virtual router[uuid:{1}], because {2}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java:147
# args: tos,ret.getError()
failed\ to\ remove\ vip%s,\ because\ %s = failed to remove vip{0}, because {1}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java:245
# args: offering.getUuid(),s.getL3Network().getUuid(),s.getL3Network().getZoneUuid(),self.getL3NetworkUuid(),self.getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ VIP[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network's public network[uuid:{3}] is not the same to VIP[uuid:{4}]'s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java:204
# args: vipvo.getVirtualRouterVmUuid(),vrState
virtual\ router[uuid\:%s,\ state\:%s]\ is\ not\ running = virtual router[uuid:{0}, state:{1}] is not running

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosChangePrivateL3FirewallDefaultActionExtensionPoint.java:68
# args: nic.getIp(),nic.getMac(),nic.getVmInstanceUuid(),rsp.getError()
failed\ to\ change\ nic[ip\:%s,\ mac\:%s]\ firewall\ default\ action\ of\ virtual\ router\ vm[uuid\:%s],\ because\ %s = failed to change nic[ip:{0}, mac:{1}] firewall default action of virtual router vm[uuid:{2}], because {3}

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosVersionVersionManagerImpl.java:56
# args: vrUuid,ret.getError()
virtual\ router[uuid\:\ %s]\ failed\ to\ get\ version\ because\ %s\  = virtual router[uuid: {0}] failed to get version because {1} 

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosVersionVersionManagerImpl.java:63
# args: vrUuid
virtual\ router[uuid\:\ %s]\ doesn't\ have\ version = virtual router[uuid: {0}] doesn't have version

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosVersionVersionManagerImpl.java:69
# args: vrUuid,ret.getVersion()
virtual\ router[uuid\:\ %s]\ version\ [%s]\ format\ error = virtual router[uuid: {0}] version [{1}] format error

# at: src/zstack/./plugin/virtualRouterProvider/src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosVersionVersionManagerImpl.java:75
# args: vrUuid,ret.getVersion(),managementVersion
virtual\ router[uuid\:\ %s]\ version\ [%s]\ is\ older\ than\ management\ node\ version\ [%s] = virtual router[uuid: {0}] version [{1}] is older than management node version [{2}]

# at: src/zstack/./plugin/vxlan/src/main/java/org/zstack/network/l2/vxlan/vxlanNetwork/VxlanNetworkFactory.java:187
# args: inv.getUuid(),destHostUuid
cannot\ configure\ vxlan\ network\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = cannot configure vxlan network for vm[uuid:{0}] on the destination host[uuid:{1}]

# at: src/zstack/./plugin/vxlan/src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:77
# args: vtepIps,hostUuid
find\ multiple\ vtep\ ips[%s]\ for\ one\ host[uuid\:%s],\ need\ to\ delete\ host\ and\ add\ again = find multiple vtep ips[{0}] for one host[uuid:{1}], need to delete host and add again

# at: src/zstack/./plugin/vxlan/src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:118
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vxlan.getVni(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vni\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}, vni:{3}] on kvm host[uuid:{4}], because {5}

# at: src/zstack/./plugin/vxlan/src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:183
# args: cmd.getCidr(),l2vxlan.getUuid(),l2vxlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ cidr[%s]\ for\ l2VxlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = failed to check cidr[{0}] for l2VxlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}

# at: src/zstack/./plugin/vxlan/src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java:248
# args: l2Network.getUuid(),l2Network.getType(),vnis,hostUuid,rsp.getError()
failed\ to\ realize\ vxlan\ network\ pool[uuid\:%s,\ type\:%s,\ vnis\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to realize vxlan network pool[uuid:{0}, type:{1}, vnis:{2}] on kvm host[uuid:{3}], because {4}

# at: src/zstack/./plugin/vxlan/src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java:113
# args: cmd.getCidr(),vxlanPool.getUuid(),vxlanPool.getName(),hostUuid,rsp.getError()
failed\ to\ check\ cidr[%s]\ for\ l2VxlanNetworkPool[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = failed to check cidr[{0}] for l2VxlanNetworkPool[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}

# at: src/zstack/./plugin/vxlan/src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanPoolApiInterceptor.java:48
# args: msg.getHostUuid(),msg.getPoolUuid()
vxlan\ vtep\ address\ for\ host\ [uuid\ \:\ %s]\ and\ pool\ [uuid\ \:\ %s]\ pair\ already\ existed = vxlan vtep address for host [uuid : {0}] and pool [uuid : {1}] pair already existed

# at: src/zstack/./portal/src/main/java/org/zstack/portal/apimediator/ApiMediatorImpl.java:241
# args: cmsg.getResourceUuid()
resourceUuid[%s]\ is\ not\ a\ valid\ uuid.\ A\ valid\ uuid\ is\ a\ UUID(v4\ recommended)\ with\ '-'\ stripped.\ see\ http\://en.wikipedia.org/wiki/Universally_unique_identifier\ for\ format\ of\ UUID,\ the\ regular\ expression\ ZStack\ uses\ to\ validate\ a\ UUID\ is\ '[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}' = resourceUuid[{0}] is not a valid uuid. A valid uuid is a UUID(v4 recommended) with '-' stripped. see http://en.wikipedia.org/wiki/Universally_unique_identifier for format of UUID, the regular expression ZStack uses to validate a UUID is '[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}'

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:75
# args: msg.getAlarmUuid(),ruleVO.getScalingGroupUuid()
alarm[uuid\:%s]\ are\ being\ used\ by\ the\ autoScalingGroup[%s]\ which\ cannot\ be\ deleted = alarm[uuid:{0}] are being used by the autoScalingGroup[{1}] which cannot be deleted

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java:574
# args: msg.getTemplateUuid(),JSONObjectUtil.toJsonString(errors)
detach\ autoScalingTemplate[%s]\ from\ AutoScalingGroup\ failed,\ errors\ are\ %s = detach autoScalingTemplate[{0}] from AutoScalingGroup failed, errors are {1}

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:349
# args: 
Only\ one\ scaling\ activity\ can\ be\ executed\ in\ the\ same\ scaling\ group\ at\ the\ same\ time. = Only one scaling activity can be executed in the same scaling group at the same time.

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:984
# args: 
The\ number\ of\ instances\ exceeds\ the\ limit = The number of instances exceeds the limit

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:526
# args: msg.getAutoScalingGroupUuid(),JSONObjectUtil.toJsonString(errors)
autoScalingGroup[%s]\ create\ vms\ failed\ completely,\ errors\ are\ %s = autoScalingGroup[{0}] create vms failed completely, errors are {1}

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:572
# args: loadBalancerListenerUuidListStr
add\ vm\ nic\ to\ loadBalancer\ failed,\ No\ loadBalancer[uuids\=%s]\ can\ be\ found. = add vm nic to loadBalancer failed, No loadBalancer[uuids={0}] can be found.

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:611
# args: msg.getAutoScalingGroupUuid(),JSONObjectUtil.toJsonString(addVmNicToLoadBalancerErrorCodes)
autoScalingGroup[%s]\ add\ newly\ created\ vm\ to\ loadBalancer\ failed\ completely,\ errors\ are\ %s = autoScalingGroup[{0}] add newly created vm to loadBalancer failed completely, errors are {1}

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:644
# args: securityGroupUuid
add\ vm\ nic\ to\ securityGroup\ failed,\ No\ securityGroup[uuid\=%s]\ can\ be\ found. = add vm nic to securityGroup failed, No securityGroup[uuid={0}] can be found.

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:680
# args: msg.getAutoScalingGroupUuid(),JSONObjectUtil.toJsonString(addVmNicToSecurityGroupErrorCodes)
autoScalingGroup[%s]\ add\ newly\ created\ vm\ to\ securityGroup\ failed\ completely,\ errors\ are\ %s = autoScalingGroup[{0}] add newly created vm to securityGroup failed completely, errors are {1}

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:997
# args: 
Cannot\ find\ deleted\ target\ instance\ list = Cannot find deleted target instance list

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1218
# args: msg.getAutoScalingGroupUuid(),JSONObjectUtil.toJsonString(errors)
autoScalingGroup[%s]\ destroy\ vms\ failed\ completely,\ errors\ are\ %s = autoScalingGroup[{0}] destroy vms failed completely, errors are {1}

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1494
# args: ruleUuid,JSONObjectUtil.toJsonString(errors)
delete\ autoScalingRule[%s]\ triggers\ failed,\ errors\ are\ %s = delete autoScalingRule[{0}] triggers failed, errors are {1}

# at: src/zstack/./premium/autoscaling/src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:2111
# args: removalPolicy.toString()
Unsupported\ RemovalPolicy[%s]\ type = Unsupported RemovalPolicy[{0}] type

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:53
# args: address
IPMI\ Address\ %s\ is\ not\ valid = IPMI Address {0} is not valid

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:59
# args: 
Please\ check\ the\ IPMI\ connection\ and\ make\ sure\ the\ IPMI\ Address,\ Port,\ Username\ and\ Password\ of\ remote\ server\ are\ correct. = Please check the IPMI connection and make sure the IPMI Address, Port, Username and Password of remote server are correct.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:74
# args: address,port
Baremetal\ Chassis\ of\ IPMI\ address\ %s\ and\ IPMI\ port\ %s\ has\ already\ been\ created. = Baremetal Chassis of IPMI address {0} and IPMI port {1} has already been created.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:85
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ does\ not\ exist. = Cluster[uuid:{0}] does not exist.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:89
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ a\ baremetal\ cluster. = Cluster[uuid:{0}] is not a baremetal cluster.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:95
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ Enabled. = Cluster[uuid:{0}] is not Enabled.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:129
# args: address,port
IPMI\ Address\ and\ Port\ %s\:%s\ already\ exists. = IPMI Address and Port {0}:{1} already exists.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:142
# args: msg.getUuid()
Baremetal\ chassis[uuid\:%s]\ has\ already\ been\ allocated,\ do\ not\ reboot\ it. = Baremetal chassis[uuid:{0}] has already been allocated, do not reboot it.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:490
# args: bmc.getUuid()
failed\ to\ connect\ to\ chassis\ [uuid\:%s],\ please\ check\ ipmi\ connection. = failed to connect to chassis [uuid:{0}], please check ipmi connection.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:598
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ on\ baremetal\ chassis[uuid\:%s] = Failed to remotely power on baremetal chassis[uuid:{0}]

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:609
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ off\ baremetal\ chassis[uuid\:%s] = Failed to remotely power off baremetal chassis[uuid:{0}]

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:620
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ reset\ baremetal\ chassis[uuid\:%s] = Failed to remotely power reset baremetal chassis[uuid:{0}]

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:642
# args: 
pxe\ server\ must\ exist\ and\ running = pxe server must exist and running

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:666
# args: bmc.getUuid()
Failed\ to\ remotely\ pxe\ boot\ chassis[uuid\:%s] = Failed to remotely pxe boot chassis[uuid:{0}]

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:841
# args: e.getMessage()
fail\ to\ load\ chassis\ info\ from\ file,\ because\:\ %s = fail to load chassis info from file, because: {0}

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:63
# args: chassis.getUuid()
No\ hardware\ info\ found\ for\ baremetal\ chassis[uuid\:%s],\ please\ choose\ another\ one. = No hardware info found for baremetal chassis[uuid:{0}], please choose another one.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:71
# args: chassis.getUuid()
Baremetal\ chassis[uuid\:%s]\ is\ not\ Enabled\ or\ Available,\ please\ choose\ another\ one. = Baremetal chassis[uuid:{0}] is not Enabled or Available, please choose another one.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:91
# args: mac
Mac\ address\ %s\ is\ invalid.\ It\ should\ be\ like\ 6c\:b3\:11\:1b\:0b\:1e = Mac address {0} is invalid. It should be like 6c:b3:11:1b:0b:1e

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:96
# args: chassis.getUuid(),mac
Baremetal\ chassis[uuid\:%s]\ doesn't\ have\ nic\ with\ mac\ address\ %s = Baremetal chassis[uuid:{0}] doesn't have nic with mac address {1}

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:104
# args: l3NetworkUuid
L3\ Network[uuid\:%s]\ doesn't\ exists = L3 Network[uuid:{0}] doesn't exists

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:118
# args: l3NetworkUuid,chassis.getUuid()
L3\ Network[uuid\:%s]\ cannot\ be\ assigned\ to\ chassis[uuid\:%s] = L3 Network[uuid:{0}] cannot be assigned to chassis[uuid:{1}]

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:138
# args: 
only\ iso\ image\ is\ supported\ in\ zstack\ baremetal\ service = only iso image is supported in zstack baremetal service

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:147
# args: 
only\ ImageStoreBackupStorage\ is\ supported\ in\ zstack\ baremetal\ service = only ImageStoreBackupStorage is supported in zstack baremetal service

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:161
# args: 
cannot\ recover\ baremetal\ instance\ that's\ not\ in\ Destroyed\ state = cannot recover baremetal instance that's not in Destroyed state

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:173
# args: 
cannot\ expunge\ baremetal\ instance\ that's\ not\ in\ Destroyed\ state = cannot expunge baremetal instance that's not in Destroyed state

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:476
# args: bmUuid
Cannot\ find\ mac\ address\ of\ pxe\ boot\ nic\ of\ baremetal\ instance[uuid\:%s] = Cannot find mac address of pxe boot nic of baremetal instance[uuid:{0}]

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:448
# args: bmUuid,pxeMac
Failed\ to\ create\ pxelinux.cfg\ for\ bm\ instance[uuid\:%s]\ with\ nic\ mac\ %s. = Failed to create pxelinux.cfg for bm instance[uuid:{0}] with nic mac {1}.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:534
# args: bmUuid
Failed\ to\ create\ ks.cfg\ for\ baremetal\ instance[uuid\:%s]. = Failed to create ks.cfg for baremetal instance[uuid:{0}].

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:574
# args: 
Failed\ to\ start\ baremetal\ pxe\ server! = Failed to start baremetal pxe server!

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:605
# args: bmc.getIpmiAddress()
Failed\ to\ remotely\ set\ bootdev\ and\ power\ on\ server\ whose\ IPMI\ address\ is\ %s. = Failed to remotely set bootdev and power on server whose IPMI address is {0}.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:624
# args: bmc.getIpmiAddress()
Failed\ to\ remotely\ power\ off\ server\ whose\ IPMI\ address\ is\ %s. = Failed to remotely power off server whose IPMI address is {0}.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1188
# args: imagePath,mountPoint
failed\ to\ mount\ %s\ to\ %s = failed to mount {0} to {1}

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1062
# args: msg.getImageUuid()
no\ enough\ space\ left\ in\ baremetal\ image\ cache\ for\ image[uuid\:%s] = no enough space left in baremetal image cache for image[uuid:{0}]

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1126
# args: msg.getImageUuid()
failed\ to\ download\ baremetal\ image\ cache\ of\ %s = failed to download baremetal image cache of {0}

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1204
# args: mountPoint
failed\ to\ copy\ vmlinuz\ from\ %s = failed to copy vmlinuz from {0}

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1373
# args: msg.getBaremetalInstanceUuid()
Failed\ to\ create\ noVNC\ token\ file\ for\ baremetal\ instance\ %s. = Failed to create noVNC token file for baremetal instance {0}.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1414
# args: msg.getBaremetalInstanceUuid()
failed\ to\ create\ proxy\ item\ for\ bm\ instance[uuid\:%s]\ inside\ /etc/nginx/conf.d/proxy.conf = failed to create proxy item for bm instance[uuid:{0}] inside /etc/nginx/conf.d/proxy.conf

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:85
# args: 
Set\ Range\ Start\ &\ End,\ or\ set\ Range\ Start\ &\ End\ &\ Netmask! = Set Range Start & End, or set Range Start & End & Netmask!

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:50
# args: begin
PXE\ Server\ DHCP\ Range\ Start\ %s\ is\ not\ valid. = PXE Server DHCP Range Start {0} is not valid.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:55
# args: end
PXE\ Server\ DHCP\ Range\ Stop\ %s\ is\ not\ valid. = PXE Server DHCP Range Stop {0} is not valid.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:60
# args: netmask
PXE\ Server\ DHCP\ Range\ Netmask\ %s\ is\ not\ valid. = PXE Server DHCP Range Netmask {0} is not valid.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:65
# args: begin,end
PXE\ Server\ DHCP\ Range\ Start\ %s\ is\ larger\ than\ Range\ Stop\ %s. = PXE Server DHCP Range Start {0} is larger than Range Stop {1}.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:70
# args: begin,end
PXE\ Server\ DHCP\ Range\ Start\ %s\ and\ Range\ Stop\ %s\ do\ not\ belong\ to\ the\ same\ subnet. = PXE Server DHCP Range Start {0} and Range Stop {1} do not belong to the same subnet.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:79
# args: begin,end,dhcpNm,dhcpNic
IP/NM\ of\ DHCP\ Range\ [%s\ ~\ %s\ \:\ %s]\ cannot\ be\ connected\ to\ DHCP\ Interface\ %s. = IP/NM of DHCP Range [{0} ~ {1} : {2}] cannot be connected to DHCP Interface {3}.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:100
# args: msg.getDhcpInterface()
PXE\ Server\ DHCP\ Interface\ %s\ does\ not\ exists,\ or\ it\ does\ not\ have\ an\ IP\ address. = PXE Server DHCP Interface {0} does not exists, or it does not have an IP address.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:109
# args: 
PXE\ Server\ already\ exists. = PXE Server already exists.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:158
# args: 
DHCP\ Netmask\ should\ be\ the\ same\ as\ netmask\ of\ DHCP\ Interface. = DHCP Netmask should be the same as netmask of DHCP Interface.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:485
# args: 
Failed\ to\ install\ pxe\ releated\ rpms. = Failed to install pxe releated rpms.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:486
# args: 
Failed\ to\ prepare\ tftp\ service. = Failed to prepare tftp service.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:487
# args: 
Failed\ to\ prepare\ vsftp\ service. = Failed to prepare vsftp service.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:488
# args: 
Failed\ to\ prepare\ nginx\ service. = Failed to prepare nginx service.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:489
# args: 
Failed\ to\ set\ iptables\ rules\ for\ pxe\ server. = Failed to set iptables rules for pxe server.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:516
# args: 
Failed\ to\ instantiate\ dnsmasq.conf\ (hosts.dhcp). = Failed to instantiate dnsmasq.conf (hosts.dhcp).

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:554
# args: 
Failed\ to\ instantiate\ dnsmasq.conf. = Failed to instantiate dnsmasq.conf.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:586
# args: 
Failed\ to\ instantiate\ vsftpd.conf. = Failed to instantiate vsftpd.conf.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:617
# args: 
Failed\ to\ instantiate\ pxelinux.cfg/default. = Failed to instantiate pxelinux.cfg/default.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:646
# args: 
Failed\ to\ instantiate\ inspector_ks.cfg. = Failed to instantiate inspector_ks.cfg.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:672
# args: 
Failed\ to\ start\ the\ dnsmasq\ of\ pxe\ server. = Failed to start the dnsmasq of pxe server.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:675
# args: 
Failed\ to\ start\ the\ vsftpd\ of\ pxe\ server. = Failed to start the vsftpd of pxe server.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:678
# args: 
Failed\ to\ start\ the\ websockify\ of\ pxe\ server. = Failed to start the websockify of pxe server.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerManagerImpl.java:681
# args: 
Failed\ to\ start\ the\ nginx\ of\ pxe\ server. = Failed to start the nginx of pxe server.

# at: src/zstack/./premium/baremetal/src/main/java/org/zstack/header/baremetal/chassis/BatchCreateBaremetalChassisJob.java:60
# args: 
create\ baremetal\ chassis\ from\ config\ file\ job\ do\ not\ support\ cancel = create baremetal chassis from config file job do not support cancel

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:63
# args: msg.getUuid()
cannot\ find\ such\ ResourceStackVO\ by\ uuid\ [%s] = cannot find such ResourceStackVO by uuid [{0}]

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:67
# args: validStatus
restart\ resource\ stack\ only\ support\ %s\ status! = restart resource stack only support {0} status!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:175
# args: 
templateContent\ and\ uuid\ mustn't\ both\ be\ empty\ or\ both\ be\ set! = templateContent and uuid mustn't both be empty or both be set!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:98
# args: validStatus
expect\ %s\ status! = expect {0} status!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:118
# args: 
templateContent\ and\ templateUuid\ mustn't\ both\ be\ empty! = templateContent and templateUuid mustn't both be empty!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:129
# args: 
templateContent\ and\ url\ mustn't\ both\ be\ empty\ or\ both\ be\ set! = templateContent and url mustn't both be empty or both be set!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:145
# args: 
only\ admin\ could\ enable/disable\ system\ StackTemplate = only admin could enable/disable system StackTemplate

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:849
# args: vo.getName()
cannot\ delete\ or\ update\ system\ template\:\ %s = cannot delete or update system template: {0}

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:380
# args: msg.getUuid()
ResourceStackVO\:\ [%s]\ has\ been\ deleted... = ResourceStackVO: [{0}] has been deleted...

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:410
# args: uuid
ResourceStackVO\ [%s]\ already\ been\ deleted! = ResourceStackVO [{0}] already been deleted!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:636
# args: 
templateContent\ must\ be\ set! = templateContent must be set!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:631
# args: template.getUuid()
template\ [%s]\ chosen\ is\ disabled = template [{0}] chosen is disabled

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:774
# args: p.getParamName(),p.getResourceType()
cannot\ find\ parameters\ for\ %s,\ which\ is\ %s\ type,\ please\ check\ parameters = cannot find parameters for {0}, which is {1} type, please check parameters

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:842
# args: 
StackTemplateVO\ has\ been\ deleted... = StackTemplateVO has been deleted...

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:865
# args: 
content\ must\ be\ set\ by\ templateContent\ or\ url! = content must be set by templateContent or url!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:883
# args: 
get\ null\ content\ input = get null content input

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:890
# args: result.getTemplateVersion()
invalid\ cloudformation\ template\ version\:\ %s = invalid cloudformation template version: {0}

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:904
# args: msg.getUuid()
StackTemplateVO\:\ [%s]\ has\ been\ deleted... = StackTemplateVO: [{0}] has been deleted...

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:20
# args: 
get\ null\ element\ in\ template\ content = get null element in template content

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:24
# args: 
template\ must\ contain\ [ZStackTemplateFormatVersion] = template must contain [ZStackTemplateFormatVersion]

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:27
# args: result.getTemplateVersion(),CloudFormationConstant.version
invalid\ ZStackTemplateFormatVersion\:\ %s,\ %s = invalid ZStackTemplateFormatVersion: {0}, {1}

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:156
# args: 
verb\ must\ contain\ '\:\:'! = verb must contain '::'!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:197
# args: t[0],last.getClass().getName()
need\ List\ for\ resource\ [%s]\ output\ here,\ but\ got\ %s. = need List for resource [{0}] output here, but got {1}.

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:221
# args: value
invalid\ dynamic\ variables,\ which\ must\ contained\ ${\:\ %s = invalid dynamic variables, which must contained $'{: {0}'

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:283
# args: 
cannot\ find\ resource\ of\ properties\ set\ before! = cannot find resource of properties set before!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:359
# args: 
Some\ actions\ are\ invalid = Some actions are invalid

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java:124
# args: e
Unable\ to\ create\ json\ template = Unable to create json template

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java:112
# args: jsonFile
cannot\ find\ such\ template\ file\:\ %s = cannot find such template file: {0}

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java:227
# args: 
no\ root\ element\ found,\ please\ check\ your\ cfn\ formation! = no root element found, please check your cfn formation!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java:346
# args: e.getMessage()
Wrong\ json\ format,\ causes\:\ %s = Wrong json format, causes: {0}

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/DecoderUtils.java:87
# args: msg
cannot\ found\ such\ msg\:\ %s\ for\ create = cannot found such msg: {0} for create

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:56
# args: 
Mapping\ value\ body\ cannot\ support\ null! = Mapping value body cannot support null!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:54
# args: 
Mapping\ value\ body\ cannot\ support\ json\ array! = Mapping value body cannot support json array!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:66
# args: 
mappingName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = mappingName must be found in result, or it is invalid cfn json.

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:83
# args: 
Mapping\ body\ cannot\ support\ json\ null! = Mapping body cannot support json null!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:81
# args: 
Mapping\ body\ cannot\ support\ non\ map\ value! = Mapping body cannot support non map value!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:70
# args: 
Description\ in\ Outputs\ must\ be\ String\ type! = Description in Outputs must be String type!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/ParameterDecoder.java:59
# args: 
paramName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = paramName must be found in result, or it is invalid cfn json.

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/ParameterDecoder.java:129
# args: 
Parameters\ root\ body\ must\ be\ json\ object! = Parameters root body must be json object!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:145
# args: 
Mappings\ root\ body\ must\ be\ json\ object! = Mappings root body must be json object!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:112
# args: 
resourceName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = resourceName must be found in result, or it is invalid cfn json.

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:123
# args: 
Parameters\ body\ cannot\ support\ null! = Parameters body cannot support null!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:68
# args: 
Resource\ value\ body\ cannot\ support\ null! = Resource value body cannot support null!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:48
# args: resource.getResourceName(),e.getKey(),resource.getResourceName()
Resource\ %s\ cannot\ depends\ on\ itself,\ please\ check\ %s\ in\ Resource\ [%s] = Resource {0} cannot depends on itself, please check {1} in Resource [{2}]

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:254
# args: 
Resource\ root\ body\ must\ be\ json\ object! = Resource root body must be json object!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:216
# args: 
Resource\ Type\ must\ be\ String! = Resource Type must be String!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/function/SelectTemplateFunction.java:83
# args: 
Fn\:\:Select\ out\ of\ range,\ please\ check\ your\ json\ file! = Fn::Select out of range, please check your json file!

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java:71
# args: e.getKey()
only\ functions\ can\ in\ Function,\ but\ found\ %s = only functions can in Function, but found {0}

# at: src/zstack/./premium/cloudformation/src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java:86
# args: 
element\ is\ null! = element is null!

# at: src/zstack/./premium/externalservice/src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java:122
# args: 
failed\ to\ HTTP\ call\ all\ prometheus\ instances = failed to HTTP call all prometheus instances

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/account/AliyunAccountBase.java:341
# args: builder.deleteCharAt(builder.length() - 1),timeout
cannot\ connect\ to\ [%s]\ in\ %d\ milliseconds,\ so\ aliyun\ openapi\ is\ unreachable. = cannot connect to [{0}] in {1} milliseconds, so aliyun openapi is unreachable.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/backup/BackupToAliyunBase.java:453
# args: 
no\ bucket\ found\ for\ backup = no bucket found for backup

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:1537
# args: e.getRequestId()
Bucket\ name\ is\ already\ existed\ (maybe\ created\ by\ other\ user),\ Please\ select\ a\ different\ name\ and\ try\ again.(aliyun\ request-id\:\ %s) = Bucket name is already existed (maybe created by other user), Please select a different name and try again.(aliyun request-id: {0})

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2228
# args: AliyunConstant.DEFAULT_ENTRY_WAIT_STATUS_TIMEOUT
entry\ is\ still\ existed\ after\ %s\ ms = entry is still existed after {0} ms

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2797
# args: 
image\ already\ existed\ remote,\ please\ use\ sync\ first. = image already existed remote, please use sync first.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:3210
# args: 
no\ identity\ zones\ can\ be\ used\ now = no identity zones can be used now

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:3345
# args: request.getRegionId()
regionId[%s]\ is\ invalid\ by\ aliyun! = regionId[{0}] is invalid by aliyun!

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/core/AliyunUtils.java:235
# args: e.getMessage()
add\ endpoint\ to\ sdk\ failed,\ due\ to\:\ %s = add endpoint to sdk failed, due to: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java:79
# args: eivo.getUuid(),eivo.getName(),eivo.getCreateDate()
ecs\ image\ existed\ remote\ and\ local,\ ecs\ image\ uuid\:\ %s,\ name\:\ %s,\ created\ time\:\ %s = ecs image existed remote and local, ecs image uuid: {0}, name: {1}, created time: {2}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java:107
# args: msg.getName(),new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(HybridUtilsForAliyun.fmtTime(rpl.getCreateDate()))
ecs\ image\ existed\ remote,\ name\:\ %s,\ created\ time\:\ %s = ecs image existed remote, name: {0}, created time: {1}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:179
# args: 
No\ Available\ instance\ types\ now. = No Available instance types now.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:302
# args: ecs.getUuid(),ecs.getEcsInstanceId()
no\ system\ disk\ found\ for\ ecs\:\ [%s],\ ecs\ id\ is\:\ [%s] = no system disk found for ecs: [{0}], ecs id is: [{1}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:65
# args: evo.getEcsStatus().toString()
Only\ delete\ ecs\ which\ status\ is\ running\ or\ stopped,\ now\ is\ %s = Only delete ecs which status is running or stopped, now is {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:70
# args: evo.getChargeType().toString()
Only\ postpaid\ ecs\ support\ delete\ remote,\ the\ indicate\ ecs\ charge\ type\ is\:\ %s = Only postpaid ecs support delete remote, the indicate ecs charge type is: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:84
# args: 
Only\ admin\ can\ set\ parameter\ [onlyZstack]\ \=\ false = Only admin can set parameter [onlyZstack] = false

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:93
# args: evo.getAvailableIpAddressCount()
vSwitch\ availableIpAddress\ is\ not\ enough,\ now\ is\ (%d) = vSwitch availableIpAddress is not enough, now is ({0})

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:97
# args: privateIp,cidr
%s\ is\ not\ in\ cidr\ range\:\ %s = {0} is not in cidr range: {1}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:103
# args: vSwitchUuid,ecs.getUuid()
private\ ip\ is\ existed\ in\ vswitch\:\ %s,\ allocated\ to\ ecs\:\ %s = private ip is existed in vswitch: {0}, allocated to ecs: {1}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:137
# args: 
bandwidth\ must\ be\ set\ while\ allocate\ publicIp = bandwidth must be set while allocate publicIp

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:140
# args: msg.getPrivateIpAddress()
%s\ is\ not\ ipv4\ address = {0} is not ipv4 address

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:143
# args: msg.getEcsRootVolumeType(),EcsInstanceConstant.validVolumeCategory.toString()
%s\ is\ not\ valid\ volume\ type,\ valid\ types\ are\ [%s] = {0} is not valid volume type, valid types are [{1}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:147
# args: 
instanceOffering\ or\ instanceType\ must\ be\ set! = instanceOffering or instanceType must be set!

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/EcsInstanceManagerImpl.java:375
# args: rly1.getVncUrl()
decode\ url\ failed\:\ %s = decode url failed: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/ExportImageFromBSFlow.java:52
# args: 
image\ has\ been\ deleted! = image has been deleted!

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/StartEcsInstancePublicFlow.java:81
# args: ecs.getUuid()
ecs\ [%s]\ start\ failed,\ skip\ modify\ vnc\ password = ecs [{0}] start failed, skip modify vnc password

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/ecs/StartEcsInstancePublicFlow.java:97
# args: ecs.getUuid(),reply.getError().getCode(),reply.getError().getDetails()
modify-ecs-[%s]-console-vnc-password-failed,\ due\ to\ [code\:\ %s,\ details\:\ %s] = modify-ecs-[{0}]-console-vnc-password-failed, due to [code: {1}, details: {2}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/identityzone/CreateIdentityZoneInDBFlow.java:47
# args: izvo.getZoneId(),izvo.getDataCenterUuid()
izone[%s]\ already\ existed\ in\ datacenter[%s] = izone[{0}] already existed in datacenter[{1}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/identityzone/SelectValidIdentityZoneFlow.java:50
# args: 
no\ identity\ chosen,\ may\ be\ stock\ problems = no identity chosen, may be stock problems

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:70
# args: 
the\ operation\ only\ custom\ image = the operation only custom image

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:79
# args: 
Only\ system\ disks\ can\ create\ mirrors = Only system disks can create mirrors

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:129
# args: 
can\ not\ delete\ ecs\ system\ image\ remote = can not delete ecs system image remote

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:140
# args: 
Only\ support\ ImageStoreBackupStorage = Only support ImageStoreBackupStorage

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:143
# args: 
image\ name\ cannot\ starts\ with\ http\://\ or\ https\:// = image name cannot starts with http:// or https://

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:156
# args: imageUuid
no\ backup\ storage\ found\ for\ imageUuid\:\ %s = no backup storage found for imageUuid: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:160
# args: imageUuid
exceeded\ backup\ storage\ found\ for\ the\ imageUuid\:\ %s,\ please\ indicate\ it\ manually = exceeded backup storage found for the imageUuid: {0}, please indicate it manually

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:171
# args: platform,EcsImageConstant.ECS_IMAGE_PLATFORM.getValid()
valid\ platform\:[%s]\ for\ aliyun\ image\ import,\ valid\ value\ are\:\ [%s] = valid platform:[{0}] for aliyun image import, valid value are: [{1}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:176
# args: ivo.getUuid()
image\ [%s]\ is\ not\ enable\ now = image [{0}] is not enable now

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java:308
# args: msg.getDataCenterUuid()
no\ ossbucket\ attached\ to\ the\ datacenter\:\ %s = no ossbucket attached to the datacenter: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java:346
# args: msg.getImageUuid(),msg.getDataCenterUuid()
the\ indicated\ image\ [%s]\ is\ importing\ to\ datacenter\ [%s]\ now... = the indicated image [{0}] is importing to datacenter [{1}] now...

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:533
# args: eipVo.getAllocateResourceUuid()
ecs\ instance[%s]\ isn't\ existed,\ please\ check\ it. = ecs instance[{0}] isn't existed, please check it.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:537
# args: ecsVo.getUuid(),ecsVo.getEcsStatus()
Only\ ecs\ instances\ that\ are\ in\ the\ running\ and\ stopped\ status\ can\ detach\ the\ eip\ ,\ but\ the\ ecs\ [%s]\ status\ is\ [%s]\ now\  = Only ecs instances that are in the running and stopped status can detach the eip , but the ecs [{0}] status is [{1}] now 

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:2860
# args: msg.getUuid()
virtual\ border\:\ %s\ has\ been\ deleted = virtual border: {0} has been deleted

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:3389
# args: tupleCidr,msg.getNextHopUuid()
destination\ cidr\ [%s]\ is\ existed\ and\ point\ to\ another\ instance-id\ [%s],\ please\ check\ or\ delete\ it\ first = destination cidr [{0}] is existed and point to another instance-id [{1}], please check or delete it first

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:3902
# args: evo.getUuid(),evo.getEcsStatus()
Only\ esc\ instances\ that\ are\ in\ the\ running\ and\ stopped\ status\ can\ attach\ the\ eip\ ,\ but\ the\ ecs\ [%s]\ status\ is\ [%s]\ now\  = Only esc instances that are in the running and stopped status can attach the eip , but the ecs [{0}] status is [{1}] now 

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/AliyunConnectionManagerImpl.java:585
# args: msg.getVbrUuid()
Vbr\:\ [%s]\ is\ in\ create\ connection\ progress,\ please\ wait... = Vbr: [{0}] is in create connection progress, please wait...

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java:80
# args: tuple.get(0, String.class),msg.getVbrUuid(),vpcCidr
custom\ cidr\ [%s]\ is\ already\ existed\ in\ vbr\ [%s],\ it\ is\ overlapped\ with\ target\ cidr\ [%s],\ please\ check\ and\ delete\ it\ first. = custom cidr [{0}] is already existed in vbr [{1}], it is overlapped with target cidr [{2}], please check and delete it first.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java:69
# args: tuple.get(0, String.class),vRouterUuid,cidr
custom\ cidr\ [%s]\ is\ already\ existed\ in\ vrouter\ [%s],\ it\ is\ overlapped\ with\ target\ cidr\ [%s],\ please\ check\ and\ delete\ it\ first. = custom cidr [{0}] is already existed in vrouter [{1}], it is overlapped with target cidr [{2}], please check and delete it first.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java:65
# args: vRouterUuid
local\ cidr\ and\ entry\ is\ already\ existed\ in\ vrouter\ [%s],\ skip\ create\ entry = local cidr and entry is already existed in vrouter [{0}], skip create entry

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:50
# args: msg.getL3networkUuid()
No\ Such\ Cidr\ found\ for\ l3network\:\ %s = No Such Cidr found for l3network: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:40
# args: msg.getL3networkUuid()
No\ Such\ VRouter\ nic\ found\ for\ l3network\:\ %s = No Such VRouter nic found for l3network: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:43
# args: msg.getUuid()
no\ such\ vpc\ found\ for\:\ %s = no such vpc found for: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:48
# args: msg.getUuid()
no\ such\ vm\ found\ for\:\ %s = no such vm found for: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:53
# args: msg.getUuid()
no\ such\ vbr\ found\ for\:\ %s = no such vbr found for: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:58
# args: msg.getUuid()
no\ such\ l3network\ found\ for\:\ %s = no such l3network found for: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:62
# args: msg.getResourceType()
not\ a\ supported\ resource\ type\:\ %s = not a supported resource type: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:68
# args: 
Only\ admin\ can\ create\ connections = Only admin can create connections

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:72
# args: msg.getCpeIp()
CpeIp\ must\ be\ ipv4\ address,\ but\ now\ is\ %s = CpeIp must be ipv4 address, but now is {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:76
# args: 
cpeIp\ must\ be\ ipv4\ address = cpeIp must be ipv4 address

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:82
# args: msg.getL3networkUuid(),msg.getVpcUuid()
l3network\ %s\ and\ vpc\ %s\ already\ connected,\ please\ check\ it = l3network {0} and vpc {1} already connected, please check it

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/network/vpn/AliyunVpcVpnBase.java:955
# args: 
vpn\ gateway\ and\ user\ gateway\ are\ not\ in\ the\ same\ dataCenterUuid! = vpn gateway and user gateway are not in the same dataCenterUuid!

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java:33
# args: msg.getBucketName(),msg.getDataCenterUuid()
ossBucket\ [%s]\ is\ already\ added\ in\ dataCenter\ [%s] = ossBucket [{0}] is already added in dataCenter [{1}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java:41
# args: ovo.getUuid()
OssBucket[%s]\ is\ not\ attached. = OssBucket[{0}] is not attached.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java:164
# args: 
oss\ bucket\ is\ not\ empty! = oss bucket is not empty!

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java:369
# args: old.getUuid(),old.getDataCenterUuid()
There\ is\ a\ current\ ossbucket[%s]\ for\ dataCenter[%s]\ already\ attached,\ update\ to\ an\ other. = There is a current ossbucket[{0}] for dataCenter[{1}] already attached, update to an other.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:62
# args: 
Root\ volume\ cannot\ be\ deleted = Root volume cannot be deleted

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:83
# args: 
Cannot\ set\ the\ disk's\ deleteWithInstance\ property\ to\ false\ when\ the\ category\ property\ of\ the\ disk\ is\ cloud\ and\ portable\ property\ is\ false = Cannot set the disk's deleteWithInstance property to false when the category property of the disk is cloud and portable property is false

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:78
# args: 
Cannot\ set\ the\ disk's\ deleteWithInstance\ property\ to\ false\ when\ the\ category\ property\ of\ the\ disk\ is\ ephemeral = Cannot set the disk's deleteWithInstance property to false when the category property of the disk is ephemeral

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:95
# args: msg.getUuid()
The\ disk\ [%s]\ is\ not\ attach\ on\ any\ instance\  = The disk [{0}] is not attach on any instance 

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:121
# args: msg.getEcsUuid()
The\ state\ of\ the\ ecs\ [%s]\ instance\ must\ be\ running\ or\ stopped = The state of the ecs [{0}] instance must be running or stopped

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:105
# args: 
Only\ data\ disk\ can\ be\ mounted\ on\ ecs = Only data disk can be mounted on ecs

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:109
# args: 
The\ disk\ not\ be\ attach\ on\ any\ ecs = The disk not be attach on any ecs

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:143
# args: 
Non-independent\ disk\ can\ only\ be\ destroyed\ with\ instances = Non-independent disk can only be destroyed with instances

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:126
# args: 
Disk\ and\ ecs\ instances\ must\ be\ in\ the\ same\ zone = Disk and ecs instances must be in the same zone

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:130
# args: msg.getDiskUuid(),msg.getEcsUuid()
The\ disk\ [%s]\ is\ already\ mounted\ on\ the\ instance\ [%s] = The disk [{0}] is already mounted on the instance [{1}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:135
# args: 
Only\ data\ disk\ can\ attach\ to\ ecs = Only data disk can attach to ecs

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:139
# args: 
Cannot\ attach\ disk\ when\ in\ use = Cannot attach disk when in use

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:154
# args: 
The\ size\ and\ snapshot\ id\ in\ the\ request\ parameter\ must\ select\ one\ of\ the\ items\ to\ specify\ the\ size\ of\ the\ disk\ or\ create\ a\ disk\ using\ the\ snapshot. = The size and snapshot id in the request parameter must select one of the items to specify the size of the disk or create a disk using the snapshot.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:167
# args: 
Not\ allowed\ create\ disk\ on\ root\ volume\ snapshot = Not allowed create disk on root volume snapshot

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:176
# args: 
the\ disk\ name\ or\ description\ cannot\ set\ start\ with\ 'http\://'\ or\ 'https\://'\  = the disk name or description cannot set start with 'http://' or 'https://' 

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/aliyun/storage/snapshot/AliyunSnapshotApiInterceptor.java:41
# args: 
The\ operation\ allows\ only\ when\ ecs\ state\ of\ the\ ecs\ instance\ status\ be\ running\ or\ stopped = The operation allows only when ecs state of the ecs instance status be running or stopped

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:85
# args: msg.getKey(),accountUuid
key\:\ [%s]\ already\ existed\ by\ accountUuid\:\ [%s] = key: [{0}] already existed by accountUuid: [{1}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:61
# args: msg.getName()
name\:\ [%s]\ already\ existed,\ please\ choose\ another\ name = name: [{0}] already existed, please choose another name

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java:50
# args: msg.getRegionId(),ak
regionId\ [%s]\ already\ created\ by\ ak\ [%s] = regionId [{0}] already created by ak [{1}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/datacenter/DataCenterManagerImpl.java:95
# args: msg.getUuid()
DataCenter\ [%s]\ is\ still\ in\ sync\ progress,\ please\ wait. = DataCenter [{0}] is still in sync progress, please wait.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:47
# args: msg.getZoneId(),izo.getUuid()
identity\ zone\ [%s]\ already\ existed,\ uuid\ is\:\ %s = identity zone [{0}] already existed, uuid is: {1}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:72
# args: 
either\ dataCenterUuid\ or\ regionId\ should\ be\ set,\ please\ check\ the\ parameters. = either dataCenterUuid or regionId should be set, please check the parameters.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/identityzone/IdentityZoneManagerImpl.java:108
# args: msg.getUuid()
IdentityZone\ [%s]\ is\ still\ in\ sync\ progress,\ please\ wait. = IdentityZone [{0}] is still in sync progress, please wait.

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridEipCascadeExtension.java:88
# args: 
EcsInstance\ must\ be\ running\ or\ stopped\ while\ deleting\ eip\  = EcsInstance must be running or stopped while deleting eip 

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:86
# args: vbri.getUuid(),vbri.getDataCenterUuid(),vrouteri.getUuid(),vrouteri.getDataCenterUuid()
router\ interface\ must\ be\ in\ the\ same\ datacenter,\ but\ ri[%s]\ is\ in\ dc[%s]\ and\ ri[%s]\ is\ in\ dc[%s] = router interface must be in the same datacenter, but ri[{0}] is in dc[{1}] and ri[{2}] is in dc[{3}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:96
# args: vrouteri.getUuid(),vrouteri.getStatus()
router\ interface[%s]\ status\ is\ not\ idle,\ it\ is\ %s = router interface[{0}] status is not idle, it is {1}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:104
# args: vrouteri.getUuid(),vrouteri.getOppositeInterfaceUuid()
router\ interface[%s]\ already\ has\ a\ connection,\ it\ is\ %s = router interface[{0}] already has a connection, it is {1}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:112
# args: 
accessPointUuid\ cannot\ be\ null\ if\ the\ router\ interface\ on\ VBR\ type\ router = accessPointUuid cannot be null if the router interface on VBR type router

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:186
# args: 
cannot\ delete\ system\ entry = cannot delete system entry

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:192
# args: 
only\ support\ intranet\ rule\ in\ vpc = only support intranet rule in vpc

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:197
# args: msg.getCidr()
%s\ is\ not\ a\ valid\ cidr = {0} is not a valid cidr

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:207
# args: 
security\ group\ rule\ already\ existed = security group rule already existed

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:213
# args: msg.getDstCidrBlock()
dstCidrBlock[%s]\ is\ not\ a\ valid\ cidr = dstCidrBlock[{0}] is not a valid cidr

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:242
# args: msg.getNextHopType()
next\ hop\ type\ [%s]\ not\ supported\ now! = next hop type [{0}] not supported now!

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:238
# args: msg.getNextHopUuid()
no\ such\ vpn\ gateway\:\ %s = no such vpn gateway: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:227
# args: rivo.getvRouterType().toString(),msg.getvRouterType()
nexthop\ routerInterface\ belongs\ to\ %s,\ but\ the\ entry\ belongs\ to\ %s = nexthop routerInterface belongs to {0}, but the entry belongs to {1}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:220
# args: msg.getNextHopUuid()
no\ such\ ecs\ instance\:\ %s = no such ecs instance: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:252
# args: 
virtual\ border\ router\ only\ support\ routerinterface\ as\ next\ hop\ type = virtual border router only support routerinterface as next hop type

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:272
# args: msg.getCidrBlock(),vpcCidr
vswitch's\ cidr\ [%s]\ not\ in\ the\ vpc's\ [%s] = vswitch's cidr [{0}] not in the vpc's [{1}]

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:279
# args: old.getUuid()
cidr\ is\ overlap\ by\ another\ vswitch\:\ %s = cidr is overlap by another vswitch: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:292
# args: msg.getCidrBlock()
invalid\ CidrBlock\:\ %s,\ which\ must\ subnet\ in\ '10.0.0.0/8',\ '172.16.0.0/12',\ '192.168.0.0/16' = invalid CidrBlock: {0}, which must subnet in '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16'

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:308
# args: msg.getvRouterUuid()
no\ such\ virtual\ router\:\ %s = no such virtual router: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:303
# args: msg.getvRouterUuid()
no\ such\ virtual\ border\ router\:\ %s = no such virtual border router: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:315
# args: msg.getLocalGatewayIp()
localGateway\ is\ not\ IPv4\:\ %s = localGateway is not IPv4: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:318
# args: msg.getPeerGatewayIp()
peerGateway\ is\ not\ IPv4\:\ %s = peerGateway is not IPv4: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:321
# args: msg.getPeeringSubnetMask()
peerGateway\ is\ not\ subnet\ mask\:\ %s = peerGateway is not subnet mask: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:325
# args: msg.getVlanId()
vlanId\ is\ not\ number\:\ %s = vlanId is not number: {0}

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:335
# args: msg.getEcsUuid(),msg.getEipUuid(),hevo.getAllocateResourceUuid()
couldn't\ attach\ eip\ to\ ecs\:\ [%s]\ ,\ eip\ \:[%s]\ already\ attached\ ecs\:[%s]\  = couldn't attach eip to ecs: [{0}] , eip :[{1}] already attached ecs:[{2}] 

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:340
# args: msg.getEcsUuid()
ecs\ [%s]\ already\ has\ public\ ip\ now = ecs [{0}] already has public ip now

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:346
# args: msg.getEipUuid(),msg.getEcsUuid()
couldn't\ attach\ eip\ [%s]\ to\ ecs\:\ [%s]\ ,\ ecs\ is\ already\ attached = couldn't attach eip [{0}] to ecs: [{1}] , ecs is already attached

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:353
# args: msg.getEipUuid(),msg.getEcsUuid()
eip[%s]\ and\ ecs[%s]\ should\ be\ in\ the\ same\ dataCenter\  = eip[{0}] and ecs[{1}] should be in the same dataCenter 

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:362
# args: msg.getEipUuid()
couldn't\ detach\ eip\ \:[%s],\ it\ is\ not\ attached\ on\ any\ instance\  = couldn't detach eip :[{0}], it is not attached on any instance 

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:45
# args: msg.getId()
%s\ is\ not\ a\ valid\ ipv4\ address = {0} is not a valid ipv4 address

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:51
# args: 
localCidr\ must\ be\ Cidr! = localCidr must be Cidr!

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:55
# args: 
remoteCidr\ must\ be\ Cidr! = remoteCidr must be Cidr!

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:62
# args: 
localCidr\ and\ remoteCidr\ must\ be\ Cidr! = localCidr and remoteCidr must be Cidr!

# at: src/zstack/./premium/hybrid/src/main/java/org/zstack/hybrid/network/vpn/VpcVpnGatewayCascadeExtension.java:80
# args: gateways.get(0).getUuid()
vpngateway\ [%s]\ existed,\ cannot\ delete\ remote = vpngateway [{0}] existed, cannot delete remote

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:202
# args: msg.getName()
wrong\ virtual\ ID[name\:%s],\ not\ existing\ or\ wrong\ password = wrong virtual ID[name:{0}], not existing or wrong password

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:207
# args: 
additional\ authentication\ failed = additional authentication failed

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:240
# args: msg.getProjectName()
project[name\:%s]\ not\ existing = project[name:{0}] not existing

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:252
# args: msg.getSession().getUserUuid()
wrong\ virtual\ ID[uuid\:%s],\ not\ existing\ or\ wrong\ password = wrong virtual ID[uuid:{0}], not existing or wrong password

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:256
# args: vid.getName()
virtual\ ID[name\:%s]\ is\ disabled = virtual ID[name:{0}] is disabled

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:261
# args: vid.getName(),msg.getProjectName()
virtual\ ID[name\:%s]\ not\ belonging\ to\ the\ project[name\:%s] = virtual ID[name:{0}] not belonging to the project[name:{1}]

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/IAM2OrganizationBase.java:107
# args: puuid,self.getUuid()
organization[uuid\:%s]\ is\ parent\ of\ the\ organization[uuid\:%s],\ cannot\ set\ it\ as\ a\ child\ organization = organization[uuid:{0}] is parent of the organization[uuid:{1}], cannot set it as a child organization

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/IAM2ProjectBase.java:95
# args: self.getUuid(),self.getName(),self.getState(),msg.getClass()
the\ project[uuid\:\ %s,\ name\:%s]\ is\ in\ state\ of\ %s\ which\ disallows\ the\ operation[%s] = the project[uuid: {0}, name:{1}] is in state of {2} which disallows the operation[{3}]

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java:271
# args: 
only\ admin\ and\ the\ virtual\ ID\ itself\ can\ do\ the\ update = only admin and the virtual ID itself can do the update

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:33
# args: attr.getValue()
attribute\ name\ cannot\ be\ null,\ value[%s] = attribute name cannot be null, value[{0}]

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:37
# args: attr.getName()
attribute\ name[%s]\ exceed\ the\ max\ length\ of\ 2048\ chars = attribute name[{0}] exceed the max length of 2048 chars

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:40
# args: attr.getName(),attr.getValue()
attribute[name\:%s]\ value[%s]\ exceed\ the\ max\ length\ of\ 2048\ chars = attribute[name:{0}] value[{1}] exceed the max length of 2048 chars

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:124
# args: 
admin\ is\ a\ reserved\ name,\ please\ use\ another\ name = admin is a reserved name, please use another name

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:132
# args: msg.getName()
invalid\ name[%s],\ there\ has\ been\ a\ project\ or\ account\ with\ the\ same\ name = invalid name[{0}], there has been a project or account with the same name

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:147
# args: attrs.get(0).getVirtualIDUuid()
virtual\ ID[uuid\:%s]\ is\ project\ admin\ that\ cannot\ be\ removed\ from\ the\ project = virtual ID[uuid:{0}] is project admin that cannot be removed from the project

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:158
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ group = attribute[uuid:{0}] is not for any group

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:166
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ organization = attribute[uuid:{0}] is not for any organization

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:174
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ project = attribute[uuid:{0}] is not for any project

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:182
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ virtual\ ID = attribute[uuid:{0}] is not for any virtual ID

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:202
# args: 
retire\ policy\ must\ be\ deleted\ before\ pull\ the\ project\ out\ of\ Retired\ state = retire policy must be deleted before pull the project out of Retired state

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:214
# args: state
login\ is\ prohibited\ because\ the\ project\ is\ in\ state\ of\ %s = login is prohibited because the project is in state of {0}

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:228
# args: name
no\ quota[name\:%s]\ found = no quota[name:{0}] found

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:252
# args: msg.getUuid()
organization[uuid\:%s]\ is\ a\ Company\ that\ cannot\ have\ parent\ organization = organization[uuid:{0}] is a Company that cannot have parent organization

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:264
# args: msg.getName()
duplicate\ virtualID\ name[%s] = duplicate virtualID name[{0}]

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:282
# args: msg.getName()
duplicate\ project\ name[%s] = duplicate project name[{0}]

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:290
# args: msg.getName()
invalid\ project\ name[%s],\ there\ has\ been\ an\ account\ or\ project\ with\ the\ same\ name = invalid project name[{0}], there has been an account or project with the same name

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:307
# args: uuids
organizations%s\ are\ company\ that\ cannot\ be\ children\ of\ other\ organization = organizations{0} are company that cannot be children of other organization

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:370
# args: wrong,msg.getGroupUuid()
virtual\ ids%s\ not\ in\ the\ project\ the\ group[uuid\:%s]\ belongs\ to = virtual ids{0} not in the project the group[uuid:{1}] belongs to

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/SystemAttributes.java:53
# args: 
attribute[name\:%s]\ is\ a\ system\ attribute\ that\ cannot\ be\ updated = attribute[name:{0}] is a system attribute that cannot be updated

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:32
# args: inv.getValue()
virtual\ ID[uuid\:%s]\ not\ existing = virtual ID[uuid:{0}] not existing

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:37
# args: oinv.getOrganizationUuid()
organization[uuid\:%s]\ already\ has\ a\ supervisor = organization[uuid:{0}] already has a supervisor

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/project/Retire.java:99
# args: 
invalid\ value,\ no\ 'at'\ or\ 'after'\ found = invalid value, no 'at' or 'after' found

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/project/Retire.java:104
# args: value
invalid\ value,\ %s = invalid value, {0}

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/project/Retire.java:110
# args: ss[0],Means.values()
invalid\ means[%s],\ allowed\ means\ are\ %s = invalid means[{0}], allowed means are {1}

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/project/Retire.java:125
# args: timeValue
invalid\ time[%s],\ it\ should\ be\ in\ format\ of\ for\ example\ 10m,\ 1h,\ 2d = invalid time[{0}], it should be in format of for example 10m, 1h, 2d

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/project/Retire.java:119
# args: timeValue
invalid\ date[%s],\ it\ should\ be\ in\ format\ of\ yyyy-MM-dd\ HH\:mm\:ss = invalid date[{0}], it should be in format of yyyy-MM-dd HH:mm:ss

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/project/Retire.java:130
# args: timeValue,dateFormat.format(new Timestamp(System.currentTimeMillis()))
invalid\ date\ or\ time[%s],\ it\ cannot\ be\ before\ current\ time[%s] = invalid date or time[{0}], it cannot be before current time[{1}]

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/project/Retire.java:237
# args: pinv.getUuid(),pinv.getName()
the\ project[uuid\:%s,\ name\:%s]\ already\ has\ a\ retire\ policy = the project[uuid:{0}, name:{1}] already has a retire policy

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/virtualid/PlatformAdmin.java:44
# args: idinv.getVirtualIDUuid()
virtual\ ID[uuid\:%s]\ is\ already\ a\ platform\ admin = virtual ID[uuid:{0}] is already a platform admin

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/virtualid/PlatformAdminZoneRelation.java:36
# args: inv.getValue()
cannot\ find\ zone[uuid\:%s] = cannot find zone[uuid:{0}]

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java:62
# args: inv.getValue()
project[uuid\:%s]\ already\ has\ a\ project\ admin = project[uuid:{0}] already has a project admin

# at: src/zstack/./premium/iam2/src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java:74
# args: inv.getValue()
project[uuid\:%s]\ not\ existing = project[uuid:{0}] not existing

# at: src/zstack/./premium/loginControl/src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:198
# args: results.size()
Consult\ result\ expect\ to\ be\ 1,\ but\ actually\ %s = Consult result expect to be 1, but actually {0}

# at: src/zstack/./premium/loginControl/src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:245
# args: 
Wrong\ verify\ code = Wrong verify code

# at: src/zstack/./premium/loginControl/src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:318
# args: msg.getCaptchaUuid(),msg.getResourceName()
can\ not\ get\ suitable\ captcha\ with[uuid\:%s],\ related\ to\ resourceName[uuid\:%s] = can not get suitable captcha with[uuid:{0}], related to resourceName[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/apimediator/ApiValidator.java:60
# args: hostname,newBS
More\ than\ one\ BackupStorage\ on\ the\ same\ host\ identified\ by\ hostname.\ There\ has\ been\ a\ SftpBackupStorage\ [hostname\:%s]\ existing.\ The\ BackupStorage\ type\ to\ be\ added\ is\ %s.\  = More than one BackupStorage on the same host identified by hostname. There has been a SftpBackupStorage [hostname:{0}] existing. The BackupStorage type to be added is {1}. 

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/apimediator/ApiValidator.java:68
# args: hostname,newBS
More\ than\ one\ BackupStorage\ on\ the\ same\ host\ identified\ by\ hostname.\ There\ has\ been\ an\ ImageStoreBackupStorage\ [hostname\:%s]\ existing.\ The\ BackupStorage\ type\ to\ be\ added\ is\ %s.\  = More than one BackupStorage on the same host identified by hostname. There has been an ImageStoreBackupStorage [hostname:{0}] existing. The BackupStorage type to be added is {1}. 

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/billing/BillingApiInterceptor.java:46
# args: 
the\ start\ date\ must\ be\ greater\ than\ the\ end\ date = the start date must be greater than the end date

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/billing/BillingApiInterceptor.java:102
# args: 
the\ minimal\ resource\ unit\ is\ megabyte,\ cannot\ be\ byte = the minimal resource unit is megabyte, cannot be byte

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/billing/BillingApiInterceptor.java:110
# args: 
price\ must\ be\ 0\ and\ 9999.99 = price must be 0 and 9999.99

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/billing/BillingApiInterceptor.java:117
# args: 
gpu\ price\ must\ be\ bound\ to\ gpu\ uuid\ empty = gpu price must be bound to gpu uuid empty

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/billing/BillingApiInterceptor.java:124
# args: msg.getSystemTags()
gpu\ price\ must\ be\ bound\ to\ gpu\ uuid\ %s = gpu price must be bound to gpu uuid {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:296
# args: resourceUuid,affinityGroupUuid
VM\ [uuid\:\ %s]\ has\ already\ been\ added\ to\ affinityGroup\ [uuid\:\ %s] = VM [uuid: {0}] has already been added to affinityGroup [uuid: {1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:313
# args: hostUuid,affinityGroupUuid
There\ are\ other\ VMs\ on\ this\ host\ [uuid\:\ %s]\ belonging\ to\ same\ affinityGroup\ [%s] = There are other VMs on this host [uuid: {0}] belonging to same affinityGroup [{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:342
# args: self.getUuid(),host.getUuid(),vmUuid
affinityGroup\ [uuid\:%s]\ reserve\ host\ [uuid\:%s]\ for\ vm\ [uuid\:\ %s]\ failed = affinityGroup [uuid:{0}] reserve host [uuid:{1}] for vm [uuid: {2}] failed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:412
# args: inv.getResourceUuid(),self.getUuid()
vm\ [uuid\:%s]\ doesn't\ satisfy\ the\ affinityGroup\ [uuid\:%s] = vm [uuid:{0}] doesn't satisfy the affinityGroup [uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:42
# args: VmInstanceState.Running.toString(),VmInstanceState.Stopped.toString(),state.toString()
Vm\ can\ change\ its\ affinityGroup\ only\ in\ state\ [%s,%s],\ but\ vm\ is\ in\ state\ [%s] = Vm can change its affinityGroup only in state [{0},{1}], but vm is in state [{2}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:52
# args: msg.getUuid(),agUuid
Vm\ [uuid\:\ %s]\ is\ already\ added\ to\ affinityGroup\ [uuid\:\ %s] = Vm [uuid: {0}] is already added to affinityGroup [uuid: {1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:77
# args: affinityGroupUuid
AffinityGroup\ [uuid\:\ %s]\ does\ not\ existed = AffinityGroup [uuid: {0}] does not existed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:81
# args: 
Can\ not\ operate\ on\ affinity\ group\ created\ by\ system = Can not operate on affinity group created by system

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:88
# args: affinityGroupUuid
Can\ not\ operate\ on\ affinityGroup\ [uuid\:\ %s]\ which\ is\ not\ enabled = Can not operate on affinityGroup [uuid: {0}] which is not enabled

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/affinityGroup/AffinityGroupManagerImpl.java:100
# args: msg.getAffinityGroupUuid()
cannot\ find\ the\ affinity\ group[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the affinity group[uuid:{0}], it may have been deleted

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/cpuPinning/CpuPinningBasicFactory.java:45
# args: r
invalid\ cpu\ pinning\ ref[%s].\ correct\ example\ is\ [1,3\:3-6,^5] = invalid cpu pinning ref[{0}]. correct example is [1,3:3-6,^5]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/cpuPinning/CpuPinningBasicFactory.java:82
# args: pCpuNum
the\ host\ vm\ located\ only\ have\ %\ CPUs = the host vm located only have % CPUs

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/cpuPinning/CpuRangeSet.java:58
# args: word
Invalid\ cpuset\ [%s] = Invalid cpuset [{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/host/MevocoHostBase.java:154
# args: host.getUuid(),host.getName(),host.getState()
host[uuid\:%s,\ name\:%s]\ is\ in\ state[%s],\ cannot\ perform\ required\ operation = host[uuid:{0}, name:{1}] is in state[{2}], cannot perform required operation

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/host/MevocoHostBase.java:197
# args: msg.getHostUuid()
host[uuid\:%s]\ can\ not\ find = host[uuid:{0}] can not find

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/host/MevocoHostBase.java:205
# args: vmInstanceVO.getUuid(),vmInstanceVO.getState()
only\ support\ do\ live\ snapshot\ on\ vm\ state[%s],\ but\ vm\ is\ on\ [%s]\ state = only support do live snapshot on vm state[{0}], but vm is on [{1}] state

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/host/MevocoHostBase.java:309
# args: ret.getError()
operation\ error,\ because\ %s = operation error, because {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/host/MevocoHostBaseFactory.java:68
# args: huuid,cidr
host[uuid\:%s]\ has\ multi\ ips\ in\ cidr[%s] = host[uuid:{0}] has multi ips in cidr[{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:180
# args: clusterUuids,hypervisorType
cluster[uuids\:%s,\ hypervisorType\:%s]\ are\ not\ exist! = cluster[uuids:{0}, hypervisorType:{1}] are not exist!

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:50
# args: 
not\ dest\ host\ found\ in\ db,\ can't\ send\ change\ password\ cmd\ to\ the\ host! = not dest host found in db, can't send change password cmd to the host!

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:51
# args: 
not\ system\ tag\ found\ on\ vm,\ vm\ must\ have\ the\ following\ system\ tag\:\ qemuga,\ if\ you\ installed\ qemu-ga\ yourself,\ please\ use\ CreateSystemTag\ first. = not system tag found on vm, vm must have the following system tag: qemuga, if you installed qemu-ga yourself, please use CreateSystemTag first.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:54
# args: 
not\ account\ preference\ found,\ \ send\ change\ password\ cmd\ to\ the\ host! = not account preference found,  send change password cmd to the host!

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:479
# args: 
can\ not\ find\ image\ store\ backup\ storage,\ unable\ to\ commit\ volume\ snapshot\ as\ image = can not find image store backup storage, unable to commit volume snapshot as image

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:716
# args: inv.getInventory().getUuid(),state
vm\ running\ on\ local\ storage\ %s\ state\ is\ %s\ not\ running/stopped/paused,\ can\ not\ attach\ volume = vm running on local storage {0} state is {1} not running/stopped/paused, can not attach volume

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:1300
# args: 
direction\ must\ be\ set\ to\ in\ or\ out = direction must be set to in or out

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:1342
# args: inbound
inboundBandwidth\ must\ be\ set\ no\ more\ than\ %s. = inboundBandwidth must be set no more than {0}.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:1353
# args: outbound
outboundBandwidth\ must\ be\ set\ no\ more\ than\ %s. = outboundBandwidth must be set no more than {0}.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:1714
# args: amsg.getVmInstanceUuid()
not\ dest\ host\ found\ in\ db\ by\ uuid\:\ %s,\ can't\ send\ change\ password\ cmd\ to\ the\ host! = not dest host found in db by uuid: {0}, can't send change password cmd to the host!

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:1742
# args: 
state\ is\ not\ correct\ while\ change\ password. = state is not correct while change password.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:149
# args: msg.getMac()
Duplicate\ mac\ address\ [%s] = Duplicate mac address [{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:159
# args: vmType
clean\ traffic\ is\ not\ supported\ for\ vm\ type\ [%s] = clean traffic is not supported for vm type [{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:85
# args: 
The\ operation\ only\ allows\ on\ user\ vm = The operation only allows on user vm

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:115
# args: msg.getVmInstanceUuid(),volumeVOS.stream().map(VolumeVO::getUuid).collect(Collectors.toList()),primaryStorageUuid,totalCapacity - snapshotsCapacity,primaryStorageVO.getCapacity().getAvailableCapacity()
there\ are\ not\ enough\ capacity\ for\ full\ vm\ clone\ to\ vm[uuid\:\ %s],\ volumes[uuid\:\ %s]\ on\ primary\ storage[uuid\:\ %s]\ required\:\ %s\ bytes,\ current\ available\ capacity\ is\ %s\ bytes = there are not enough capacity for full vm clone to vm[uuid: {0}], volumes[uuid: {1}] on primary storage[uuid: {2}] required: {3} bytes, current available capacity is {4} bytes

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:129
# args: msg.getVmNicUuid()
The\ nic\ [%s%s]\ is\ not\ mounted\ on\ the\ VM = The nic [{0}{1}] is not mounted on the VM

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:135
# args: 
The\ operation\ only\ allows\ on\ user\ vm\  = The operation only allows on user vm 

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:140
# args: vmInstanceVO.getUuid()
The\ operation\ only\ allows\ when\ vm\ [%s]\ state\ is\ stopped\  = The operation only allows when vm [{0}] state is stopped 

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:169
# args: msg.getVmInstanceUuid()
user\ has\ no\ privilege\ to\ change\ image\ of\ vm\ %s = user has no privilege to change image of vm {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:181
# args: 
do\ not\ change\ vm\ image\ when\ it's\ not\ stopped = do not change vm image when it's not stopped

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:198
# args: msg.getVmInstanceUuid()
make\ sure\ the\ primary\ storage\ vm[uuid\:%s]\ was\ on\ is\ Enabled\ and\ Connected = make sure the primary storage vm[uuid:{0}] was on is Enabled and Connected

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:215
# args: msg.getVmInstanceUuid()
make\ sure\ the\ last\ host\ vm[uuid\:%s]\ was\ on\ is\ Enabled\ and\ Connected = make sure the last host vm[uuid:{0}] was on is Enabled and Connected

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:234
# args: msg.getVmInstanceUuid(),msg.getImageUuid()
user\ has\ no\ privilege\ to\ change\ root\ volume\ of\ vm\ %s\ using\ image\ %s = user has no privilege to change root volume of vm {0} using image {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:245
# args: 
either\ uuid\ or\ account\ or\ password\ must\ be\ set = either uuid or account or password must be set

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:253
# args: msg.getDirection()
direction\ must\ be\ set\ in\ (in,\ out),\ but\ was\ %s = direction must be set in (in, out), but was {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:259
# args: 
Monitor\ number\ must\ be\ 1\ or\ 2\ or\ 4. = Monitor number must be 1 or 2 or 4.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:267
# args: 
outboundBandwidth\ and\ inboundBandwidth\ must\ be\ set\ at\ lease\ one. = outboundBandwidth and inboundBandwidth must be set at lease one.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:276
# args: msg.getUuid()
nic\ id\:\ %s\ does\ not\ exist... = nic id: {0} does not exist...

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaKvmHostSiblingChecker.java:196
# args: struct.getHostUuid(),struct.getHostIp(),errors
hosts\ failed\ to\ port\ scan\ the\ failure\ host[uuid\:%s,\ ip\:%s],\ errors\ are\ %s = hosts failed to port scan the failure host[uuid:{0}, ip:{1}], errors are {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaKvmWorker.java:79
# args: checkers.indexOf(checker) + 1,checkers.size(),checker.getClass().getSimpleName(),s.getMaxTimes() * s.getInterval()
(%d/%d)\ start\ HaHostChecker\ %s\:\ predict\ time\ is\ [%d]\ seconds = ({0}/{1}) start HaHostChecker {2}: predict time is [{3}] seconds

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaKvmWorker.java:135
# args: self.getName(),self.getUuid()
cannot\ find\ the\ host\ of\ the\ vm[name\:%s,\ uuid\:%s],\ hostUuid\ is\ null = cannot find the host of the vm[name:{0}, uuid:{1}], hostUuid is null

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaKvmWorker.java:142
# args: 
no\ HaHostChecker\ found,\ cannot\ do\ HA = no HaHostChecker found, cannot do HA

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagementNodeChecker.java:79
# args: 
the\ management\ node\ fails\ to\ scan\ the\ host = the management node fails to scan the host

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:1198
# args: vmUuid
the\ VM[uuid\:%s]\ volume\ stored\ location\ primary\ storage\ is\ in\ a\ state\ of\ maintenance = the VM[uuid:{0}] volume stored location primary storage is in a state of maintenance

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:958
# args: 
VM\ is\ started\ successfully = VM is started successfully

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:960
# args: 
Failed\ to\ start\ the\ NeverStop\ VM = Failed to start the NeverStop VM

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:166
# args: cmd.hostUuid,cmd.psUuids
From\ agent[hostUuid\:%s]\ report\:\ it\ can\ connect\ primary\ storage[uuids\:%s]\ again = From agent[hostUuid:{0}] report: it can connect primary storage[uuids:{1}] again

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:161
# args: cmd.hostUuid,cmd.psUuids
From\ agent[hostUuid\:%s]\ report\:\ it\ cannot\ connect\ primary\ storage[uuids\:%s]\ all\ VMs\ whose\ root\ volume\ in\ these\ primary\ storages\ have\ been\ killed,\ HA\ VMs\ will\ be\ migrated\ to\ other\ available\ hosts. = From agent[hostUuid:{0}] report: it cannot connect primary storage[uuids:{1}] all VMs whose root volume in these primary storages have been killed, HA VMs will be migrated to other available hosts.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:199
# args: newValue
the\ value[%s]\ is\ lesser\ than\ 0 = the value[{0}] is lesser than 0

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:373
# args: 
there\ is\ already\ a\ HA\ GC\ job\ for\ the\ VM,\ wait\ it\ to\ run = there is already a HA GC job for the VM, wait it to run

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:381
# args: HaGlobalConfig.NEVER_STOP_VM_FAILURE_RETRY_DELAY.value(Long.class)
A\ GC\ job\ is\ submitted\ to\ HA\ the\ VM[retry\ delay\:\ %s\ seconds] = A GC job is submitted to HA the VM[retry delay: {0} seconds]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:860
# args: 
HA\ is\ successfully\ completed = HA is successfully completed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:868
# args: 
Failed\ to\ HA\ the\ VM = Failed to HA the VM

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:769
# args: 
vm\ stopped\ unexpectedly,\ double\ check\ state = vm stopped unexpectedly, double check state

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:778
# args: vmUuid,hostUuid
cannot\ determine\ VM[%s]\ status\ on\ host[%s],\ try\ to\ start\ it = cannot determine VM[{0}] status on host[{1}], try to start it

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:948
# args: 
vm\ state\ is\ stopped,\ try\ to\ start\ it = vm state is stopped, try to start it

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:795
# args: vmUuid,hostUuid
VM[%s]\ is\ running\ on\ host[%s] = VM[{0}] is running on host[{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:808
# args: vmUuid,hostUuid
VM[%s]\ is\ paused\ on\ host[%s] = VM[{0}] is paused on host[{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:837
# args: vm.getHypervisorType()
the\ hypervisor[%s]\ does\ not\ support\ VM\ HA = the hypervisor[{0}] does not support VM HA

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:1094
# args: host.getUuid(),host.getName()
successfully\ cancelled\ the\ self-fencer\ on\ the\ host[uuid\:%s,\ name\:%s] = successfully cancelled the self-fencer on the host[uuid:{0}, name:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:1099
# args: host.getUuid(),host.getName(),errorCode
unable\ to\ cancel\ the\ self-fencer\ on\ the\ host[uuid\:%s,\ name\:%s],\ %s = unable to cancel the self-fencer on the host[uuid:{0}, name:{1}], {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:1132
# args: host.getUuid(),host.getName()
successfully\ setup\ the\ self-fencer\ on\ the\ host[uuid\:%s,\ name\:%s] = successfully setup the self-fencer on the host[uuid:{0}, name:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HaManagerImpl.java:1138
# args: host.getUuid(),host.getName(),errorCode
failed\ to\ setup\ the\ self-fencer\ on\ the\ host[uuid\:%s,\ name\:%s],\ %s = failed to setup the self-fencer on the host[uuid:{0}, name:{1}], {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HostCheckResult.java:49
# args: ratio,threshold,hostUuid,errors
[HA\ Worker]\:\ the\ success\ ratio[%s]\ below\ the\ threshold[%s],\ the\ host[uuid\:%s]\ is\ judged\ as\ dead,\ errors\ are\ %s.\ Start\ HA\ all\ the\ vms\ on\ this\ host\ before = [HA Worker]: the success ratio[{0}] below the threshold[{1}], the host[uuid:{2}] is judged as dead, errors are {3}. Start HA all the vms on this host before

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/HostCheckResult.java:46
# args: ratio,threshold
[HA\ worker]\:\ all\ host\ checkers\ are\ finished\ and\ the\ success\ ratio\ is\ %s\ that\ is\ greater\ than\ the\ threshold[%s];\ no\ HA\ need\ for\ the\ vms\ on\ this\ host\ before.\ Please\ wait\ for\ the\ host\ reconnected = [HA worker]: all host checkers are finished and the success ratio is {0} that is greater than the threshold[{1}]; no HA need for the vms on this host before. Please wait for the host reconnected

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/NeverStopVmGC.java:47
# args: this.getUuid(),HaGlobalConfig.NEVER_STOP_VM_NOTIFICATION_RETRY_TIMES.value(Integer.class).toString()
Never\ stop\ vm\ GC[uuid\:%s]\ executed\ over\ %s\ times,\ you\ can\ use\ DeleteGCJob\ to\ cancel\ it = Never stop vm GC[uuid:{0}] executed over {1} times, you can use DeleteGCJob to cancel it

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ha/NeverStopVmGC.java:67
# args: 
VM\ state\ is\ not\ running,\ try\ to\ start\ it = VM state is not running, try to start it

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/header/host/AddKVMHostFromConfigFileLongJob.java:49
# args: 
add\ host\ from\ file\ job\ do\ not\ support\ cancel = add host from file job do not support cancel

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:62
# args: l3NetworkUuid
Network\ [uuid\:\ %s]\ does't\ not\ have\ IPsec\ service = Network [uuid: {0}] does't not have IPsec service

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:72
# args: rcidr,tempCidr
the\ remote\ CIDR[%s]\ and\ remote\ CIDR[%s]\ are\ overlaped = the remote CIDR[{0}] and remote CIDR[{1}] are overlaped

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:96
# args: lcidr,tempCidr
the\ CIDR[%s]\ of\ local\ router\ and\ remote\ CIDR[%s]\ are\ overlaped = the CIDR[{0}] of local router and remote CIDR[{1}] are overlaped

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:109
# args: 
all\ networks\ in\ same\ IPsecConnection\ should\ be\ same\ type = all networks in same IPsecConnection should be same type

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:115
# args: L3NetworkConstant.L3_BASIC_NETWORK_TYPE
IPsecConnection\ can\ ONLY\ have\ 1\ network\ for\ %s = IPsecConnection can ONLY have 1 network for {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:126
# args: l3Uuid
L3Network\ [uuid\:\ %s]\ has\ not\ been\ attached\ to\ vpc\ router = L3Network [uuid: {0}] has not been attached to vpc router

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:132
# args: 
all\ networks\ in\ same\ IPsecConnection\ must\ be\ attached\ to\ same\ VPC\ router = all networks in same IPsecConnection must be attached to same VPC router

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:149
# args: tuples.get(0).get(0, String.class),tuples.get(0).get(1, String.class)
there\ already\ have\ ipsec\ connection[uuid\:%s,\ name\:%s]\ with\ the\ same\ vrouter\ and\ peerAddress = there already have ipsec connection[uuid:{0}, name:{1}] with the same vrouter and peerAddress

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:172
# args: msg.getVipUuid(),vip.getUseFor()
the\ vip[uuid\:%s]\ has\ been\ used\ for\ %s = the vip[uuid:{0}] has been used for {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:177
# args: msg.getPeerAddress()
the\ peerAddress[%s]\ cannot\ be\ the\ same\ to\ the\ VIP\ address = the peerAddress[{0}] cannot be the same to the VIP address

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:181
# args: msg.getPeerAddress()
the\ peerAddress[%s]\ is\ not\ an\ IPv4\ address = the peerAddress[{0}] is not an IPv4 address

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:193
# args: 
the\ authKey\ cannot\ contain\ white\ space\ and\ special\ characters\ of\ '\"`\\ = the authKey cannot contain white space and special characters of '\"`\\

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:227
# args: 
must\ include\ l3\ networks\ in\ APIAttachL3NetworksToIPsecConnectionMsg = must include l3 networks in APIAttachL3NetworksToIPsecConnectionMsg

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:234
# args: l3NetworkUuid
L3\ network\ [%s]\ is\ not\ vpc\ network,\ can\ not\ be\ attached\ or\ detached\ to\ ipsec = L3 network [{0}] is not vpc network, can not be attached or detached to ipsec

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:215
# args: l3NetworkUuid,msg.getIPsecConnectionUuid()
L3\ network\ [%s]\ can\ not\ be\ attached\ to\ ipsec\ [uuid\ \:%s]twice = L3 network [{0}] can not be attached to ipsec [uuid :{1}]twice

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:238
# args: l3NetworkUuid,msg.getIPsecConnectionUuid()
L3\ network\ [%s]\ is\ not\ be\ attached\ to\ ipsec\ [uuid\ \:%s] = L3 network [{0}] is not be attached to ipsec [uuid :{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:248
# args: cidr,msg.getIPsecConnectionUuid()
Cidr\ [%s]\ is\ already\ in\ the\ Cidrs\ of\ ipsec\ [uuid\ \:%s] = Cidr [{0}] is already in the Cidrs of ipsec [uuid :{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:262
# args: cidr,msg.getIPsecConnectionUuid()
Cidr\ [%s]\ is\ not\ in\ Cidrs\ of\ ipsec\ [uuid\ \:%s] = Cidr [{0}] is not in Cidrs of ipsec [uuid :{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:270
# args: msg.getUuid()
can\ not\ change\ state\ because\ ipsec\ [uuid\:%s]\ status\ is\ not\ ready = can not change state because ipsec [uuid:{0}] status is not ready

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:127
# args: msg.getIPsecConnectionUuid()
cannot\ find\ the\ IPsecconnection[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the IPsecconnection[uuid:{0}], it may have been deleted

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:329
# args: Long.toString(range2.getStart()),Long.toString(range2.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),msg.getVipUuid()
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ used\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ UDP = Current port range[{0}, {1}] is conflicted with used port range [{2}, {3}] with vip[uuid: {4}] protocol: UDP

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:362
# args: cidr,l3Inv.getUuid(),uuid,rCidr
cidr[%s]\ of\ attached\ L3Network\ [uuid\:%s]\ is\ overlapped\ with\ ipsec\ [uuid\:%s]\ remote\ cidr[%s] = cidr[{0}] of attached L3Network [uuid:{1}] is overlapped with ipsec [uuid:{2}] remote cidr[{3}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:279
# args: 
vyos\ doesn't\ support\ aes-192\ as\ IkeEncryptionAlgorithm,\ available\ options\ aes-128,\ aes-256,\ 3des = vyos doesn't support aes-192 as IkeEncryptionAlgorithm, available options aes-128, aes-256, 3des

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:285
# args: 
vyos\ doesn't\ support\ aes-192\ as\ PolicyEncryptionAlgorithm,\ available\ options\ aes-128,\ aes-256,\ 3des = vyos doesn't support aes-192 as PolicyEncryptionAlgorithm, available options aes-128, aes-256, 3des

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:291
# args: msg.getIkeDhGroup()
vyos\ doesn't\ support\ %d\ as\ Ike\ DhGroup\  = vyos doesn't support {0} as Ike DhGroup 

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/license/LicenseChecker.java:118
# args: 
Parse\ license\ error,\n1.\ check\ your\ private\ key\ and\ application\ code\ is\ correct\n2.\ check\ your\ license\ is\ not\ corrupted\n3.\ clear\ your\ licenses\ and\ try\ to\ reinstall\n = Parse license error,\n1. check your private key and application code is correct\n2. check your license is not corrupted\n3. clear your licenses and try to reinstall\n

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/license/LicenseManagerImpl.java:190
# args: e.getMessage()
Decode\ fail\ because\ %s = Decode fail because {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/license/LicenseManagerImpl.java:187
# args: bytes.length
Unexpected\ decoded\ license\ file\ length\:\ %d = Unexpected decoded license file length: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/license/LicenseManagerImpl.java:1173
# args: 
License\ expired = License expired

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:759
# args: l3Uuid,systemTag
L3\ network[uuid\:%s]\ not\ found.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = L3 network[uuid:{0}] not found. Please correct your system tag[{1}] of static IP

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:786
# args: cidr,fmtCidr
[%s]\ is\ not\ a\ standard\ cidr,\ do\ you\ mean\ [%s]? = [{0}] is not a standard cidr, do you mean [{1}]?

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:295
# args: supportSharedVolumePrimaryStorage,psType
for\ shareable\ volume,\ the\ only\ supported\ primary\ storage\ type\ is\ %s,\ current\ is\ %s = for shareable volume, the only supported primary storage type is {0}, current is {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:721
# args: bandwidth,Long.MAX_VALUE
invalid\ volume\ bandwidth[%s]\ is\ larger\ than\ %d = invalid volume bandwidth[{0}] is larger than {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:719
# args: bandwidth
invalid\ volume\ bandwidth[%s]\ is\ not\ a\ number = invalid volume bandwidth[{0}] is not a number

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:716
# args: bandwidth
invalid\ volume\ bandwidth[%s],\ it\ must\ be\ greater\ than\ 1024\ (include\ 1024) = invalid volume bandwidth[{0}], it must be greater than 1024 (include 1024)

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:740
# args: bandwidth
invalid\ volume\ IOPS[%s]\ is\ not\ a\ number = invalid volume IOPS[{0}] is not a number

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:742
# args: bandwidth,Long.MAX_VALUE
invalid\ volume\ IOPS[%s]\ is\ larger\ than\ %d = invalid volume IOPS[{0}] is larger than {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:737
# args: bandwidth
invalid\ volume\ IOPS[%s],\ it\ must\ be\ greater\ than\ 0 = invalid volume IOPS[{0}], it must be greater than 0

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:801
# args: hostUuid,distro,version
the\ host[uuid\:%s]'s\ operating\ system\ %s\ %s\ is\ too\ old,\ the\ QEMU\ doesn't\ support\ QoS\ of\ network\ or\ disk\ IO.\ Please\ choose\ another\ instance\ offering\ with\ no\ QoS\ configuration = the host[uuid:{0}]'s operating system {1} {2} is too old, the QEMU doesn't support QoS of network or disk IO. Please choose another instance offering with no QoS configuration

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:927
# args: newValue
invalid\ value[%s],\ it's\ not\ a\ double = invalid value[{0}], it's not a double

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:903
# args: newValue
invalid\ value[%s],\ it\ must\ be\ a\ double\ greater\ than\ 0 = invalid value[{0}], it must be a double greater than 0

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:888
# args: psUuid
the\ primary\ storage[%s]\ available\ capacity\ less\ than\ 0 = the primary storage[{0}] available capacity less than 0

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:924
# args: newValue
invalid\ value[%s],\ it\ must\ be\ a\ double\ between\ (0,\ 1] = invalid value[{0}], it must be a double between (0, 1]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:936
# args: newValue
invalid\ value[%s],\ ZStack\ doesn't\ have\ such\ host\ allocator\ type = invalid value[{0}], ZStack doesn't have such host allocator type

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:958
# args: MevocoGlobalConfig.AIO_NATIVE.getCanonicalName(),MevocoGlobalConfig.AIO_NATIVE.value(),KVMGlobalConfig.LIBVIRT_CACHE_MODE.getCanonicalName(),KVMGlobalConfig.LIBVIRT_CACHE_MODE.value()
%s\ value\ is[%s],\ which\ is\ conflict\ with\ %s\ value\ [%s] = {0} value is[{1}], which is conflict with {2} value [{3}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1881
# args: bandwidth
networkInboundBandwidth\ format\ error\ %s = networkInboundBandwidth format error {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1893
# args: bandwidth
networkOutboundBandwidth\ format\ error\ %s = networkOutboundBandwidth format error {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1890
# args: 
networkOutboundBandwidth\ execeds\ the\ max\ value\ 32G\ bps = networkOutboundBandwidth execeds the max value 32G bps

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2064
# args: volume.getUuid(),vm.getUuid()
Shareable\ Volume[uuid\:%s]\ has\ already\ been\ attached\ to\ VM[uuid\:%s] = Shareable Volume[uuid:{0}] has already been attached to VM[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2082
# args: 
shareable\ disk\ only\ support\ virtio-scsi\ type\ for\ now = shareable disk only support virtio-scsi type for now

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2591
# args: hostUuid
Host\ [uuid\:\ %s]\ has\ no\ cluster = Host [uuid: {0}] has no cluster

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2621
# args: clusterUuid,displayNetworkCidr,hostUuid
Cluster\ [uuid\:\ %s]\ configured\ display\ network\ %s,\ but\ host\ [uuid\:\ %s]\ has\ no\ matching\ IP = Cluster [uuid: {0}] configured display network {1}, but host [uuid: {2}] has no matching IP

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:614
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ while\ volume[uuid\:\ %s]\ not\ attached = can not take snapshot for volumes[{0}] while volume[uuid: {1}] not attached

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:620
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ while\ volume[uuid\:\ %s]\ appears\ twice = can not take snapshot for volumes[{0}] while volume[uuid: {1}] appears twice

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:627
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid(),volumeVOS.get(0).getVmInstanceUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ attached\ multiple\ vms[%s,\ %s] = can not take snapshot for volumes[{0}] attached multiple vms[{1}, {2}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:634
# args: 
no\ volumes\ found = no volumes found

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:919
# args: SizeUnit.BYTE.toGigaByte((double) resize)
this\ snapshot\ recording\ the\ volume\ state\ before\ resize\ to\ %fG\ is\ created\ automatically = this snapshot recording the volume state before resize to {0}G is created automatically

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1315
# args: bandWidth
Bandwidth\ must\ be\ set\ no\ more\ than\ %s = Bandwidth must be set no more than {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1472
# args: msg.getVolume().getUuid(),msg.getVmInstanceUuid()
failed\ to\ detach\ shareable\ volume[uuid\:%s]\ from\ VmInstance[uuid\:%s] = failed to detach shareable volume[uuid:{0}] from VmInstance[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1484
# args: StringUtils.join(errors, "\n\n")
failed\ to\ detach\ shareable\ volume\ from\ VmInstance\:[\n%s] = failed to detach shareable volume from VmInstance:[\n{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/mevoco/PremiumGlobalConfig.java:34
# args: getName()
the\ current\ version\ of\ license\ does\ not\ support\ modifying\ this\ global\ config\ [name\:%s] = the current version of license does not support modifying this global config [name:{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/EmailTriggerEvent.java:47
# args: subject,vo.getUuid(),vo.getName()
%s,\ Cannot\ send\ mail\ because\ the\ current\ email\ monitor\ trigger\ action[uuid\:%s,name\:%s]\ does\ not\ have\ a\ email\ media\ server = {0}, Cannot send mail because the current email monitor trigger action[uuid:{1},name:{2}] does not have a email media server

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:191
# args: msg.getMonitorTriggerUuid()
cannot\ find\ monitor\ trigger[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find monitor trigger[uuid:{0}], it may have been deleted

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:200
# args: msg.getMonitorTriggerActionUuid()
cannot\ find\ monitor\ trigger\ action[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find monitor trigger action[uuid:{0}], it may have been deleted

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:244
# args: msg.getResourceType()
the\ resource[type\:%s]\ doesn't\ have\ any\ monitoring\ items = the resource[type:{0}] doesn't have any monitoring items

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:336
# args: msg.getTargetResourceUuid(),msg.getSession().getAccountUuid()
the\ resource[uuid\:%s]\ doesn't\ belong\ to\ the\ account[uuid\:%s] = the resource[uuid:{0}] doesn't belong to the account[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:387
# args: resourceUuid
cannot\ find\ type\ for\ the\ resource[uuid\:%s] = cannot find type for the resource[uuid:{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:392
# args: resourceType,triggerExpression.getItem()
no\ monitoring\ item\ found\ for\ the\ resourceType[%s]\ and\ item[%s] = no monitoring item found for the resourceType[{0}] and item[{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:497
# args: host.getName(),host.getUuid(),errorCode
failed\ to\ delete\ monitoring\ stuff\ for\ the\ host[name\:%s,\ uuid\:%s],\ %s = failed to delete monitoring stuff for the host[name:{0}, uuid:{1}], {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:560
# args: vm.getName(),vm.getUuid(),errorCode
failed\ to\ delete\ monitoring\ stuff\ for\ the\ vm[name\:%s,\ uuid\:%s],\ %s = failed to delete monitoring stuff for the vm[name:{0}, uuid:{1}], {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorTriggerBase.java:210
# args: event.getAction().getUuid(),event.getTrigger().getUuid(),errorCode.getDetails()
unable\ to\ fire\ an\ action[uuid\:%s,\ trigger\ uuid\:%s]\ because\ of\ %s = unable to fire an action[uuid:{0}, trigger uuid:{1}] because of {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorTriggerBase.java:395
# args: self.getUuid(),errCode
failed\ to\ update\ the\ monitor\ trigger[uuid\:%s]\ because\ of\ %s.\ The\ trigger\ will\ be\ set\ in\ the\ error\ status,\ you\ can\ try\ updating\ again\ to\ recover\ it = failed to update the monitor trigger[uuid:{0}] because of {1}. The trigger will be set in the error status, you can try updating again to recover it

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/MonitorTriggerCascadeExtension.java:78
# args: reply.getError()
failed\ to\ delete\ the\ trigger\ because\ of\ the\ error\:\ %s = failed to delete the trigger because of the error: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/actions/EmailMonitorTriggerActionFactory.java:52
# args: vo.getUuid(),vo.getName()
Create\ email\ monitor\ action[uuid\:%s,name\:%s]\ success,\ The\ system\ will\ automatically\ send\ a\ confirmation\ mail.\ Please\ check\ the\ recipient\ mailbox.\ If\ you\ do\ not\ receive\ mail,\ check\ the\ mailbox\ server\ configuration,\ the\ recipient\ mailbox = Create email monitor action[uuid:{0},name:{1}] success, The system will automatically send a confirmation mail. Please check the recipient mailbox. If you do not receive mail, check the mailbox server configuration, the recipient mailbox

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/items/AlertText.java:50
# args: args
A\ resource[name\:{resourceName},\ uuid\:{resourceUuid},\ type\:{resourceType}]'s\ monitoring\ trigger[uuid\:{triggerUuid}]\ changes\ status\ to\ {triggerStatus} = A resource[name:'{resourceName}', uuid:'{resourceUuid}', type:'{resourceType}']'s monitoring trigger[uuid:'{triggerUuid}'] changes status to '{triggerStatus}'

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/items/AlertText.java:55
# args: 
\n\=\=\=\ BELOW\ ARE\ DETAILS\ OF\ THE\ PREVIOUS\ ALERT\ \=\=\= = \n=== BELOW ARE DETAILS OF THE PREVIOUS ALERT ===

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/items/AlertText.java:58
# args: 
\nalert\ details\: = \nalert details:

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/items/AlertText.java:59
# args: args
\ncondition\:\ {itemName}\ {operator}\ {threshold} = \ncondition: '{itemName}' '{operator}' '{threshold}'

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/items/AlertText.java:60
# args: args
\ncurrent\ value\:\ {value} = \ncurrent value: '{value}'

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/items/host/HostCpuUtilItem.java:31
# args: 
Host\ CPU\ utilization = Host CPU utilization

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/items/vm/VmCpuUtilItem.java:29
# args: 
VM\ CPU\ utilization = VM CPU utilization

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/AlertRuleWriter.java:141
# args: rb.name,r
conflict\ alert\ rule[%s],\ there\ has\ been\ a\ rule[%s]\ with\ the\ same\ name = conflict alert rule[{0}], there has been a rule[{1}] with the same name

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusAlert.java:79
# args: resourceName,resourceUuid,toI18nString(resourceType),itemName,toI18nString(expression.getOperator()),expression.getConstant(),value,tvo.getDuration()
ALERT\:\n\ resource[name\:\ %s,\ uuid\:\ %s,\ type\:\ %s]\nevent\:\ %s\ %s\ %s\ncurrent\ value\:\ %s\nduration\:\ %s\ seconds\n = ALERT:\n resource[name: {0}, uuid: {1}, type: {2}]\nevent: {3} {4} {5}\ncurrent value: {6}\nduration: {7} seconds\n

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java:40
# args: msg.getRelativeTime()
the\ relativeTime[%s]\ is\ invalid,\ it\ must\ be\ in\ format\ of,\ for\ example,\ 10s,\ 1h = the relativeTime[{0}] is invalid, it must be in format of, for example, 10s, 1h

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java:44
# args: msg.getRelativeTime()
the\ relativeTime[%s]\ is\ invalid,\ it's\ too\ big = the relativeTime[{0}] is invalid, it's too big

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilAlertWriter.java:95
# args: 
CPU\ number = CPU number

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilItem.java:70
# args: cpu,trigger.getTargetResourceUuid(),cpuNum
invalid\ cpu[%s],\ the\ host[uuid\:%s]\ doesn't\ have\ a\ CPU\ numbered\ by\ %s = invalid cpu[{0}], the host[uuid:{1}] doesn't have a CPU numbered by {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:92
# args: 
Host\ Disk\ Capacity = Host Disk Capacity

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:98
# args: 
Host\ Disk\ Capacity\ type = Host Disk Capacity type

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:100
# args: 
Host\ devices = Host devices

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusHostNetworkIOAlertWriter.java:77
# args: 
Host = Host

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusMonitorProviderFactory.java:124
# args: ret.get("errorType"),ret.get("error")
query\ failure,\ errorType\:%s,\ error\:\ %s = query failure, errorType:{0}, error: {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java:81
# args: 
CPU\ Utilization = CPU Utilization

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java:84
# args: 
CPU\ utilization\ type = CPU utilization type

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:86
# args: 
Disk\ IO = Disk IO

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:92
# args: 
Disk\ IO\ direction = Disk IO direction

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:93
# args: 
Disk\ IO\ type = Disk IO type

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOItem.java:19
# args: type,ALLOWED_TYPES
invalid\ type[%s],\ only\ %s\ are\ allowed = invalid type[{0}], only {1} are allowed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilAlertWriter.java:77
# args: 
Memory\ Utilization = Memory Utilization

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:57
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ a\ float\ or\ double\ number = invalid right value[{0}], it must be a float or double number

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:53
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ float\ or\ double\ number\ greater\ than\ zero\ and\ lesser\ than\ one = invalid right value[{0}], it must be float or double number greater than zero and lesser than one

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:47
# args: expression.getArguments().keySet()
invalid\ arguments\ %s,\ no\ argument\ is\ allowed = invalid arguments {0}, no argument is allowed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:84
# args: 
Network\ IO = Network IO

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:89
# args: 
Network\ IO\ direction = Network IO direction

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:77
# args: 
Virtual\ Machine = Virtual Machine

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java:22
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ a\ number(int,\ long,\ float,\ double) = invalid right value[{0}], it must be a number(int, long, float, double)

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java:18
# args: dir,ALLOWED_DIRECTION
invalid\ direction[%s],\ only\ %s\ are\ allowed = invalid direction[{0}], only {1} are allowed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:106
# args: expr,e.getMessage()
invalid\ expression\:\ %s,\ %s = invalid expression: {0}, {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:110
# args: expr
invalid\ expression\:\ %s,\ no\ expression\ found = invalid expression: {0}, no expression found

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:127
# args: key
missing\ parameter\ '%s'\ in\ the\ expression = missing parameter '{0}' in the expression

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:131
# args: key,clz,value.getClass()
wrong\ type\ of\ parameter\ '%s'\ in\ the\ expression,\ it\ must\ be\ type\ of\ %s,\ but\ got\ %s = wrong type of parameter '{0}' in the expression, it must be type of {1}, but got {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:91
# args: msg.getNasFileSystemUuid()
nas\ file\ system\ [%s]\ is\ not\ existed\ yet = nas file system [{0}] is not existed yet

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:139
# args: type
cannot\ find\ nas\ factory\ for\ type\:\ %s = cannot find nas factory for type: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:164
# args: f.getClass().getSimpleName(),old.getClass().getSimpleName(),f.getNasFileSystemType()
duplicate\ NasFileSystemFactory[%s,\ %s]\ for\ type[%s] = duplicate NasFileSystemFactory[{0}, {1}] for type[{2}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:44
# args: msg.getVipUuid()
VipQos\ for\ Vip\ [uuid\:\ %s]\ already\ existed = VipQos for Vip [uuid: {0}] already existed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:39
# args: msg.getVipUuid(),Integer.toString(msg.getPort())
VipQos\ for\ Vip\ [uuid\:\ %s]\ port\ %s\ already\ existed = VipQos for Vip [uuid: {0}] port {1} already existed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:50
# args: 
SetVipQos\ MUST\ set\ InboundBandwidth\ or\ OutboundBandwidth = SetVipQos MUST set InboundBandwidth or OutboundBandwidth

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:62
# args: msg.getUuid()
VipQos\ for\ Vip\ [uuid\:\ %s]\ does\ not\ exist = VipQos for Vip [uuid: {0}] does not exist

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:57
# args: msg.getUuid(),Integer.toString(msg.getPort())
VipQos\ for\ Vip\ [uuid\:\ %s]\ port\ %s\ does\ not\ exist = VipQos for Vip [uuid: {0}] port {1} does not exist

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/network/service/vipQos/VipQosManagerImpl.java:117
# args: vipUuid
Can\ not\ find\ VipQos\ backend\ for\ Vip\ [uuid\:%s] = Can not find VipQos backend for Vip [uuid:{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/network/service/vipQos/flat/FlatVipQosBackend.java:199
# args: hostUuid
operation\ error,\ vip\ %s\ has\ not\ bind\ to\ vm = operation error, vip {0} has not bind to vm

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/pciDevice/PciDeviceAllocatorFactory.java:73
# args: vo.getUuid(),vo.getHostUuid(),pciDeviceVOS.get(0).getUuid(),pciDeviceVOS.get(0).getHostUuid()
specified\ pci\ device\ not\ on\ same\ host,\ pci\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s]\ while\ pci\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s] = specified pci device not on same host, pci device[uuid: {0}] on host[uuid: {1}] while pci device[uuid: {2}] on host[uuid: {3}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/pciDevice/PciDeviceAllocatorFactory.java:83
# args: 
IOMMU\ state\ or\ status\ of\ host[uuid\:\ %s]\ which\ pci\ device[uuid\:\ %s]\ on\ is\ disabled\ or\ inactive = IOMMU state or status of host[uuid: {0}] which pci device[uuid: {1}] on is disabled or inactive

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/pciDevice/PciDeviceManager.java:444
# args: msg.getPciDeviceUuid(),msg.getVmInstanceUuid()
can\ not\ attach\ this\ pci\ device[uuid\:%s]\ to\ vm[uuid\:%s]\ due\ to\ host\ allocation = can not attach this pci device[uuid:{0}] to vm[uuid:{1}] due to host allocation

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/pciDevice/PciDeviceManager.java:677
# args: msg.getVmInstanceUuid()
can\ not\ migrate\ vm[uuid\:%s]\ since\ pci\ device\ attached = can not migrate vm[uuid:{0}] since pci device attached

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/pciDevice/PciDeviceManager.java:708
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ pci\ devices\ attached = cannot migrate root volume[uuid:{0}] because there are pci devices attached

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/pciDevice/PciDeviceManager.java:748
# args: tokens.get(PciDeviceSystemTags.PCI_DEVICE_TOKEN),spec.getVmInventory().getUuid()
specified\ invalid(non-exists,\ disabled\ or\ not\ attachable)\ pci\ device[uuid\:\ %s]\ for\ vm\ instance[uuid\:%s] = specified invalid(non-exists, disabled or not attachable) pci device[uuid: {0}] for vm instance[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/pciDevice/PciHostChangeStateExtension.java:66
# args: inventory.getUuid(),hasPciVmUuids.toString()
The\ host\ [%s]\ has\ failed\ to\ enter\ the\ maintenance,\ The\ vm\ [%s]\ cannot\ migrate\ automatically\ because\ it\ contains\ the\ PCI\ device = The host [{0}] has failed to enter the maintenance, The vm [{1}] cannot migrate automatically because it contains the PCI device

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/AbstractSchedulerJob.java:146
# args: getUuid(),getTargetResourceUuid()
scheduler\ job[uuid\:%s]\ or\ target\ resource[uuid\:%s]\ not\ exists,\ unschedule\ self = scheduler job[uuid:{0}] or target resource[uuid:{1}] not exists, unschedule self

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:152
# args: 
cron\ must\ be\ set\ when\ use\ cron\ scheduler = cron must be set when use cron scheduler

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:158
# args: 
cron\ task\ must\ follow\ format\ like\ this\ \:\ \"0\ 0/3\ 17-23\ *\ *\ ?\"\  = cron task must follow format like this : \"0 0/3 17-23 * * ?\" 

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:161
# args: 
cron\ scheduler\ only\ need\ to\ specify\ cron\ task = cron scheduler only need to specify cron task

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:135
# args: 
startTime\ out\ of\ range = startTime out of range

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:131
# args: 
startTime\ must\ be\ positive\ integer\ or\ 0 = startTime must be positive integer or 0

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:147
# args: 
stopTime\ has\ been\ passed = stopTime has been passed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:145
# args: 
stopTime\ out\ of\ mysql\ timestamp\ range = stopTime out of mysql timestamp range

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:143
# args: 
duration\ time\ out\ of\ range = duration time out of range

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:80
# args: 
interval\ must\ be\ set\ when\ use\ simple\ scheduler\ when\ repeat\ more\ than\ once = interval must be set when use simple scheduler when repeat more than once

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:115
# args: msg.getSchedulerJobUuid(),msg.getSchedulerTriggerUuid()
Can\ not\ add\ job[uuid\:%s]\ twice\ to\ the\ same\ trigger[uuid\:%s] = Can not add job[uuid:{0}] twice to the same trigger[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:120
# args: msg.getSchedulerJobUuid(),msg.getSchedulerTriggerUuid()
Can\ not\ add\ job[uuid\:%s]\ to\ a\ out\ of\ time\ trigger[uuid\:%s] = Can not add job[uuid:{0}] to a out of time trigger[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:155
# args: 
invalid\ cron\ expression = invalid cron expression

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:129
# args: 
startTime\ must\ be\ set\ for\ simple\ scheduler = startTime must be set for simple scheduler

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:139
# args: 
schedulerInterval\ must\ be\ set\ for\ simple\ scheduler = schedulerInterval must be set for simple scheduler

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:195
# args: msg.getParameters().get(SchedulerJobParameters.snapshotMax),e.getMessage()
snapshotMaxNumber\ \:\ %s\ format\ error\ because\ %s = snapshotMaxNumber : {0} format error because {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:214
# args: url,rsp.getError()
unable\ to\ connect\ to\ SimpleHttpBackupStorage[url\:%s],\ because\ %s = unable to connect to SimpleHttpBackupStorage[url:{0}], because {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:322
# args: iinv.getName()
Missing\ cert\ file\ for\ downloading\ image\:\ %s = Missing cert file for downloading image: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:574
# args: 
No\ response = No response

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:620
# args: ret.getError()
reclaim\ imagestore\ error,\ because\:%s = reclaim imagestore error, because:{0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:895
# args: 
image\ store\ [%s]\ cannot\ add\ image,\ because\ it\ is\ used\ for\ backup\ remote = image store [{0}] cannot add image, because it is used for backup remote

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1068
# args: 
commercial\ license\ is\ required\ to\ use\ ImageStore = commercial license is required to use ImageStore

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1101
# args: self.getUuid(),ret.getUuid()
the\ uuid\ of\ imagestoreBackupStorage\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = the uuid of imagestoreBackupStorage agent changed[expected:{0}, actual:{1}], it's most likely the agent was manually restarted. Issue a reconnect to sync the status

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:111
# args: msg.getHostname()
hostname[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = hostname[{0}] is neither an IPv4 address nor a valid hostname

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:51
# args: bsUuid,imageUuid
dst\ backupstorage[%s]\ already\ contains\ it,\ which\ uuid\ is\:\ [%s] = dst backupstorage[{0}] already contains it, which uuid is: [{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:80
# args: msg.getSrcBackupStorageUuid(),msg.getUuid()
src\ backupstorage[%s]\ doesn't\ contain\ image[%s] = src backupstorage[{0}] doesn't contain image[{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:117
# args: msg.getHostname()
duplicate\ backup\ storage.\ There\ has\ been\ an\ image\ store\ backup\ storage[hostname\:%s] = duplicate backup storage. There has been an image store backup storage[hostname:{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:122
# args: 
file\ path\ needed = file path needed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:126
# args: dir
absolute\ file\ path\ required\:\ %s = absolute file path required: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:129
# args: 
the\ url\ contains\ an\ invalid\ folder[/dev\ or\ /proc\ or\ /sys] = the url contains an invalid folder[/dev or /proc or /sys]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:137
# args: dir
file\ path\ contains\ invalid\ character\:\ %s = file path contains invalid character: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:133
# args: amsg.getUrl()
invalid\ url[%s],\ the\ url\ must\ be\ an\ absolute\ path\ starting\ with\ '/' = invalid url[{0}], the url must be an absolute path starting with '/'

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:142
# args: hostname
existing\ SimpleHttpBackupStorage\ with\ hostname[%s]\ found = existing SimpleHttpBackupStorage with hostname[{0}] found

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:91
# args: result.getStderr()
ansible\ mkdir\ failed,\ due\ to\:\ %s = ansible mkdir failed, due to: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:103
# args: result.getStderr()
ansible\ failed,\ due\ to\:\ %s = ansible failed, due to: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:101
# args: result.getStdout()
ansible\ attach\ nas\ failed,\ due\ to\:\ %s = ansible attach nas failed, due to: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java:347
# args: tmpHostFile,result.getStderr()
create\ tmp\ file\ [%s]\ failed,\ due\ to\:\ %s = create tmp file [{0}] failed, due to: {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java:181
# args: 
sync\ status\ failed. = sync status failed.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:727
# args: rsp.getError()
delete\ image\ metadata\ file\ failed\:\ %s = delete image metadata file failed: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:325
# args: bsUuid
AddImage\ is\ forbidden\ in\ Disaster\ BS\:\ [%s] = AddImage is forbidden in Disaster BS: [{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:656
# args: rsp.getBackupStorageMetaFileName()
Check\ image\ metadata\ file\:\ %s\ failed = Check image metadata file: {0} failed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:498
# args: rsp.getBackupStorageMetaFileName()
Create\ image\ metadata\ file\ \:\ %s\ failed = Create image metadata file : {0} failed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:473
# args: rsp.getBackupStorageMetaFileName()
Create\ image\ metadata\ file\ sync\ \:\ %s\ failed = Create image metadata file sync : {0} failed

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/backup/imagestore/ImageStoreImageStruct.java:79
# args: e.getMessage()
parse\ create\ time\ error\:\ %s = parse create time error: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:107
# args: volumeVO.getUuid(),volumeVO.getName()
do\ not\ support\ storage\ migration\ while\ shared\ volume[uuid\:\ %s,\ name\:\ %s]\ attached = do not support storage migration while shared volume[uuid: {0}, name: {1}] attached

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:123
# args: metric.getSourcePrimaryStorageType(),metric.getDestinationPrimaryStorageType()
do\ not\ support\ live\ storage\ migration\ from\ [%s]\ to\ [%s] = do not support live storage migration from [{0}] to [{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:129
# args: metric.getSourcePrimaryStorageType(),metric.getDestinationPrimaryStorageType()
do\ not\ support\ offlive\ storage\ migration\ from\ [%s]\ to\ [%s] = do not support offlive storage migration from [{0}] to [{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:134
# args: metric.getSourcePrimaryStorageType(),metric.getDestinationPrimaryStorageType()
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s]\ with\ data\ volume = do not support storage migration from [{0}] to [{1}] with data volume

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:139
# args: metric.getSourcePrimaryStorageType(),metric.getDestinationPrimaryStorageType()
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s]\ with\ snapshot = do not support storage migration from [{0}] to [{1}] with snapshot

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:147
# args: primaryStorageVO.getType(),dstPrimaryStorageVO.getType()
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s] = do not support storage migration from [{0}] to [{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:158
# args: 
Source\ BS\ and\ Destination\ BS\ cannot\ be\ the\ same. = Source BS and Destination BS cannot be the same.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:166
# args: 
Source\ BS\ and\ Destination\ BS\ must\ not\ be\ Disabled. = Source BS and Destination BS must not be Disabled.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:173
# args: msg.getImageUuid()
Image[uuid\:%s]\ is\ not\ in\ status\ Ready,\ cannot\ migrate\ it. = Image[uuid:{0}] is not in status Ready, cannot migrate it.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:184
# args: msg.getImageUuid(),msg.getSrcBackupStorageUuid()
Image[uuid\:%s]\ is\ not\ in\ source\ backup\ storage[uuid\:%s] = Image[uuid:{0}] is not in source backup storage[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:193
# args: srcBS.getType(),dstBS.getType()
Cannot\ migrate\ image\ from\ %s\ to\ %s. = Cannot migrate image from {0} to {1}.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:213
# args: 
Source\ PS\ and\ Destination\ PS\ must\ not\ be\ Disabled\ or\ Maintenance\ state. = Source PS and Destination PS must not be Disabled or Maintenance state.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:220
# args: msg.getVolumeUuid(),msg.getDstPrimaryStorageUuid()
Volume[uuid\:%s]\ is\ already\ in\ PS[uuid\:%s],\ cannot\ migrate. = Volume[uuid:{0}] is already in PS[uuid:{1}], cannot migrate.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:227
# args: msg.getVolumeUuid()
Volume[uuid\:%s]\ is\ not\ in\ status\ Ready,\ cannot\ migrate\ it. = Volume[uuid:{0}] is not in status Ready, cannot migrate it.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:275
# args: msg.getVolumeUuid(),srcVolume.getVmInstanceUuid()
the\ volume[uuid\:%s]\ is\ still\ attached\ on\ vm[uuid\:%s],\ please\ detach\ it\ before\ migration. = the volume[uuid:{0}] is still attached on vm[uuid:{1}], please detach it before migration.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:238
# args: 
Cannot\ migrate\ root\ volume\ when\ vm\ instance\ is\ not\ stopped. = Cannot migrate root volume when vm instance is not stopped.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:249
# args: 
Cannot\ migrate\ root\ volume\ when\ there\ are\ data\ volumes\ attached\ to\ the\ vm\ instance. = Cannot migrate root volume when there are data volumes attached to the vm instance.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:268
# args: 
The\ destination\ primary\ storage\ is\ not\ attached\ to\ any\ cluster\ that\ has\ the\ same\ L2\ networks\ as\ source\ cluster. = The destination primary storage is not attached to any cluster that has the same L2 networks as source cluster.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:287
# args: srcPS.getType(),dstPS.getType()
Cannot\ migrate\ volume\ from\ %s\ to\ %s. = Cannot migrate volume from {0} to {1}.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:503
# args: vmInstanceVO.getState()
not\ support\ vm\ state[%s]\ to\ do\ storage\ migration = not support vm state[{0}] to do storage migration

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:475
# args: liveStorageVmState
not\ support\ live\ storage\ migration\ yet,\ since\ vm\ state\ is\ [%s] = not support live storage migration yet, since vm state is [{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:462
# args: msg.getVmInstanceUuid(),size,dstPrimaryStorageVO.getCapacity().getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ vm[uuid\:\ %s]\ storage\ migration,\ required\ capacity(include\ image\ cache)\:\ %s,\ current\ available\ physical\ capacity\:\ %s = there are not enough capacity for vm[uuid: {0}] storage migration, required capacity(include image cache): {1}, current available physical capacity: {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:764
# args: srcPs.getType()
unsupported\ primary\ storage\ type[%s]\ for\ storage\ migration = unsupported primary storage type[{0}] for storage migration

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/backup/ReserveCapacityFromDstBSFlow.java:61
# args: imageUuid,dstBsUuid
Cannot\ reserve\ enough\ space\ for\ Image[uuid\:%s]\ in\ BS[uuid\:%s] = Cannot reserve enough space for Image[uuid:{0}] in BS[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:111
# args: dstBsVO.getUuid()
all\ ceph\ mons\ are\ Disconnected\ in\ ceph\ backup\ storage[uuid\:%s] = all ceph mons are Disconnected in ceph backup storage[uuid:{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:142
# args: imageUuid,srcBsUuid,dstBsUuid
Failed\ to\ migrate\ Image\ %s\ from\ BS\ %s\ to\ BS\ %s. = Failed to migrate Image {0} from BS {1} to BS {2}.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/primary/ReserveCapacityFromDstPSFlow.java:85
# args: volumeUuid,dstPsUuid
Cannot\ reserve\ enough\ space\ for\ Volume[uuid\:%s]\ in\ PS[uuid\:%s] = Cannot reserve enough space for Volume[uuid:{0}] in PS[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java:86
# args: volume.getType().toString()
The\ type\ [%s]\ of\ destination\ volume\ is\ invalid. = The type [{0}] of destination volume is invalid.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java:110
# args: dstPsVO.getUuid()
all\ ceph\ mons\ are\ Disconnected\ in\ ceph\ primary\ storage[uuid\:%s] = all ceph mons are Disconnected in ceph primary storage[uuid:{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java:96
# args: 
cannot\ find\ any\ connected\ host\ to\ perform\ the\ storage\ migration\ operation = cannot find any connected host to perform the storage migration operation

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java:172
# args: imageUuid
both\ image\ %s\ and\ its\ cache\ is\ missing = both image {0} and its cache is missing

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:138
# args: path,JSONObjectUtil.toJsonString(errorCodes)
all\ mons\ failed\ to\ execute\ http\ call[%s],\ errors\ are\ %s = all mons failed to execute http call[{0}], errors are {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:103
# args: vo.getUuid()
all\ ceph\ mons\ of\ primary\ storage[uuid\:%s]\ are\ not\ in\ Connected\ state = all ceph mons of primary storage[uuid:{0}] are not in Connected state

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:126
# args: param.getPrimaryStorageUuid()
CephPrimaryStorage[%s]\ not\ existed! = CephPrimaryStorage[{0}] not existed!

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:176
# args: licMgr.getLicenseType().toString()
current\ license[%s]\ is\ not\ valid\ license\ while\ download\ from\ imagestore\ backupstorage = current license[{0}] is not valid license while download from imagestore backupstorage

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:272
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),rsp.getError()
failed\ to\ upload\ bits\ from\ the\ local\ storage[uuid\:%s,\ path\:%s]\ to\ image\ store\ [hostname\:%s],\ %s = failed to upload bits from the local storage[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:263
# args: greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download\ bits\ from\ the\ imagestore\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ nfs\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = failed to download bits from the imagestore backup storage[hostname:{0}, path: {1}] to the nfs primary storage[uuid:{2}, path: {3}], {4}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:325
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),rsp.getError()
failed\ to\ upload\ bits\ from\ the\ NFS[uuid\:%s,\ path\:%s]\ to\ image\ store\ [hostname\:%s],\ %s = failed to upload bits from the NFS[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesKvmBackend.java:549
# args: volume.getUuid(),volume.getName(),hostUuid
unable\ to\ create\ an\ empty\ volume[uuid\:%s,\ name\:%s]\ on\ the\ kvm\ host[uuid\:%s] = unable to create an empty volume[uuid:{0}, name:{1}] on the kvm host[uuid:{2}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesKvmFactory.java:94
# args: context.getInventory().getUuid(),priUuid,reply.getError()
KVM\ host[uuid\:\ %s]\ fails\ to\ be\ added\ to\ zses\ primary\ storage[uuid\:\ %s],\ %s = KVM host[uuid: {0}] fails to be added to zses primary storage[uuid: {1}], {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java:245
# args: msg.getImage().getUuid(),self.getUuid(),JSONObjectUtil.toJsonString(ret.errorCodes)
failed\ to\ download\ image[uuid\:%s]\ to\ all\ hosts\ in\ the\ local\ storage[uuid\:%s].\ %s = failed to download image[uuid:{0}] to all hosts in the local storage[uuid:{1}]. {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java:1190
# args: hostUuid,self.getUuid(),ref.getAvailableCapacity(),size
host[uuid\:\ %s]\ of\ local\ primary\ storage[uuid\:\ %s]\ doesn't\ have\ enough\ capacity[current\:\ %s\ bytes,\ needed\:\ %s] = host[uuid: {0}] of local primary storage[uuid: {1}] doesn't have enough capacity[current: {2} bytes, needed: {3}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java:87
# args: volumeUuid
cannot\ find\ an\ available\ host\ for\ volume[uuid\:%s] = cannot find an available host for volume[uuid:{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java:507
# args: 
destination\ host\ is\ null = destination host is null

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageBase.java:629
# args: msg.getVolumeUuid(),self.getUuid()
unable\ to\ create\ the\ data\ volume[uuid\:\ %s]\ on\ a\ zses\ primary\ storage[uuid\:%s],\ because\ the\ hostUuid\ is\ not\ specified. = unable to create the data volume[uuid: {0}] on a zses primary storage[uuid:{1}], because the hostUuid is not specified.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageFactory.java:157
# args: LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()
To\ create\ data\ volume\ on\ the\ zses\ primary\ storage,\ you\ must\ specify\ the\ host\ that\ the\ data\ volume\ is\ going\ to\ be\ created\ using\ the\ system\ tag\ [%s] = To create data volume on the zses primary storage, you must specify the host that the data volume is going to be created using the system tag [{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimaryStorageFactory.java:167
# args: hostUuid,msg.getPrimaryStorageUuid()
the\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ zses\ primary\ storage[uuid\:%s] = the host[uuid:{0}] doesn't belong to the zses primary storage[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimarytoImageStoreKVMBackend.java:536
# args: installPath,inv.getUuid(),rsp.getError()
failed\ to\ check\ existence\ of\ %s\ on\ nfs\ primary\ storage[uuid\:%s],\ %s = failed to check existence of {0} on nfs primary storage[uuid:{1}], {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimarytoImageStoreKVMBackend.java:502
# args: volume.getUuid(),image.getImageUuid(),rsp.getError()
fails\ to\ create\ root\ volume[uuid\:%s]\ from\ cached\ image[path\:%s]\ because\ %s = fails to create root volume[uuid:{0}] from cached image[path:{1}] because {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimarytoImageStoreKVMBackend.java:411
# args: 
System\ can't\ find\ imagestore\ backup\ Storage.\ Please\ do\ not\ set\ imagestore\ backup\ Storage\ server\ IP\ to\ localhost(127.*.*.*), = System can't find imagestore backup Storage. Please do not set imagestore backup Storage server IP to localhost(127.*.*.*),

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimarytoImageStoreKVMBackend.java:414
# args: operationSuggestion,greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
%s\ failed\ to\ download\ bits\ from\ the\ imagestore\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ local\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = {0} failed to download bits from the imagestore backup storage[hostname:{1}, path: {2}] to the local primary storage[uuid:{3}, path: {4}], {5}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/primary/zses/ZsesPrimarytoImageStoreKVMBackend.java:467
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),rsp.getError()
failed\ to\ upload\ bits\ from\ the\ Zses\ storage[uuid\:%s,\ path\:%s]\ to\ image\ store\ [hostname\:%s],\ %s = failed to upload bits from the Zses storage[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:77
# args: volumeUuid
volume[uuid\:%s]\ can\ not\ found = volume[uuid:{0}] can not found

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:84
# args: volumeUuid,volumeVOS.get(0).getUuid(),volumeVO.getVmInstanceUuid(),volumeVOS.get(0).getVmInstanceUuid()
not\ support\ take\ snapshots\ volume[uuid\:%s,\ uuid\:%s]\ on\ different\ vms[uuid\:%s,\ uuid\:%s] = not support take snapshots volume[uuid:{0}, uuid:{1}] on different vms[uuid:{2}, uuid:{3}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:91
# args: volumeUuid
volume[uuid\:%s]\ is\ not\ ready = volume[uuid:{0}] is not ready

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:106
# args: vmInstanceVO.getUuid(),vmInstanceVO.getState()
state\ of\ vm[uuid\:\ %s]\ is\ %s,\ not\ allowed\ to\ take\ snapshots = state of vm[uuid: {0}] is {1}, not allowed to take snapshots

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:142
# args: msg.getUuid()
volume[uuid\:%s]\ is\ not\ data\ volume = volume[uuid:{0}] is not data volume

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:162
# args: msg.getUuid()
volume[uuid\:%s]\ is\ not\ root\ volume = volume[uuid:{0}] is not root volume

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:174
# args: 
SharedVolume\ cannot\ be\ set\ bandwidth. = SharedVolume cannot be set bandwidth.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:182
# args: vo.getType(),vo.getUuid()
Cannot\ shrink\ [%s]\ volume[uuid\:%s]'s\ size = Cannot shrink [{0}] volume[uuid:{1}]'s size

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:189
# args: 
Minimum\ increase\ size\ should\ be\ larger\ than\ 4MB = Minimum increase size should be larger than 4MB

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:213
# args: 
Expansion\ operation\ not\ allowed\ at\ all\ host\ disable = Expansion operation not allowed at all host disable

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:200
# args: 
Expansion\ operation\ not\ allowed\ at\ host\ disable = Expansion operation not allowed at host disable

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:239
# args: vo.getUuid(),notStoppedVmUuids
shared\ volume[uuid\:\ %s]\ has\ attached\ to\ not\ stopped\ vm\ instances[uuids\:\ %s] = shared volume[uuid: {0}] has attached to not stopped vm instances[uuids: {1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:38
# args: msg.getClass().getSimpleName()
%s\ can\ only\ be\ called\ by\ admin\ account = {0} can only be called by admin account

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:59
# args: msg.getUsbDeviceUuid(),usb.getVmInstanceUuid()
the\ usb\ device[uuid\:%s]\ has\ already\ been\ attached\ to\ another\ vm[uuid\:%s] = the usb device[uuid:{0}] has already been attached to another vm[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:66
# args: msg.getUsbDeviceUuid(),UsbDeviceState.Enabled
the\ usb\ device[uuid\:%s]\ is\ not\ in\ attachable\ state\ of\ %s = the usb device[uuid:{0}] is not in attachable state of {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:74
# args: msg.getVmInstanceUuid(),allowedVmInstanceAttachableState
the\ vm\ instance[uuid\:%s]\ is\ not\ in\ attachable\ state\ of\ %s\ for\ usb\ device = the vm instance[uuid:{0}] is not in attachable state of {1} for usb device

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:83
# args: usb.getHostUuid(),msg.getUsbDeviceUuid(),HostState.Enabled,HostStatus.Connected
the\ host\ that\ the\ usb\ device[uuid\:%s]\ pluged\ in\ is\ not\ in\ valid\ state[%s]\ or\ status[%s] = the host that the usb device[uuid:{0}] pluged in is not in valid state[{1}] or status[{2}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:96
# args: usb.getUuid(),vm.getUuid()
the\ usb\ device[uuid\:%s]\ has\ different\ hostUuid\ than\ devices\ that\ already\ attached\ to\ the\ vm\ instance[uuid\:%s] = the usb device[uuid:{0}] has different hostUuid than devices that already attached to the vm instance[uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:108
# args: usb.getUuid()
the\ usb\ device[uuid\:%s]\ is\ not\ attached\ to\ any\ vm\ instance. = the usb device[uuid:{0}] is not attached to any vm instance.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:116
# args: usb.getUuid(),allowedVmInstanceDetachableState
the\ vm\ instance\ that\ the\ usb\ device[uuid\:%s]\ is\ attached\ to\ is\ not\ in\ detachable\ state\ of\ %s = the vm instance that the usb device[uuid:{0}] is attached to is not in detachable state of {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:126
# args: vm.getUuid(),allowedVmInstanceAttachableState
vm\ instance[uuid\:%s]\ not\ in\ attachable\ state\ of\ %s\ for\ usb\ device = vm instance[uuid:{0}] not in attachable state of {1} for usb device

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:137
# args: msg.getUuid()
cannot\ disable\ usb\ device[uuid\:%s]\ when\ it's\ attached\ to\ a\ vm\ instance = cannot disable usb device[uuid:{0}] when it's attached to a vm instance

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:591
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ pci\ devices\ attached = cannot migrate vm[uuid:{0}] because there are pci devices attached

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:185
# args: UsbDeviceConstants.MAX_USB_1_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 1.0\ devices\ to\ one\ vm\ instance. = You can attach at most {0} USB 1.0 devices to one vm instance.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:200
# args: UsbDeviceConstants.MAX_USB_2_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 2.0\ devices\ to\ one\ vm\ instance. = You can attach at most {0} USB 2.0 devices to one vm instance.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:215
# args: UsbDeviceConstants.MAX_USB_3_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 3.0\ devices\ to\ one\ vm\ instance. = You can attach at most {0} USB 3.0 devices to one vm instance.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:160
# args: msg.getUsbDeviceUuid(),msg.getVmInstanceUuid()
cannot\ attach\ the\ usb\ device[uuid\:%s]\ to\ vm[uuid\:%s]\ due\ to\ host\ allocation = cannot attach the usb device[uuid:{0}] to vm[uuid:{1}] due to host allocation

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:541
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached = cannot migrate vm[uuid:{0}] because there are usb devices attached

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:574
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached = cannot migrate root volume[uuid:{0}] because there are usb devices attached

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:47
# args: 
vCenter\ login\ name\ expected. = vCenter login name expected.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:51
# args: msg.getDomainName()
domainName[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = domainName[{0}] is neither an IPv4 address nor a valid hostname

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:57
# args: msg.getDomainName()
vCenter\ [domainName\:%s]\ has\ been\ added = vCenter [domainName:{0}] has been added

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:94
# args: clusterUuid,l2uuid
Cluster[uuid\:%s]\ and\ L2[uuid\:%s]\ belongs\ to\ different\ DCs = Cluster[uuid:{0}] and L2[uuid:{1}] belongs to different DCs

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:106
# args: clusterUuid
No\ hosts\ found\ within\ cluster\:\ %s = No hosts found within cluster: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:139
# args: phyinf
vSwitch/dvSwitch\ not\ found\:\ %s = vSwitch/dvSwitch not found: {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:153
# args: l2uuid,vcvo.getUuid(),clusterUuid
L2[uuid\:%s]\ doesn't\ belong\ to\ vCenter[uuid\:%s]\ cluster[uuid\:%s] = L2[uuid:{0}] doesn't belong to vCenter[uuid:{1}] cluster[uuid:{2}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterManagerImpl.java:2752
# args: vcvo.getDomainName(),ex.getMessage()
Failed\ to\ list\ datastores\ from\ vCenter\ %s\:\ %s = Failed to list datastores from vCenter {0}: {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterManagerImpl.java:2765
# args: vcvo.getDomainName(),ex.getMessage()
Monitor\ aborted\ for\ vCenter\ %s\:\ %s = Monitor aborted for vCenter {0}: {1}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3268
# args: 
Missing\ destination\ host\ uuid. = Missing destination host uuid.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3273
# args: 
Destination\ host\ is\ not\ ESX\ host. = Destination host is not ESX host.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3298
# args: 
HOST\ CPU/software\ NOT\ compatible = HOST CPU/software NOT compatible

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VMwareResourceMonitor.java:307
# args: vcvo.getDomainName()
lost\ connection\ to\ %s,\ reconnecting\ ... = lost connection to {0}, reconnecting ...

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/VMwareResourceMonitor.java:314
# args: vcvo.getDomainName()
recovered\ connection\ to\ %s. = recovered connection to {0}.

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vmware/cascade/VCenterVmCascadeExtension.java:228
# args: msg.getVmNicUuid(),msg.getVmInstanceUuid(),r.getError()
unable\ to\ detach\ a\ nic[uuid\:%s]\ from\ the\ vm[uuid\:%s],\ %s = unable to detach a nic[uuid:{0}] from the vm[uuid:{1}], {2}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcApiInterceptor.java:185
# args: l3NetworkVO.getUuid()
no\ ip\ ranges\ attached\ with\ l3\ network[uuid\:%s] = no ip ranges attached with l3 network[uuid:{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcApiInterceptor.java:143
# args: l3NetworkVO.getUuid(),vmInstanceVO.getUuid(),vmNicVOS.stream().map( n -> n.getUuid()).collect(Collectors.toList())
vpc\ l3\ network[uuid\:%s]\ can\ not\ detach\ from\ vpc\ vrouter[uuid\:%s]\ sine\ vm\ nics[%s]\ still\ used\ in\ l3 = vpc l3 network[uuid:{0}] can not detach from vpc vrouter[uuid:{1}] sine vm nics[{2}] still used in l3

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcApiInterceptor.java:153
# args: msg.getVirtualRouterOfferingUuid()
virtual\ router\ offering[uuid\:\ %s]\ is\ not\ enabled = virtual router offering[uuid: {0}] is not enabled

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcApiInterceptor.java:178
# args: 
only\ vpc\ l3\ network\ can\ attach\ to\ vpc\ vrouter = only vpc l3 network can attach to vpc vrouter

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcApiInterceptor.java:209
# args: vip.getL3NetworkUuid(),vip.getUuid(),vip.getIp(),msg.getL3NetworkUuid(),vmInstanceVO.getUuid()
public\ network[uuid\:\ %s]\ vip[uuid\:\ %s,\ ip\:\ %s]\ peer\ with\ l3network[uuid\:\ %s]\ not\ on\ vpc\ vr[uuid\:\ %s] = public network[uuid: {0}] vip[uuid: {1}, ip: {2}] peer with l3network[uuid: {3}] not on vpc vr[uuid: {4}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcApiInterceptor.java:222
# args: gateway,msg.getL3NetworkUuid()
the\ gateway[ip\:%s]\ of\ l3[uuid\:%s]\ has\ been\ occupied = the gateway[ip:{0}] of l3[uuid:{1}] has been occupied

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcApiInterceptor.java:230
# args: msg.getStaticIp(),gateway,l3NetworkVO.getUuid()
the\ static\ ip[%s]\ specified\ in\ message\ not\ equals\ to\ gateway\ ip[%s]\ of\ l3\ network[uuid\:%s] = the static ip[{0}] specified in message not equals to gateway ip[{1}] of l3 network[uuid:{2}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcApiInterceptor.java:237
# args: msg.getDns(),msg.getUuid()
dns\ address\ [%s]\ is\ already\ added\ to\ vpc\ router\ [uuid\:%s] = dns address [{0}] is already added to vpc router [uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcApiInterceptor.java:243
# args: msg.getDns(),msg.getUuid()
dns\ address\ [%s]\ is\ not\ added\ to\ vpc\ router\ [uuid\:%s] = dns address [{0}] is not added to vpc router [uuid:{1}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcManagerImpl.java:217
# args: vrinv.getUuid()
can\ not\ get\ connections\ of\ distributed\ routing\ to\ virtual\ router\ %s = can not get connections of distributed routing to virtual router {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcManagerImpl.java:259
# args: vrinv.getUuid()
can\ not\ set\ state\ of\ distributed\ routing\ to\ virtual\ router\ %s = can not set state of distributed routing to virtual router {0}

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcManagerImpl.java:324
# args: 
can\ not\ get\ status\ from\ zsn\ agent = can not get status from zsn agent

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcManagerImpl.java:590
# args: 
vpc\ l3\ network\ must\ attach\ a\ vpc\ vrouter\ first\ before\ do\ anything\ related\ to\ vrouter(like\ start/stop\ vm,\ create\ lb,\ etc.) = vpc l3 network must attach a vpc vrouter first before do anything related to vrouter(like start/stop vm, create lb, etc.)

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcVRouterFactory.java:259
# args: vpcVrVO.getUuid()
can\ not\ detach\ nic\ from\ vpc\ vr[uuid\:%s] = can not detach nic from vpc vr[uuid:{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcVRouterFactory.java:298
# args: gateway,l3.getUuid(),vm.getUuid()
the\ gateway[ip\:%s]\ of\ l3[uuid\:%s]\ has\ been\ occupied\ on\ vpc\ vr[uuid\:\ %s] = the gateway[ip:{0}] of l3[uuid:{1}] has been occupied on vpc vr[uuid: {2}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vpc/VpcVyosDeployZsnAgentFlow.java:128
# args: mgmtNicIp
unable\ to\ ssh\ in\ to\ the\ vyos[%s],\ the\ ssh\ port\ seems\ not\ open = unable to ssh in to the vyos[{0}], the ssh port seems not open

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vrouterRoute/VRouterRouteManagerImpl.java:198
# args: vrouterVmUuid
virtual\ router[uuid\:%s]\ can\ not\ find = virtual router[uuid:{0}] can not find

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vrouterRoute/VRouterRouteManagerImpl.java:203
# args: vo.getApplianceVmType()
can\ not\ find\ service\ factory\ for\ virtual\ router\ type[%s] = can not find service factory for virtual router type[{0}]

# at: src/zstack/./premium/mevoco/src/main/java/org/zstack/vrouterRoute/VRouterRouteManagerImpl.java:482
# args: msg.getUuid()
cannot\ find\ the\ route\ table\ [uuid\:%s] = cannot find the route table [uuid:{0}]

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/core/AliyunNasClient.java:33
# args: 
accessKey\ and\ keySecret\ must\ be\ set! = accessKey and keySecret must be set!

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/core/AliyunNasClient.java:40
# args: 
regionId\ must\ be\ set! = regionId must be set!

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:56
# args: 
Not\ a\ valid\ message! = Not a valid message!

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/core/AliyunNasApiInterceptor.java:44
# args: psUuids.toString()
PrimaryStorage\ [%s]\ still\ running,\ can\ not\ delete\ access\ group = PrimaryStorage [{0}] still running, can not delete access group

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java:194
# args: msg.getSourceCidrIp(),msg.getAccessGroupUuid()
access\ group\ rule\ [%s]\ already\ existed\ in\ access\ group\ [%s] = access group rule [{0}] already existed in access group [{1}]

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java:849
# args: msg.getName(),msg.getDataCenterUuid()
access\ group\ [%s]\ already\ existed\ in\ datacenter\ [%s] = access group [{0}] already existed in datacenter [{1}]

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:150
# args: self.getFileSystemId(),regionId
no\ filesystem\ [%s]\ found\ in\ region\:\ %s = no filesystem [{0}] found in region: {1}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:203
# args: msg.getDataCenterUuid()
nas\ filesystem\ existed\ in\ datacenter\:\ %s = nas filesystem existed in datacenter: {0}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:304
# args: refs.toString()
some\ primary\ storage\ [%s]\ used\ this\ nas,\ can\ not\ delete\ it\ until\ delete\ the\ primary\ storage. = some primary storage [{0}] used this nas, can not delete it until delete the primary storage.

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:314
# args: cmsg.getWait()
mount\ domain\ not\ valid\ after\ %d\ milliseconds,\ delete\ it... = mount domain not valid after {0} milliseconds, delete it...

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:422
# args: 
there\ are\ no\ nas\ access\ group\ existed,\ please\ create\ at\ least\ one = there are no nas access group existed, please create at least one

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:404
# args: self.getMountDomain(),self.getNasFileSystemUuid()
no\ such\ mount\ target\ [%s]\ in\ nas\:\ %s = no such mount target [{0}] in nas: {1}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:472
# args: msg.getMountDomain(),msg.getNasFSUuid()
nas\ mount\ target\ [%s]\ existed\ in\ filesystem\:\ %s = nas mount target [{0}] existed in filesystem: {1}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:512
# args: self.getAccessGroupUuid()
the\ access\ group\ attached\ is\ already\:\ %s = the access group attached is already: {0}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2966
# args: imageVO.getUuid()
image\ [uuid\:%s]\ has\ been\ deleted = image [uuid:{0}] has been deleted

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2704
# args: String.join(",", msg.getBackupStorageUuids()),errorCodes.get(0).getDetails()
unable\ to\ allocate\ backup\ storage\ specified\ by\ uuids\:\ %s,\ becasue\:\ %s = unable to allocate backup storage specified by uuids: {0}, becasue: {1}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2881
# args: String.join(",", msg.getBackupStorageUuids()),errorCodes.get(0).getDetails()
unable\ to\ commit\ backup\ storage\ specified\ by\ uuids\:\ %s,\ becasue\:\ %s = unable to commit backup storage specified by uuids: {0}, becasue: {1}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:553
# args: vSwitchUuid
EcsVSwitchVO[%s]\ is\ not\ existed,\ may\ be\ it\ has\ been\ deleted! = EcsVSwitchVO[{0}] is not existed, may be it has been deleted!

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:546
# args: accessGroupUuid
AliyunNasAccessGroupVO[%s]\ is\ not\ existed,\ may\ be\ it\ has\ been\ deleted! = AliyunNasAccessGroupVO[{0}] is not existed, may be it has been deleted!

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:846
# args: self.getUuid()
cannot\ find\ an\ available\ host\ to\ operation\ in\ primary\ storage\:\ %s = cannot find an available host to operation in primary storage: {0}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:926
# args: self.getUuid(),hostUuid,rsp.error
failed\ to\ ping\ aliyun\ nas\ primary\ storage[uuid\:%s]\ from\ host[uuid\:%s],because\ %s.\ disconnect\ this\ host-ps\ connection = failed to ping aliyun nas primary storage[uuid:{0}] from host[uuid:{1}],because {2}. disconnect this host-ps connection

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:1448
# args: 
nas\ primary\ storage\ not\ mounted,\ please\ init\ it\ first! = nas primary storage not mounted, please init it first!

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:1632
# args: bsType
cannot\ find\ any\ BackupStorageKvmFactory\ for\ the\ type[%s] = cannot find any BackupStorageKvmFactory for the type[{0}]

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2058
# args: vol.getUuid()
cannot\ find\ host\ to\ operate\ volume\:\ [%s] = cannot find host to operate volume: [{0}]

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2295
# args: self.getUuid()
cannot\ find\ and\ host\ to\ sync\ volume\ size\ in\ primary\:\ %s = cannot find and host to sync volume size in primary: {0}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2322
# args: 
image\ [%s]\ has\ been\ deleted,\ cannot\ reinit\ root\ volume\ from\ it = image [{0}] has been deleted, cannot reinit root volume from it

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2477
# args: 
no\ available\ host\ could\ check\ mountPath! = no available host could check mountPath!

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2872
# args: bsvo.getType()
aliyun\ nas\ primarystorage\ only\ support\ imagestore\ bs,\ actually\ get\ type\:\ %s = aliyun nas primarystorage only support imagestore bs, actually get type: {0}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java:161
# args: context.getInventory().getUuid(),context.getInventory().getName(),mine,e.getKey(),version,QCOW3_QEMU_IMG_VERSION,QCOW3_QEMU_IMG_VERSION
unable\ to\ attach\ a\ primary\ storage\ to\ cluster.\ Kvm\ host[uuid\:%s,\ name\:%s]\ in\ cluster\ has\ qemu-img\ with\ version[%s];\ but\ the\ primary\ storage\ has\ attached\ to\ a\ cluster\ that\ has\ kvm\ host[uuid\:%s],\ which\ has\ qemu-img\ with\ version[%s].\ qemu-img\ version\ greater\ than\ %s\ is\ incompatible\ with\ versions\ less\ than\ %s,\ this\ will\ causes\ volume\ snapshot\ operation\ to\ fail.\ Please\ avoid\ attaching\ a\ primary\ storage\ to\ clusters\ that\ have\ different\ Linux\ distributions,\ in\ order\ to\ prevent\ qemu-img\ version\ mismatch = unable to attach a primary storage to cluster. Kvm host[uuid:{0}, name:{1}] in cluster has qemu-img with version[{2}]; but the primary storage has attached to a cluster that has kvm host[uuid:{3}], which has qemu-img with version[{4}]. qemu-img version greater than {5} is incompatible with versions less than {6}, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java:345
# args: 
no\ available\ host\ could\ download\ imagecache! = no available host could download imagecache!

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:617
# args: self.getUuid(),hostUuid,oldStatus == null ? "unknown" : oldStatus.toString(),status.toString()
change\ status\ between\ primary\ storage[uuid\:%s]\ and\ host[uuid\:%s]\ from\ %s\ to\ %s\ in\ db = change status between primary storage[uuid:{0}] and host[uuid:{1}] from {2} to {3} in db

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:68
# args: self.getUuid(),self.getName()
the\ aliyun\ nas\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = the aliyun nas primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:98
# args: self.getUuid(),self.getName()
the\ aliyun\ nas\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ list\ ps\ folder = the aliyun nas primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for list ps folder

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:219
# args: self.getUuid(),self.getName()
the\ aliyun\ nas\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ delete\ bits\ on\ primarystorage = the aliyun nas primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for delete bits on primarystorage

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:582
# args: self.getUuid(),self.getName()
the\ Aliyun\ Nas\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = the Aliyun Nas primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:849
# args: hostUuid
failed\ to\ check\ mount\ path\ on\ host\:\ %s = failed to check mount path on host: {0}

# at: src/zstack/./premium/plugin-premium/aliyun-storage/src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:936
# args: 
cannot\ find\ a\ host\ to\ cleanup\ image\ cache. = cannot find a host to cleanup image cache.

# at: src/zstack/./premium/plugin-premium/daho/src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:99
# args: 
parameters\ [accountUuid]\ only\ can\ be\ used\ by\ admin\ user! = parameters [accountUuid] only can be used by admin user!

# at: src/zstack/./premium/plugin-premium/daho/src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:54
# args: msg.getExpirePolicy()
expire\ policy\:\ %s\ is\ not\ valid = expire policy: {0} is not valid

# at: src/zstack/./premium/plugin-premium/daho/src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:57
# args: msg.getVlan()
vlanId[%s]\ has\ been\ existed! = vlanId[{0}] has been existed!

# at: src/zstack/./premium/plugin-premium/daho/src/main/java/org/zstack/daho/core/DahoSdkImpl.java:111
# args: 
create\ daho\ vll\ task\ failed! = create daho vll task failed!

# at: src/zstack/./premium/plugin-premium/daho/src/main/java/org/zstack/daho/core/DahoSdkImpl.java:152
# args: msg.getAccountUuid()
no\ aliyun\ account\ found\ for\ accountUuid\:\ %s = no aliyun account found for accountUuid: {0}

# at: src/zstack/./premium/plugin-premium/daho/src/main/java/org/zstack/daho/utils/DahoClient.java:47
# args: 
accessKey\ and\ keySecret\ must\ be\ set = accessKey and keySecret must be set

# at: src/zstack/./premium/plugin-premium/hostallocator/src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java:58
# args: HostAllocatorConstant.MAX_INSTANCE_PER_HOST_HOST_ALLOCATOR_STRATEGY_TYPE,HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN
Select\ %s\ strategy,\ you\ must\ set\ %s = Select {0} strategy, you must set {1}

# at: src/zstack/./premium/plugin-premium/hostallocator/src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java:76
# args: HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN
%s\ must\ be\ a\ number = {0} must be a number

# at: src/zstack/./premium/plugin-premium/hostallocator/src/main/java/org/zstack/pluginpremium/compute/allocator/MinimumMemoryUsageHostAllocatorStrategyFactory.java:58
# args: HostAllocatorSystemTags.MINIMUM_MEMORY_USAGE_HOST_ALLOCATOR_STRATEGY_MODE_TOKEN,modes
Incorrect\ %s\ settings,\ valid\ value\ is\ %s = Incorrect {0} settings, valid value is {1}

# at: src/zstack/./premium/plugin-premium/storage-device/src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:48
# args: msg.getIp(),msg.getPort()
iSCSI\ server[ip\:\ %s,\ port\:\ %s]\ already\ exists = iSCSI server[ip: {0}, port: {1}] already exists

# at: src/zstack/./premium/plugin-premium/storage-device/src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:53
# args: msg.getIp()
iSCSI\ server\ ip\:\ %s\ is\ not\ valid = iSCSI server ip: {0} is not valid

# at: src/zstack/./premium/plugin-premium/storage-device/src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:62
# args: msg.getUuid(),msg.getClusterUuid()
iSCSI\ server[uuid\:\ %s]\ already\ attached\ to\ cluster[uuid\:\ %s] = iSCSI server[uuid: {0}] already attached to cluster[uuid: {1}]

# at: src/zstack/./premium/plugin-premium/storage-device/src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:72
# args: msg.getUuid(),msg.getClusterUuid()
iSCSI\ server[uuid\:\ %s]\ not\ attached\ to\ cluster[uuid\:\ %s] = iSCSI server[uuid: {0}] not attached to cluster[uuid: {1}]

# at: src/zstack/./premium/plugin-premium/storage-device/src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:83
# args: msg.getUuid(),clusterUuid
iSCSI\ server[uuid\:\ %s]\ still\ attached\ to\ cluster[uuid\:\ %s] = iSCSI server[uuid: {0}] still attached to cluster[uuid: {1}]

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/TicketBase.java:256
# args: self.getUuid(),self.getName(),self.getStatus()
ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ updated\ after\ being\ cancelled,\ current\ status\ is\ %s = ticket[uuid:{0}, name:{1}] can only be updated after being cancelled, current status is {2}

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/TicketBase.java:310
# args: operator.operatorUuid
operation\ denied.\ the\ operator\ needs\ to\ be\ done\ by\ account/virtual\ ID[uuid\:%s] = operation denied. the operator needs to be done by account/virtual ID[uuid:{0}]

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:62
# args: msg.getFlowCollectionUuid()
Ticket\ flow\ collection[uuid\:%s]\ is\ invalid,\ contact\ admin\ to\ correct\ it = Ticket flow collection[uuid:{0}] is invalid, contact admin to correct it

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:67
# args: msg.getFlowCollectionUuid()
Ticket\ flow\ collection[uuid\:%s]\ is\ disable,\ can\ not\ be\ used = Ticket flow collection[uuid:{0}] is disable, can not be used

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:45
# args: msg.getAccountSystemType()
no\ accountSystemType[%s]\ defined\ in\ system = no accountSystemType[{0}] defined in system

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:53
# args: 
no\ default\ ticket\ flow\ collection\ found,\ you\ must\ specify\ the\ flowCollectionUuid\ or\ create\ a\ default\ ticket\ flow\ collection\ in\ system = no default ticket flow collection found, you must specify the flowCollectionUuid or create a default ticket flow collection in system

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:75
# args: req.apiName
invalid\ request.\ no\ API[%s]\ found = invalid request. no API[{0}] found

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:83
# args: clz,e.getMessage()
invalid\ request,\ cannot\ create\ API[%s]\ from\ apiBody,\ %s = invalid request, cannot create API[{0}] from apiBody, {1}

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:89
# args: e.getMessage()
one\ of\ argument\ of\ apiBody\ is\ invalid,\ %s = one of argument of apiBody is invalid, {0}

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/entity/TicketStatus.java:48
# args: this,event
operation\ denied.\ the\ ticket\ is\ in\ status\ of\ %s,\ cannot\ do\ the\ operation[%s] = operation denied. the ticket is in status of {0}, cannot do the operation[{1}]

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:42
# args: ctx.getVirtualIDUuid(),self.getUuid(),self.getName()
operation\ denied\ because\ the\ ticket\ submitter[uuid\:%s]\ has\ been\ deleted,\ the\ ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ deleted\ now = operation denied because the ticket submitter[uuid:{0}] has been deleted, the ticket[uuid:{1}, name:{2}] can only be deleted now

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:47
# args: ctx.getProjectUuid(),self.getUuid(),self.getName()
operation\ denied\ because\ the\ project[uuid\:%s]\ of\ the\ ticket\ has\ been\ deleted,\ the\ ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ deleted\ now = operation denied because the project[uuid:{0}] of the ticket has been deleted, the ticket[uuid:{1}, name:{2}] can only be deleted now

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:59
# args: 
operation\ denied\ because\ flow\ collection[uuid\:%s]\ it\ not\ belong\ the\ project[uuid\:%s] = operation denied because flow collection[uuid:{0}] it not belong the project[uuid:{1}]

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:71
# args: msg.getSession().getUserUuid(),self.getUuid(),self.getName()
the\ virtual\ ID[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ ticket[uuid\:%s,\ name\:%s] = the virtual ID[uuid:{0}] is not the owner of the ticket[uuid:{1}, name:{2}]

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/IAM2TicketManager.java:193
# args: 
approver\ is\ removed\ from\ project\ or\ deleted,\ flow\ collection\ changed\ to\ invalid,\ reject\ this\ ticket = approver is removed from project or deleted, flow collection changed to invalid, reject this ticket

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:74
# args: 
at\ least\ one\ flow\ is\ needed\ for\ create\ flow\ collection = at least one flow is needed for create flow collection

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:81
# args: flow.approverTitle,approveTitles
wrong\ approver\ title\ %s,\ valid\ value\ is\ %s = wrong approver title {0}, valid value is {1}

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:93
# args: flow.approverUuid
can\ not\ find\ IAM2VirtualIDVO[uuid\:%s] = can not find IAM2VirtualIDVO[uuid:{0}]

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:58
# args: 
name\ is\ needed\ when\ create\ a\ flow = name is needed when create a flow

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:63
# args: msg.getProjectUuid()
you\ have\ already\ created\ a\ collection\ for\ project[uuid\:%s] = you have already created a collection for project[uuid:{0}]

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:85
# args: 
name\ cannot\ be\ null = name cannot be null

# at: src/zstack/./premium/plugin-premium/ticket/src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:100
# args: flow.approverUuid,projectUuid
virtual\ id[uuid\:%s]\ not\ belong\ to\ project[uuid\:%s] = virtual id[uuid:{0}] not belong to project[uuid:{1}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:75
# args: this.primaryStorageUuid
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ in\ the\ clusters\ attached\ with\ the\ shared\ mount\ point\ storage[uuid\:%s]\ are\ disconnected = cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared mount point storage[uuid:{0}] are disconnected

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockAgentDeployer.java:92
# args: 
chrony\ server\ not\ configured! = chrony server not configured!

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:83
# args: msg.getVmInstanceUuid()
the\ vm[uuid\:\ %s]\ does\ not\ has\ additional\ qmp\ socket,\ it\ may\ because\ of\ the\ vm\ start\ without\ the\ global\ config[vm.additionalQmp]\ enabled,\ please\ make\ sure\ it\ enabled\ and\ reboot\ vm\ in\ zstack = the vm[uuid: {0}] does not has additional qmp socket, it may because of the vm start without the global config[vm.additionalQmp] enabled, please make sure it enabled and reboot vm in zstack

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:104
# args: 
not\ support\ do\ live\ clone\ vm\ with\ volume\ on\ shared\ block\ primary\ storage = not support do live clone vm with volume on shared block primary storage

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:114
# args: 
must\ specify\ at\ least\ one\ disk\ when\ add\ shared\ block\ group\ primary\ storage = must specify at least one disk when add shared block group primary storage

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:126
# args: vo.getUuid(),vo.getDiskUuid(),vo.getDescription(),vo.getSharedBlockGroupUuid()
shared\ block[uuid\:%s,\ diskUuid\:%s,\ description\:%s]\ already\ added\ to\ shared\ block\ group[uuid\:%s]in\ new\ shared\ block\ group = shared block[uuid:{0}, diskUuid:{1}, description:{2}] already added to shared block group[uuid:{3}]in new shared block group

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:149
# args: msg.getUuid()
shared\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage\ can\ not\ resize = shared volume[uuid: {0}] on shared block group primary storage can not resize

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:210
# args: volumeUuid,notStoppedVmUuids
shared\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage\ has\ attached\ to\ not\ stopped\ vm\ instances[uuids\:\ %s] = shared volume[uuid: {0}] on shared block group primary storage has attached to not stopped vm instances[uuids: {1}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:345
# args: 
not\ supported = not supported

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1233
# args: psUuid,imageFormat
cannot\ find\ proper\ hypervisorType\ for\ primary\ storage[uuid\:%s]\ to\ handle\ image\ format\ or\ volume\ format[%s] = cannot find proper hypervisorType for primary storage[uuid:{0}] to handle image format or volume format[{1}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:290
# args: self.getUuid(),self.getName()
the\ shared\ mount\ point\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = the shared mount point primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:507
# args: getSelfInventory().getUuid()
can\ not\ found\ any\ cluster\ attached\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %S] = can not found any cluster attached on shared block group primary storage[uuid: %S]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:828
# args: self.getUuid(),self.getName(),future.getErrorCode()
unable\ to\ reconnect\ the\ shared\ block\ group\ primary\ storage[uuid\:%s,\ name\:%s],\ %s = unable to reconnect the shared block group primary storage[uuid:{0}, name:{1}], {2}

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1027
# args: 
empty\ migrateVolumeStructs\ in\ migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg! = empty migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:729
# args: d.getPrimaryStorageUuid()
primary\ storage[uuid\:%s]\ becomes\ disconnected,\ the\ host\ has\ no\ connected\ primary\ storage\ attached = primary storage[uuid:{0}] becomes disconnected, the host has no connected primary storage attached

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:107
# args: newValue
the\ value[%s]\ is\ not\ power\ of\ 2 = the value[{0}] is not power of 2

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:386
# args: pri.getUuid()
cannot\ find\ an\ available\ host\ to\ execute\ command\ for\ shared\ block\ group\ primary\ storage[uuid\:%s] = cannot find an available host to execute command for shared block group primary storage[uuid:{0}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:408
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ connected\ shared\ block\ to\ execute\ command\ for\ shared\ block\ group\ primary\ storage[uuid\:%s] = cannot find a host which has connected shared block to execute command for shared block group primary storage[uuid:{0}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockImageStoreBackend.java:49
# args: msg.getVolume().getUuid()
can\ not\ get\ cluster\ uuid\ of\ volume\ %s = can not get cluster uuid of volume {0}

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:956
# args: img.getUuid(),img.getName(),self.getZoneUuid()
the\ image[uuid\:%s,\ name\:\ %s]\ is\ not\ available\ to\ download\ on\ any\ backup\ storage\:\n1.\ check\ if\ image\ is\ in\ status\ of\ Deleted\n2.\ check\ if\ the\ backup\ storage\ on\ which\ the\ image\ is\ shown\ as\ Ready\ is\ attached\ to\ the\ zone[uuid\:%s] = the image[uuid:{0}, name: {1}] is not available to download on any backup storage:\n1. check if image is in status of Deleted\n2. check if the backup storage on which the image is shown as Ready is attached to the zone[uuid:{2}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1303
# args: clusterUuid
no\ connected\ host\ found\ in\ the\ cluster[uuid\:%s] = no connected host found in the cluster[uuid:{0}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:692
# args: vol.getVmInstanceUuid(),state
vm[uuid\:%s]\ is\ not\ Running,\ Paused\ or\ Stopped,\ current\ state[%s] = vm[uuid:{0}] is not Running, Paused or Stopped, current state[{1}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:840
# args: volume.getUuid(),volume.getVmInstanceUuid(),state
the\ volume[uuid;%s]\ is\ attached\ to\ a\ VM[uuid\:%s]\ which\ is\ in\ state\ of\ %s,\ cannot\ do\ the\ snapshot\ merge = the volume[uuid;{0}] is attached to a VM[uuid:{1}] which is in state of {2}, cannot do the snapshot merge

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1993
# args: backupStorageUuid
cannot\ find\ backup\ storage[uuid\:%s] = cannot find backup storage[uuid:{0}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1618
# args: msg.getVolumeUuid()
can\ not\ find\ volume[uuid\:\ %s] = can not find volume[uuid: {0}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:927
# args: volume.getUuid()
not\ support\ online\ merge\ snapshot\ for\ shareable\ volume[uuid\:\ %s]\ on\ sharedblock = not support online merge snapshot for shareable volume[uuid: {0}] on sharedblock

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1432
# args: ret.firstAccessHostUuids
hosts[uuid\:%s]\ have\ the\ disk\ uuid\ of\ shared\ block,\ but\ actually\ different\ storage. = hosts[uuid:{0}] have the disk uuid of shared block, but actually different storage.

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2123
# args: 
can\ not\ find\ volume\ need\ to\ operate\ shared\ block\ group\ primary\ storage = can not find volume need to operate shared block group primary storage

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2131
# args: volumeInventory.getUuid(),self.getUuid()
KVM\ host\ which\ volume[uuid%s]\ attached\ disconnected\ with\ the\ shared\ block\ group\ storage[uuid\:%s] = KVM host which volume[uuid{0}] attached disconnected with the shared block group storage[uuid:{1}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2140
# args: psUuid
can\ not\ find\ qualified\ kvm\ host\ for\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = can not find qualified kvm host for shared block group primary storage[uuid: {0}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2151
# args: self.getUuid()
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ in\ the\ clusters\ attached\ with\ the\ shared\ block\ group\ storage[uuid\:%s]\ are\ disconnected = cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared block group storage[uuid:{0}] are disconnected

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2521
# args: spec.getVmInventory().getUuid(),String.join(",", psUuids)
VM[uuid\:%s]\ has\ multiple\ ISOs\ from\ different\ primary\ storage\:\ %s = VM[uuid:{0}] has multiple ISOs from different primary storage: {1}

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3284
# args: volumeVO.getUuid(),volumeVO.getPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ resize\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = can not find any available host to resize volume[uuid: {0}] on shared block group primary storage[uuid: {1}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3290
# args: struct.getVmHostUuid(),volumeVO.getUuid(),volumeVO.getPrimaryStorageUuid()
the\ host[uuid\:\ %s]\ running\ on\ is\ not\ available\ to\ resize\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = the host[uuid: {0}] running on is not available to resize volume[uuid: {1}] on shared block group primary storage[uuid: {2}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3400
# args: msg.getVolumeUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ take\ snapshot\ for\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = can not find any available host to take snapshot for volume[uuid: {0}] on shared block group primary storage[uuid: {1}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3458
# args: msg.getPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ hosts\ both\ connect\ to\ primary\ storage[uuid\:\ %s]\ and\ primary\ storage[uuid\:\ %s] = can not find hosts both connect to primary storage[uuid: {0}] and primary storage[uuid: {1}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3413
# args: 
only\ support\ full = only support full

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3441
# args: msg.getMigrateVolumeStructs().get(0).volumeUuid,msg.getPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ migrate\ volume[uuid\:\ %s]\ between\ shared\ block\ group\ primary\ storage[uuid\:\ %s]\ and\ [uuid\:\ %s] = can not find any available host to migrate volume[uuid: {0}] between shared block group primary storage[uuid: {1}] and [uuid: {2}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3450
# args: msg.getMigrateVolumeStructs().get(0).volumeUuid,msg.getTargetPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ migrate\ for\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s]\ and\ [uuid\:\ %s] = can not find any available host to migrate for volume[uuid: {0}] on shared block group primary storage[uuid: {1}] and [uuid: {2}]

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3502
# args: msg.getPrimaryStorageUuid()
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ attached\ with\ the\ shared\ block\ group\ storage[uuid\:%s]\ are\ disconnected = cannot find any connected host to perform the operation, it seems all KVM hosts attached with the shared block group storage[uuid:{0}] are disconnected

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:206
# args: volumeUuid,volumeVO.getActualSize(),dstPsInv.getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ volume[uuid\:\ %s]\ storage\ migration,\ required\ capacity\:\ %s,\ current\ available\ physical\ capacity\:\ %s = there are not enough capacity for volume[uuid: {0}] storage migration, required capacity: {1}, current available physical capacity: {2}

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:138
# args: imageUuid,zoneUuid,zoneUuid
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ whether\ the\ backup\ storage\ is\ attached\ to\ the\ zone[uuid\:%s]\n2.\ whether\ the\ backup\ storage\ is\ in\ connected\ status;\ try\ to\ reconnect\ it\ if\ not = cannot find the image[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\n1. whether the backup storage is attached to the zone[uuid:{2}]\n2. whether the backup storage is in connected status; try to reconnect it if not

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:160
# args: image.getUuid(),volumeUuid,image.getActualSize(),dstPsInv.getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ image[uuid\:\ %s]\ download\ while\ volume[uuid\:\ %s]\ storage\ migration,\ required\ capacity\:\ %s,\ current\ available\ physical\ capacity\:\ %s = there are not enough capacity for image[uuid: {0}] download while volume[uuid: {1}] storage migration, required capacity: {2}, current available physical capacity: {3}

# at: src/zstack/./premium/sharedblock/src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkRollbackMigrateVolumeFlow.java:69
# args: srcPsUuid
data\ on\ source\ ps[uuid\:\ %s]\ has\ been\ discarded,\ not\ support\ rollback = data on source ps[uuid: {0}] has been discarded, not support rollback

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSApiInterceptor.java:45
# args: 
password\ is\ not\ set\ while\ username\ is\ set = password is not set while username is set

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSApiInterceptor.java:49
# args: 
username\ is\ not\ set\ while\ password\ is\ set = username is not set while password is set

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSApiInterceptor.java:58
# args: msg.getPhoneNumber()
phone\ number[%s]\ already\ exists = phone number[{0}] already exists

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSApiInterceptor.java:66
# args: url
invalid\ url[%s] = invalid url[{0}]

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSApiInterceptor.java:72
# args: n
invalid\ phone\ number[%s],\ the\ DingDing\ phone\ number\ is\ like\ +86-12388889999 = invalid phone number[{0}], the DingDing phone number is like +86-12388889999

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSApiInterceptor.java:89
# args: 
username\ and\ password\ must\ either\ absent\ at\ all\ or\ present\ with\ each\ other = username and password must either absent at all or present with each other

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSApiInterceptor.java:96
# args: msg.getEmail()
invalid\ email\ address[%s] = invalid email address[{0}]

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSApplicationPlatformBase.java:107
# args: 
the\ operation\ is\ not\ permitted\ for\ the\ system\ application\ platform = the operation is not permitted for the system application platform

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSManagerImpl.java:72
# args: msg.getTopicUuid()
cannot\ find\ the\ SNSTopic[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the SNSTopic[uuid:{0}], it may have been deleted

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSManagerImpl.java:90
# args: msg.getApplicationPlatformUuid()
cannot\ find\ SNSApplicationPlatform[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find SNSApplicationPlatform[uuid:{0}], it may have been deleted

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSManagerImpl.java:100
# args: msg.getApplicationEndpointUuid()
cannot\ find\ SNSApplicationEndpoint[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find SNSApplicationEndpoint[uuid:{0}], it may have been deleted

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSTopicBase.java:126
# args: 
the\ topic\ is\ not\ subscribed\ by\ any\ endpoints = the topic is not subscribed by any endpoints

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSTopicBase.java:150
# args: 
application\ platform\ is\ disabled = application platform is disabled

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/SNSTopicBase.java:202
# args: 
application\ endpoint\ is\ disabled = application endpoint is disabled

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/platform/dingtalk/SNSDingTalkEndpoint.java:108
# args: rsp.getStatusCode(),rsp.getBody()
Sending\ message\ to\ DingTalk\ failure.\ status\:\ %s,\ body\:\ %s = Sending message to DingTalk failure. status: {0}, body: {1}

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:67
# args: getSelf().getSmtpServer(),getSelf().getSmtpPort()
cannot\ connect\ SMTP\ server[server\:\ %s,\ port\:\ %s]\ in\ 15\ seconds = cannot connect SMTP server[server: {0}, port: {1}] in 15 seconds

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:87
# args: e.getMessage()
SMTP\ server\ validation\ error\:\ %s = SMTP server validation error: {0}

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:129
# args: 
the\ endpoint\ is\ disabled = the endpoint is disabled

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:147
# args: 
no\ subject = no subject

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java:55
# args: 
The\ problem\ may\ be\ caused\ by\ an\ incorrect\ user\ name\ or\ password\ or\ email\ permission\ denied = The problem may be caused by an incorrect user name or password or email permission denied

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java:57
# args: smtpServer,smtpPort
Couldn't\ connect\ to\ host,\ port\:\ %s,\ %d.\ The\ problem\ may\ be\ caused\ by\ an\ incorrect\ smtpServer\ or\ smtpPort = Couldn't connect to host, port: {0}, {1}. The problem may be caused by an incorrect smtpServer or smtpPort

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/platform/system/SNSSystemHttpEndpoint.java:61
# args: rsp.getStatusCode(),rsp.getBody()
HTTP\ POST\ failure.\ status\:\ %s,\ body\:\ %s = HTTP POST failure. status: {0}, body: {1}

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java:172
# args: endpoint.getType()
only\ HTTP\ endpoint\ can\ subscribe\ API\ topic,\ the\ endpoint[type\:%s]\ is\ not\ a\ HTTP\ endpoint = only HTTP endpoint can subscribe API topic, the endpoint[type:{0}] is not a HTTP endpoint

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java:191
# args: 
API\ topic\ cannot\ be\ deleted = API topic cannot be deleted

# at: src/zstack/./premium/sns/src/main/java/org/zstack/sns/system/SNSSystemAlarmTopicManagerImpl.java:46
# args: 
system\ alarm\ topic\ cannot\ be\ deleted = system alarm topic cannot be deleted

# at: src/zstack/./premium/twoFactorAuthentication/src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:77
# args: 
two\ factor\ authenticator\ is\ not\ enabled = two factor authenticator is not enabled

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java:44
# args: 
not\ the\ time\ to\ clean = not the time to clean

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java:49
# args: conversionHost.getUuid(),conversionHost.getHostUuid()
conversionHost[uuid\:%s,\ hostUuid\:%s]\ is\ not\ Connected = conversionHost[uuid:{0}, hostUuid:{1}] is not Connected

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/ResumeConvertVmJobGC.java:126
# args: hostUuid
host[uuid\:%s]\ is\ not\ Connected = host[uuid:{0}] is not Connected

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/ResumeConvertVmJobGC.java:130
# args: primaryStorageUuid
primaryStorage[uuid%s]\ is\ not\ Connected = primaryStorage[uuid{0}] is not Connected

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:180
# args: duplicateMac.get()
Not\ allowed\ same\ mac\ [%s] = Not allowed same mac [{0}]

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:189
# args: duplicateElements.get(0)
Can't\ add\ same\ uuid\ in\ the\ l3Network,uuid\:\ %s = Can't add same uuid in the l3Network,uuid: {0}

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:201
# args: l3Uuid
l3Network[uuid\:%s]\ is\ Disabled,\ can\ not\ create\ vm\ on\ it = l3Network[uuid:{0}] is Disabled, can not create vm on it

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:204
# args: l3Uuid
l3Network[uuid\:%s]\ is\ system\ network,\ can\ not\ create\ user\ vm\ on\ it = l3Network[uuid:{0}] is system network, can not create user vm on it

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:236
# args: msg.getZoneUuid()
zone[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = zone[uuid:{0}] is specified but it's Disabled, can not create vm from it

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:246
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = cluster[uuid:{0}] is specified but it's Disabled, can not create vm from it

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:257
# args: msg.getHostUuid()
host[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = host[uuid:{0}] is specified but it's Disabled, can not create vm from it

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:262
# args: msg.getHostUuid(),connectionState
host[uuid\:%s]\ is\ specified\ but\ it's\ connection\ status\ is\ %s,\ can\ not\ create\ vm\ from\ it = host[uuid:{0}] is specified but it's connection status is {1}, can not create vm from it

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:218
# args: msg.getDefaultL3NetworkUuid(),msg.getL3NetworkUuids()
defaultL3NetworkUuid[uuid\:%s]\ is\ not\ in\ l3NetworkUuids%s = defaultL3NetworkUuid[uuid:{0}] is not in l3NetworkUuids{1}

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:214
# args: 
there\ are\ more\ than\ one\ L3\ network\ specified\ in\ l3NetworkUuids,\ but\ defaultL3NetworkUuid\ is\ null = there are more than one L3 network specified in l3NetworkUuids, but defaultL3NetworkUuid is null

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:68
# args: msg.getHostUuid()
host[uuid\:%s]\ must\ be\ Enabled\ and\ Connected\ to\ be\ a\ conversion\ host = host[uuid:{0}] must be Enabled and Connected to be a conversion host

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:81
# args: 
v2v\ conversion\ host\ storage\ path\ must\ be\ absolute\ path = v2v conversion host storage path must be absolute path

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:103
# args: msg.getUrl()
invalid\ v2v\ url\:\ %s = invalid v2v url: {0}

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:114
# args: srcVmUuid
vm\ instance[uuid\:%s]\ does\ not\ exist\ or\ is\ not\ a\ vmware\ vm = vm instance[uuid:{0}] does not exist or is not a vmware vm

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:123
# args: 
conversionHostUuid\ should\ not\ be\ null = conversionHostUuid should not be null

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:129
# args: msg.getConversionHostUuid()
conversion\ host[uuid\:%s]\ should\ be\ Enabled = conversion host[uuid:{0}] should be Enabled

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:141
# args: msg.getConversionHostUuid()
underlying\ host\ of\ conversion\ host[uuid\:%s]\ should\ be\ Enabled\ and\ Connected = underlying host of conversion host[uuid:{0}] should be Enabled and Connected

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:157
# args: msg.getConversionHostUuid(),msg.getPrimaryStorageUuid()
conversion\ host[uuid\:%s]\ cannot\ connect\ to\ primary\ storage[uuid\:%s] = conversion host[uuid:{0}] cannot connect to primary storage[uuid:{1}]

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:270
# args: 
primary\ storage[uuid\:%]\ is\ not\ supported\ for\ v2v = primary storage[uuid:%] is not supported for v2v

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VApiInterceptor.java:273
# args: 
primary\ storage[uuid\:%]\ is\ neither\ Enabled\ nor\ Connected = primary storage[uuid:%] is neither Enabled nor Connected

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VManagerImpl.java:450
# args: l3Uuid
Unable\ to\ find\ L3Network[uuid\:%s]\ to\ start\ the\ current\ vm,\ it\ may\ have\ been\ deleted,\ Operation\ suggestion\:\ delete\ this\ vm,\ recreate\ a\ new\ vm = Unable to find L3Network[uuid:{0}] to start the current vm, it may have been deleted, Operation suggestion: delete this vm, recreate a new vm

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VManagerImpl.java:979
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ is\ not\ a\ number = invalid network bandwidth[{0}], it is not a number

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VManagerImpl.java:974
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ must\ be\ greater\ than\ 8192 = invalid network bandwidth[{0}], it must be greater than 8192

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VManagerImpl.java:976
# args: 
networkInboundBandwidth\ execeds\ the\ max\ value\ 32G\ bps = networkInboundBandwidth execeds the max value 32G bps

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VManagerImpl.java:734
# args: msg.getHostUuid()
there\ has\ been\ a\ v2v\ conversion\ host\ with\ hostUuid\ %s = there has been a v2v conversion host with hostUuid {0}

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/V2VManagerImpl.java:968
# args: 
invalid\ v2v\ qos\ systemtag = invalid v2v qos systemtag

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:854
# args: errorCode
operation\ error,\ because\:%s = operation error, because:{0}

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:166
# args: job.getUuid()
v2v\ job[uuid\:%s]\ is\ running = v2v job[uuid:{0}] is running

# at: src/zstack/./premium/v2v/src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:424
# args: srcVmUrl
failed\ to\ get\ virt-v2v\ uri\ for\ %s = failed to get virt-v2v uri for {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/CreateVolumeBackupJob.java:170
# args: 
missing\ job\ parameters = missing job parameters

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/CreateVolumeBackupJob.java:129
# args: 
missing\ 'retentionType'\ in\ job\ parameters = missing 'retentionType' in job parameters

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/CreateVolumeBackupJob.java:134
# args: 
missing\ 'retentionValue'\ in\ job\ parameters = missing 'retentionValue' in job parameters

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/CreateVolumeBackupJob.java:141
# args: 
missing\ 'backupStorageUuids'\ in\ job\ parameters = missing 'backupStorageUuids' in job parameters

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/CreateVolumeBackupJob.java:150
# args: 
job\ parameter\ 'backupStorageUuids'\ is\ empty = job parameter 'backupStorageUuids' is empty

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/CreateVolumeBackupJob.java:155
# args: bsUuid
unexpected\ backup\ storage\ uuid\:\ %s = unexpected backup storage uuid: {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:80
# args: msg.getDatabaseBackupUuid(),msg.getBackupStorageUuid()
database\ backup[uuid%s]\ has\ not\ been\ exported\ from\ backupStorage[uuid\:%s] = database backup[uuid{0}] has not been exported from backupStorage[uuid:{1}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:94
# args: msg.getDatabaseBackupUuid(),msg.getBackupStorageUuid()
database\ backup[uuid%s]\ has\ been\ exported\ from\ backupStorage[uuid\:%s] = database backup[uuid{0}] has been exported from backupStorage[uuid:{1}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:107
# args: 
do\ not\ allow\ cover\ database\ from\ backup = do not allow cover database from backup

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:111
# args: 
installPath\ and\ bsUrl\ are\ both\ need = installPath and bsUrl are both need

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:120
# args: 
databaseBackup[uuid\:%s]\ is\ not\ Enabled\ and\ Ready = databaseBackup[uuid:{0}] is not Enabled and Ready

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:129
# args: url
illegal\ url[%s],\ correct\ example\ is\ ssh\://username\:password@hostname[\:sshPort]/path = illegal url[{0}], correct example is ssh://username:password@hostname[:sshPort]/path

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java:72
# args: self.getUuid()
database\ backup[uuid\:%s]\ is\ not\ Enabled\ and\ Ready = database backup[uuid:{0}] is not Enabled and Ready

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java:317
# args: msg.getDatabaseBackupUuid(),msg.getSrcBackupStorageUuid()
database\ backup[uuid\:%s]\ not\ found\ in\ backup\ storage[uuid\:%s] = database backup[uuid:{0}] not found in backup storage[uuid:{1}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:73
# args: msg.getDatabaseBackupUuid()
database\ backup\ [uuid\:%s]\ is\ not\ existed\ yet = database backup [uuid:{0}] is not existed yet

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:89
# args: 
backup\ storage[uuid\:%s]\ is\ not\ enabled\ and\ connected = backup storage[uuid:{0}] is not enabled and connected

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:460
# args: 
database\ backup\ version\ is\ not\ match = database backup version is not match

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:526
# args: 
cannot\ get\ free\ port\ to\ listen = cannot get free port to listen

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:554
# args: version,dbf.getDbVersion()
database\ backup\ version[%s]\ is\ not\ match\ currently\ version[%s] = database backup version[{0}] is not match currently version[{1}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:55
# args: currentState,msgName,checker.getStatesForOperation(msgName)
current\ backup\ storage\ state[%s]\ doesn't\ allow\ to\ proceed\ message[%s],\ allowed\ states\ are\ %s = current backup storage state[{0}] doesn't allow to proceed message[{1}], allowed states are {2}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:160
# args: bsType,bsUuid
Unexpected\ backup\ storage[type\:%s,uuid\:%s] = Unexpected backup storage[type:{0},uuid:{1}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:181
# args: msg.getVolumeUuid()
Can\ not\ create\ volume\ backup\ for\ shareable\ volume[uuid\:%s] = Can not create volume backup for shareable volume[uuid:{0}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:185
# args: msg.getVolumeUuid()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ it\ is\ not\ attached\ to\ any\ vm = Failed to create volume backup for volume[uuid:{0}], because it is not attached to any vm

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:194
# args: msg.getVolumeUuid(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ its\ attached\ volume\ is\ not\ in\ state[%s,\ %s] = Failed to create volume backup for volume[uuid:{0}], because its attached volume is not in state[{1}, {2}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:191
# args: msg.getVolumeUuid(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ the\ vm\ is\ not\ in\ state[%s,\ %s] = Failed to create volume backup for volume[uuid:{0}], because the vm is not in state[{1}, {2}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:203
# args: msg.getVolumeUuid()
Volume[uuid\:%s]\ is\ not\ root\ volume = Volume[uuid:{0}] is not root volume

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:210
# args: t.get(0),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ backups\ for\ VM[uuid\:%s],\ because\ it\ is\ not\ in\ state[%s,\ %s] = Failed to create backups for VM[uuid:{0}], because it is not in state[{1}, {2}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:224
# args: groupUuid
No\ volume\ backup\ found\ for\ group\ uuid\:\ %s = No volume backup found for group uuid: {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:244
# args: backupUuid,state
volume\ backup[uuid\:%s]\ is\ in\ state\ %s,\ cannot\ revert\ volume\ to\ it = volume backup[uuid:{0}] is in state {1}, cannot revert volume to it

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:249
# args: backupUuid
original\ volume\ for\ backup[uuid\:%s]\ has\ been\ deleted,\ cannot\ revert\ volume\ to\ it = original volume for backup[uuid:{0}] has been deleted, cannot revert volume to it

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:257
# args: backupUuid
VM\ not\ found\ with\ volume\ backup[uuid\:%s] = VM not found with volume backup[uuid:{0}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:261
# args: vmState
VM\ is\ not\ in\ stopped\ state\:\ %s = VM is not in stopped state: {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:275
# args: 
No\ available\ backup\ storage\ found = No available backup storage found

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:412
# args: rsp.getError()
%s = {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:164
# args: 
Operation\ not\ supported\ on\ shared\ volume = Operation not supported on shared volume

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:169
# args: volumeUuid
No\ VM\ found\ for\ volume[uuid\:%s] = No VM found for volume[uuid:{0}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:487
# args: msg.getRootVolumeUuid()
No\ VM\ found\ with\ root\ volume\ uuid\:\ %s = No VM found with root volume uuid: {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1174
# args: msg.getDstBackupStorageUuid(),msg.getSrcBackupStorageUuid(),BackupStorageState.Disabled.toString()
One\ of\ the\ backup\ storage[uuids\:\ %s,\ %s]\ is\ in\ the\ state\ of\ %s,\ can\ not\ do\ sync\ operation = One of the backup storage[uuids: {0}, {1}] is in the state of {2}, can not do sync operation

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:898
# args: 
sync\ task\ failed. = sync task failed.

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:905
# args: reply.getStatus()
unexpected\ task\ status\:\ %s = unexpected task status: {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:281
# args: vos.stream().filter( vo -> !succeedUuids.contains(vo.getUuid())).collect(Collectors.toList())
failed\ to\ create\ image\ from\ backup\ %s = failed to create image from backup {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:531
# args: hypervisorType
No\ VolumeBackupFactory\ of\ type[%s]\ found = No VolumeBackupFactory of type[{0}] found

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:548
# args: msg.getBackupStorageUuid(),BackupStorageState.Disabled.toString()
One\ of\ the\ backup\ storage[uuid\:\ %s]\ is\ in\ the\ state\ of\ %s,\ can\ not\ do\ sync\ operation = One of the backup storage[uuid: {0}] is in the state of {1}, can not do sync operation

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:668
# args: struct.getBackupUuid(),struct.getBackupStorageUuid()
Volume\ backup[uuid\:%s]\ not\ found\ on\ backup\ storage[uuid\:%s] = Volume backup[uuid:{0}] not found on backup storage[uuid:{1}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1069
# args: backupUuid,srcBackupStorageUuid
volume\ backup[uuid\:%s]\ not\ found\ in\ backup\ storage[uuid\:%s] = volume backup[uuid:{0}] not found in backup storage[uuid:{1}]

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1253
# args: groupUuid
No\ volume\ backups\ found\ with\ group\ uuid\:\ %s = No volume backups found with group uuid: {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1260
# args: groupUuid
Root\ volume\ missing\ within\ group\ uuid\:\ %s = Root volume missing within group uuid: {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1266
# args: groupUuid
Multiple\ root\ volumes\ found\ within\ group\ uuid\:\ %s = Multiple root volumes found within group uuid: {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1278
# args: groupUuid
No\ permission\ to\ volume\ backups\ within\ group\ uuid\:\ %s = No permission to volume backups within group uuid: {0}

# at: src/zstack/./premium/volumebackup/src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1415
# args: vo.getUuid()
Volume\ backup[uuid\:%s]\ not\ found\ on\ any\ backup\ storage = Volume backup[uuid:{0}] not found on any backup storage

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java:125
# args: clz.getName()
resource[%s]\ doesn't\ support\ zwatch\ return\ with\ clause = resource[{0}] doesn't support zwatch return with clause

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java:263
# args: paramName,expr
unknown\ parameter[%s]\ in\ zwatch\ return\ with\ clause,\ %s = unknown parameter[{0}] in zwatch return with clause, {1}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java:272
# args: expr,e.getMessage()
invalid\ zwatch\ return\ with\ clause\:\ %s,\ %s = invalid zwatch return with clause: {0}, {1}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:62
# args: msg.getActionUuid(),msg.getSubscriptionUuid()
the\ action[uuid\:%s]\ already\ attached\ to\ the\ event\ subscription[uuid\:%s] = the action[uuid:{0}] already attached to the event subscription[uuid:{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:86
# args: msg.getKey()
event\ doesn't\ have\ label[%s] = event doesn't have label[{0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:91
# args: msg.getKey()
the\ event\ subscription\ already\ has\ the\ label[%s] = the event subscription already has the label[{0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:134
# args: msg.getNamespace()
namespace[%s]\ not\ found = namespace[{0}] not found

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:108
# args: ns.getName(),msg.getEventName()
namespace[%s]\ doesn't\ have\ the\ event[%s] = namespace[{0}] doesn't have the event[{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:116
# args: msg.getEventName(),l.getKey()
event[%s]\ doesn't\ have\ the\ label[%s] = event[{0}] doesn't have the label[{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:160
# args: k,l
duplicate\ key[%s]\ with\ values%s = duplicate key[{0}] with values{1}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:140
# args: msg.getNamespace(),msg.getMetricName()
namespace[%s]\ doesn't\ have\ the\ metric[%s] = namespace[{0}] doesn't have the metric[{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:149
# args: msg.getMetricName(),l.getKey()
the\ metric[%s]\ doesn't\ have\ the\ label[%s] = the metric[{0}] doesn't have the label[{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:172
# args: actionType
invalid\ action\ type[%s] = invalid action type[{0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:177
# args: actionUuid,actionType
action[uuid\:%s,\ type\:%s]\ not\ found = action[uuid:{0}, type:{1}] not found

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:185
# args: msg.getActionUuid(),msg.getActionType(),msg.getAlarmUuid()
duplicated\ action[uuid\:%s,\ type\:%s]\ for\ the\ alarm[uuid\:%s] = duplicated action[uuid:{0}, type:{1}] for the alarm[uuid:{2}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:195
# args: msg.getKey(),msg.getOperator(),msg.getValue(),msg.getAlarmUuid()
duplicate\ label[key\:%s,\ operator\:%s,\ value\:%s]\ for\ the\ alarm[uuid\:%s] = duplicate label[key:{0}, operator:{1}, value:{2}] for the alarm[uuid:{3}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:95
# args: msg.getSubscriptionUuid()
cannot\ find\ the\ event\ subscription[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the event subscription[uuid:{0}], it may have been deleted

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:104
# args: msg.getAlarmUuid()
cannot\ find\ the\ alarm[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the alarm[uuid:{0}], it may have been deleted

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java:51
# args: actionUuid
cannot\ find\ the\ topic[uuid\:%s] = cannot find the topic[uuid:{0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java:92
# args: msg.getAlarmTextTemplateUuid()
cannot\ find\ SNSTextTemplate[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find SNSTextTemplate[uuid:{0}], it may have been deleted

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:32
# args: msg.getApplicationPlatformType()
invalid\ application\ platform\ type[%s] = invalid application platform type[{0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:37
# args: msg.getApplicationPlatformType()
application\ platform/endpoint\ [%s]\ doesn't\ support\ user-defined\ template = application platform/endpoint [{0}] doesn't support user-defined template

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java:261
# args: DATA_DIR_CAPACITY_ALARM_UUID
alarm[uuid\:%s]\ is\ a\ system\ alarm\ which\ cannot\ be\ deleted = alarm[uuid:{0}] is a system alarm which cannot be deleted

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java:272
# args: SNSSystemAlarmTopicManager.SYSTEM_ALARM_TOPIC_UUID,DATA_DIR_CAPACITY_ALARM_UUID
removing\ system\ topic[uuid\:%s]\ from\ system\ alarm[uuid\:%s]\ is\ forbidden = removing system topic[uuid:{0}] from system alarm[uuid:{1}] is forbidden

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:85
# args: l.getKey(),AuditData.queryableLabels
invalid\ label[%s],\ valid\ queryable\ labels\ are\ %s = invalid label[{0}], valid queryable labels are {1}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:122
# args: msg.getStartTime(),msg.getEndTime()
startTime[%s]\ is\ greater\ than\ endTime[%s] = startTime[{0}] is greater than endTime[{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:69
# args: Namespace.ZSTACK_NAMESPACE_PREFIX
namespace\ name\ cannot\ start\ with\ %s\ that\ is\ reserved = namespace name cannot start with {0} that is reserved

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:101
# args: AuditData.TAG_RESOURCE_UUID
label[%s]\ must\ be\ specified = label[{0}] must be specified

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:107
# args: msg.getSession().getAccountUuid(),resourceUuid
account\ has\ no\ access\ to\ the\ resource[uuid\:\ %s] = account has no access to the resource[uuid: {0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:143
# args: end,msg.getEndTime(),start,msg.getStartTime()
endTime[%s,\ %sms]\ must\ not\ be\ before\ startTime[%s,\ %sms] = endTime[{0}, {1}ms] must not be before startTime[{2}, {3}ms]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:161
# args: msg.getNamespace()
no\ namespace[%s]\ defined\ in\ the\ system = no namespace[{0}] defined in the system

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:165
# args: msg.getNamespace(),msg.getMetricName()
the\ namespace[%s]\ has\ no\ metric[%s] = the namespace[{0}] has no metric[{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/datatype/Function.java:106
# args: expr,e.getMessage()
invalid\ function\:\ %s,\ %s = invalid function: {0}, {1}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/datatype/Function.java:110
# args: expr
invalid\ expression\:\ %s,\ no\ function\ found = invalid expression: {0}, no function found

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/datatype/Label.java:54
# args: str
the\ label\ string[%s]\ contains\ no\ valid\ operator = the label string[{0}] contains no valid operator

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/datatype/Label.java:69
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'key'\ field\ cannot\ be\ null.\ %s = invalid label, 'key' field cannot be null. {0}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/datatype/Label.java:72
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'op'\ field\ is\ null\ or\ something\ another\ than\ Regex\ and\ Equal.\ %s = invalid label, 'op' field is null or something another than Regex and Equal. {0}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/datatype/Label.java:75
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'value'\ field\ cannot\ be\ null.\ %s = invalid label, 'value' field cannot be null. {0}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/function/ArgumentChecker.java:30
# args: value,name
invalid\ value[%s]\ of\ the\ argument[%s] = invalid value[{0}] of the argument[{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/function/LimitFunction.java:21
# args: v
value[%s]\ is\ not\ a\ Integer\ number = value[{0}] is not a Integer number

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/function/LimitFunction.java:18
# args: v
invalid\ argument[limit\:%s],\ it\ can't\ be\ a\ negative\ number = invalid argument[limit:{0}], it can't be a negative number

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/function/MetricFunction.java:46
# args: name
missing\ required\ argument[%s] = missing required argument[{0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/function/MetricFunction.java:59
# args: k
duplicate\ argument[%s] = duplicate argument[{0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/function/MetricFunction.java:68
# args: func.getName()
unknown\ function[%s] = unknown function[{0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/function/SortFunction.java:40
# args: arg.name
unknown\ argument[%s] = unknown argument[{0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/influxdb/InfluxDBEventDatabaseDriver.java:130
# args: name
cannot\ find\ EventFamily[name\:%s] = cannot find EventFamily[name:{0}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/influxdb/InfluxDBEventDatabaseDriver.java:152
# args: name,namespace
cannot\ find\ EventFamily[name\:%s,\ namespace\:%s] = cannot find EventFamily[name:{0}, namespace:{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/influxdb/InfluxDBEventDatabaseDriver.java:384
# args: label.getKey(),InfluxEventData.ALL_TAG_NAMES
invalid\ query\ label[%s].\ Allowed\ label\ names\ are\ %s = invalid query label[{0}]. Allowed label names are {1}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/influxdb/InfluxDBEventDatabaseDriver.java:408
# args: name.getValue(),InfluxEventData.TAG_NAMESPACE
there\ are\ multiple\ EventFamily\ with\ the\ name[%s],\ you\ must\ specify\ the\ label[%s] = there are multiple EventFamily with the name[{0}], you must specify the label[{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:58
# args: ret.getError()
unable\ to\ query\ influxdb,\ %s = unable to query influxdb, {0}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:69
# args: JSONObjectUtil.toJsonString(ret)
invalid\ influxdb\ response\:\ %s,\ no\ name\ found\ in\ columns = invalid influxdb response: {0}, no name found in columns

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:84
# args: retention,res.getError()
failed\ to\ create\ influxdb\ retention\ '%s',\ %s = failed to create influxdb retention '{0}', {1}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java:43
# args: getName(),queryObject.getMetricName()
namespace[%s]\ has\ no\ metric[%s] = namespace[{0}] has no metric[{1}]

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java:49
# args: m.getName(),getName(),l.getKey()
metric[%s]\ of\ the\ namespace[%s]\ has\ no\ label\ named\ %s = metric[{0}] of the namespace[{1}] has no label named {2}

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/namespace/NamespaceEventManagerImpl.java:288
# args: 
error\ happened\ but\ reason\ not\ specified = error happened but reason not specified

# at: src/zstack/./premium/zwatch/src/main/java/org/zstack/zwatch/namespace/SystemNamespace.java:31
# args: d,Platform.getManagementServerIp()
folder[%s]\ not\ found\ on\ the\ management\ server[%s] = folder[{0}] not found on the management server[{1}]

# at: src/zstack/./rest/src/main/java/org/zstack/rest/TypeVerifier.java:22
# args: f.getName(),source
[%s]\ field\ is\ excepted\ an\ int\ or\ long,\ but\ was\ [%s]. = [{0}] field is excepted an int or long, but was [{1}].

# at: src/zstack/./rest/src/main/java/org/zstack/rest/TypeVerifier.java:31
# args: f.getName(),source
Invalid\ value\ for\ boolean\ field\ [%s],\ [%s]\ is\ not\ a\ valid\ boolean\ string[true,\ false]. = Invalid value for boolean field [{0}], [{1}] is not a valid boolean string[true, false].

# at: src/zstack/./search/src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:432
# args: attr,inventoryClass.getName()
condition\ name[%s]\ is\ invalid,\ no\ such\ field\ on\ inventory\ class[%s] = condition name[{0}] is invalid, no such field on inventory class[{1}]

# at: src/zstack/./search/src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:437
# args: attr,attr,inventoryClass.getName()
condition\ name[%s]\ is\ invalid,\ field[%s]\ of\ inventory[%s]\ is\ annotated\ as\ @Unqueryable\ field = condition name[{0}] is invalid, field[{1}] of inventory[{2}] is annotated as @Unqueryable field

# at: src/zstack/./search/src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:448
# args: info.jpaMetaClass.getName(),attr
entity\ meta\ class[%s]\ has\ no\ field[%s] = entity meta class[{0}] has no field[{1}]

# at: src/zstack/./search/src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:1000
# args: f,info.inventoryClass.getSimpleName(),info.premitiveFieldNames
field[%s]\ is\ not\ a\ primitive\ of\ the\ inventory\ %s;\ you\ cannot\ specify\ it\ in\ the\ parameter\ 'fields';valid\ fields\ are\ %s = field[{0}] is not a primitive of the inventory {1}; you cannot specify it in the parameter 'fields';valid fields are {2}

# at: src/zstack/./search/src/main/java/org/zstack/query/QueryFacadeImpl.java:495
# args: JSONObjectUtil.toJsonString(cond)
'value'\ of\ query\ condition\ %s\ cannot\ be\ null = 'value' of query condition {0} cannot be null

# at: src/zstack/./search/src/main/java/org/zstack/zql/ast/visitors/OrderByVisitor.java:13
# args: node.getDirection()
invalid\ order\ by\ clause,\ expect\ direction[asc,desc]\ but\ got\ %s = invalid order by clause, expect direction[asc,desc] but got {0}

# at: src/zstack/./search/src/main/java/org/zstack/zql/ast/visitors/OrderByVisitor.java:19
# args: m.simpleInventoryName(),node.getField()
invalid\ order\ by\ clause,\ inventory[%s]\ doesn't\ have\ field[%s] = invalid order by clause, inventory[{0}] doesn't have field[{1}]

# at: src/zstack/./search/src/main/java/org/zstack/zql/ast/visitors/plugin/SumPlugin.java:31
# args: 
the\ field\ to\ sum\ must\ be\ specified = the field to sum must be specified

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:63
# args: name
%s\ should\ not\ be\ null = {0} should not be null

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:86
# args: 
zoneUuids,\ backupStorageUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids, backupStorageUuids must have at least one be none-empty list, or all is set to true

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:116
# args: msg.getBackupStorageUuid(),msg.getZoneUuid()
backup\ storage[uuid\:%s]\ has\ not\ been\ attached\ to\ zone[uuid\:%s] = backup storage[uuid:{0}] has not been attached to zone[uuid:{1}]

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:125
# args: msg.getBackupStorageUuid(),msg.getZoneUuid()
backup\ storage[uuid\:%s]\ has\ been\ attached\ to\ zone[uuid\:%s] = backup storage[uuid:{0}] has been attached to zone[uuid:{1}]

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageBase.java:136
# args: url,e.toString()
cannot\ get\ image.\ The\ image\ url\ is\ %s.\ Exception\ is\ %s = cannot get image. The image url is {0}. Exception is {1}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageBase.java:144
# args: self.getUuid(),self.getName(),url,size,self.getAvailableCapacity()
the\ backup\ storage[uuid\:%s,\ name\:%s]\ has\ not\ enough\ capacity\ to\ download\ the\ image[%s].Required\ size\:%s,\ available\ size\:%s = the backup storage[uuid:{0}, name:{1}] has not enough capacity to download the image[{2}].Required size:{3}, available size:{4}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageBase.java:159
# args: msg.getClass().getName(),self.getStatus()
backup\ storage\ cannot\ proceed\ message[%s]\ because\ its\ status\ is\ %s = backup storage cannot proceed message[{0}] because its status is {1}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageBase.java:165
# args: msg.getClass().getName(),self.getState()
backup\ storage\ cannot\ proceed\ message[%s]\ because\ its\ state\ is\ %s = backup storage cannot proceed message[{0}] because its state is {1}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageCapacityUpdater.java:139
# args: size,backupStorageUuid,capacityVO.getAvailableCapacity()
cannot\ reserve\ %s\ on\ the\ backup\ storage[uuid\:%s],\ it\ only\ has\ %s\ available = cannot reserve {0} on the backup storage[uuid:{1}], it only has {2} available

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java:309
# args: 
capacity\ reservation\ on\ all\ backup\ storage\ failed = capacity reservation on all backup storage failed

# at: src/zstack/./storage/src/main/java/org/zstack/storage/backup/BackupStorageReservedCapacityAllocatorFlow.java:46
# args: BackupStorageGlobalConfig.RESERVED_CAPACITY.value(),spec.getSize()
after\ subtracting\ reserved\ capacity[%s],\ no\ backup\ storage\ has\ required\ capacity[%s\ bytes] = after subtracting reserved capacity[{0}], no backup storage has required capacity[{1} bytes]

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:79
# args: 
zoneUuids,\ clusterUuids,\ primaryStorageUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids, clusterUuids, primaryStorageUuids must have at least one be none-empty list, or all is set to true

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:101
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ has\ not\ been\ attached\ to\ cluster[uuid\:%s]\ yet = primary storage[uuid:{0}] has not been attached to cluster[uuid:{1}] yet

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:118
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ has\ been\ attached\ to\ cluster[uuid\:%s] = primary storage[uuid:{0}] has been attached to cluster[uuid:{1}]

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:133
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ and\ cluster[uuid\:%s]\ are\ not\ in\ the\ same\ zone = primary storage[uuid:{0}] and cluster[uuid:{1}] are not in the same zone

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:155
# args: url
url[%s]\ has\ been\ occupied,\ it\ cannot\ be\ duplicate\ in\ same\ cluster = url[{0}] has been occupied, it cannot be duplicate in same cluster

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:175
# args: msg.getPrimaryStorageUuid(),clusterUuidsString
primary\ storage[uuid\:%s]\ cannot\ be\ deleted\ for\ still\ being\ attached\ to\ cluster[uuid\:%s]. = primary storage[uuid:{0}] cannot be deleted for still being attached to cluster[uuid:{1}].

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageAvoidAllocatorFlow.java:50
# args: spec.getAvoidPrimaryStorageUuids()
after\ removing\ primary\ storage%s\ to\ avoid,\ there\ is\ no\ candidate\ primary\ storage\ anymore.\ please\ check\ primary\ storage\ status\ and\ state\ in\ the\ cluster. = after removing primary storage{0} to avoid, there is no candidate primary storage anymore. please check primary storage status and state in the cluster.

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:540
# args: bsUuid,self.getZoneUuid(),self.getUuid()
backup\ storage[uuid\:%s]\ is\ not\ attached\ to\ zone[uuid\:%s]\ the\ primary\ storage[uuid\:%s]\ belongs\ to = backup storage[uuid:{0}] is not attached to zone[uuid:{1}] the primary storage[uuid:{2}] belongs to

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:643
# args: 
operation\ not\ supported = operation not supported

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:1183
# args: volumeUuid
cannot\ attach\ volume[uuid\:%s]\ whose\ primary\ storage\ is\ Maintenance = cannot attach volume[uuid:{0}] whose primary storage is Maintenance

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageCapacityUpdater.java:283
# args: size,capacityVO.getUuid()
cannot\ reserve\ %s\ bytes\ on\ the\ primary\ storage[uuid\:%s],\ it's\ short\ of\ available\ capacity = cannot reserve {0} bytes on the primary storage[uuid:{1}], it's short of available capacity

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageDeleteBitGC.java:45
# args: ps.getUuid(),ps.getStatus().toString()
the\ primary\ storage[uuid\:%s]\ is\ not\ in\ status\ of\ Connected,\ current\ status\ is\ %s = the primary storage[uuid:{0}] is not in status of Connected, current status is {1}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:89
# args: systemTag,uuid
%s\ is\ invalid.\ %s\ is\ not\ a\ valid\ zstack\ uuid = {0} is invalid. {1} is not a valid zstack uuid

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:93
# args: resourceUuid
no\ primary\ storage[uuid\:%s]\ found = no primary storage[uuid:{0}] found

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:454
# args: errs
cannot\ find\ any\ qualified\ primary\ storage,\ errors\ are\ %s = cannot find any qualified primary storage, errors are {0}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageReservedCapacityAllocatorFlow.java:49
# args: PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value(),spec.getSize()
after\ subtracting\ reserved\ capacity[%s],\ there\ is\ no\ primary\ storage\ having\ required\ size[%s\ bytes] = after subtracting reserved capacity[{0}], there is no primary storage having required size[{1} bytes]

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java:126
# args: uuid
cannot\ find\ primary\ storage[uuid\:%s],\ the\ uuid\ is\ specified\ in\ instance\ offering\ or\ disk\ offering = cannot find primary storage[uuid:{0}], the uuid is specified in instance offering or disk offering

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java:166
# args: tag
cannot\ find\ primary\ storage\ having\ user\ tag[%s].\ The\ user\ tag\ is\ specified\ in\ instance\ offering\ or\ disk\ offering = cannot find primary storage having user tag[{0}]. The user tag is specified in instance offering or disk offering

# at: src/zstack/./storage/src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorFlow.java:85
# args: extp.getClass().getName()
PrimaryStorageTagAllocatorExtensionPoint[%s]\ returns\ zero\ primary\ storage\ candidate = PrimaryStorageTagAllocatorExtensionPoint[{0}] returns zero primary storage candidate

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:79
# args: msg.getUuid()
volume\ snapshot[uuid\:%s]\ is\ not\ on\ primary\ storage,\ cannot\ be\ backed\ up = volume snapshot[uuid:{0}] is not on primary storage, cannot be backed up

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:87
# args: msg.getUuid(),msg.getBackupStorageUuid()
volume\ snapshot[uuid\:%s]\ is\ already\ on\ backup\ storage[uuid\:\ %s] = volume snapshot[uuid:{0}] is already on backup storage[uuid: {1}]

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:99
# args: msg.getUuid(),priUuid,zoneUuid,msg.getBackupStorageUuid()
volume\ snapshot[uuid\:%s]\ is\ on\ primary\ storage[uuid\:%s]\ which\ is\ in\ zone[uuid\:%s]\ that\ backup\ storage[uuid\:%s]\ is\ not\ attached\ to = volume snapshot[uuid:{0}] is on primary storage[uuid:{1}] which is in zone[uuid:{2}] that backup storage[uuid:{3}] is not attached to

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:107
# args: 
either\ volumeUuid\ or\ treeUuid\ must\ be\ set = either volumeUuid or treeUuid must be set

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:117
# args: msg.getVolumeUuid(),status
volume[uuid\:%s]\ is\ not\ in\ status\ Ready,\ current\ is\ %s,\ can't\ create\ snapshot = volume[uuid:{0}] is not in status Ready, current is {1}, can't create snapshot

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:144
# args: msg.getUuid(),state
volume\ snapshot[uuid\:%s]\ is\ in\ state\ %s,\ cannot\ revert\ volume\ to\ it = volume snapshot[uuid:{0}] is in state {1}, cannot revert volume to it

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:149
# args: msg.getUuid()
original\ volume\ for\ snapshot[uuid\:%s]\ has\ been\ deleted,\ cannot\ revert\ volume\ to\ it = original volume for snapshot[uuid:{0}] has been deleted, cannot revert volume to it

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:335
# args: vol.getUuid(),reply.getError()
cannot\ ask\ primary\ storage[uuid\:%s]\ for\ volume\ snapshot\ capability,\ see\ detail\ [%s] = cannot ask primary storage[uuid:{0}] for volume snapshot capability, see detail [{1}]

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:524
# args: primaryStorageUuid,vol.getUuid()
primary\ storage[uuid\:%s]\ doesn't\ support\ volume\ snapshot;\ cannot\ create\ snapshot\ for\ volume[uuid\:%s] = primary storage[uuid:{0}] doesn't support volume snapshot; cannot create snapshot for volume[uuid:{1}]

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:135
# args: currentRoot.getUuid(),currentRoot.getName()
cannot\ find\ volume\ snapshot[uuid\:%s,\ name\:%s],\ it\ may\ have\ been\ deleted\ by\ previous\ operation = cannot find volume snapshot[uuid:{0}, name:{1}], it may have been deleted by previous operation

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:668
# args: failSnapshot.getUuid(),failSnapshot.getName(),evt
failed\ to\ change\ status\ of\ volume\ snapshot[uuid\:%s,\ name\:%s]\ by\ status\ event[%s] = failed to change status of volume snapshot[uuid:{0}, name:{1}] by status event[{2}]

# at: src/zstack/./storage/src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:1266
# args: rmsg.getVolume().getUuid(),rmsg.getSnapshot().getUuid(),rmsg.getVolume().getVmInstanceUuid(),state
unable\ to\ reset\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s],\ the\ vm[uuid\:%s]\ volume\ attached\ to\ is\ not\ in\ Stopped\ state,\ current\ state\ is\ %s = unable to reset volume[uuid:{0}] to snapshot[uuid:{1}], the vm[uuid:{2}] volume attached to is not in Stopped state, current state is {3}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/DownloadIsoForVmExtension.java:133
# args: errorCodes.get(0).getDetails()
unable\ to\ download\ iso\ to\ primary\ storage,\ becasue\:\ %s = unable to download iso to primary storage, becasue: {0}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:208
# args: 
Can't\ attach\ volume\ to\ VM,\ no\ qualified\ cluster = Can't attach volume to VM, no qualified cluster

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:98
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ in\ status\ of\ deleted.\ This\ is\ operation\ is\ to\ recover\ a\ deleted\ data\ volume = the volume[uuid:{0}] is not in status of deleted. This is operation is to recover a deleted data volume

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:235
# args: vol.getUuid()
the\ volume[uuid\:%s]\ is\ in\ status\ of\ deleted,\ cannot\ do\ the\ operation = the volume[uuid:{0}] is in status of deleted, cannot do the operation

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:116
# args: msg.getImageUuid(),ImageMediaType.DataVolumeTemplate,type
image[uuid\:%s]\ is\ not\ %s,\ it's\ %s = image[uuid:{0}] is not {1}, it's {2}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:120
# args: img.getUuid(),img.getState()
image[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = image[uuid:{0}] is not Enabled, it's {1}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:124
# args: img.getUuid(),img.getStatus()
image[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = image[uuid:{0}] is not Ready, it's {1}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:136
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ Root\ volume,\ can\ not\ be\ attach\ to\ vm = volume[uuid:{0}] is Root volume, can not be attach to vm

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:143
# args: msg.getVolumeUuid(),state,VolumeState.Enabled
volume[uuid\:%s]\ is\ in\ state[%s],\ data\ volume\ can\ only\ be\ attached\ when\ state\ is\ %s = volume[uuid:{0}] is in state[{1}], data volume can only be attached when state is {2}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:148
# args: msg.getVolumeUuid(),status,VolumeStatus.Ready,VolumeStatus.NotInstantiated
volume[uuid\:%s]\ is\ in\ status[%s],\ data\ volume\ can\ only\ be\ attached\ when\ status\ is\ %s\ or\ %S = volume[uuid:{0}] is in status[{1}], data volume can only be attached when status is {2} or %S

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:155
# args: msg.getVolumeUuid()
data\ volume[uuid\:%s]\ is\ not\ attached\ to\ any\ vm,\ can't\ detach = data volume[uuid:{0}] is not attached to any vm, can't detach

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:159
# args: msg.getVolumeUuid()
to\ detach\ shareable\ data\ volume[uuid\:%s],\ vm\ uuid\ is\ needed. = to detach shareable data volume[uuid:{0}], vm uuid is needed.

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:164
# args: vol.getUuid(),vol.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ Root\ Volume,\ can't\ detach\ it = the volume[uuid:{0}, name:{1}] is Root Volume, can't detach it

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:221
# args: msg.getVmInstanceUuid(),msg.getVolumeUuid()
the\ vm[uuid\:%s]\ doesn't\ support\ to\ online\ attach\ volume[%s]\ on\ the\ basis\ of\ that\ the\ image\ platform\ type\ of\ the\ vm\ is\ other\  = the vm[uuid:{0}] doesn't support to online attach volume[{1}] on the basis of that the image platform type of the vm is other 

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:226
# args: vol.getUuid(),vol.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ Root\ Volume,\ can't\ attach\ it = the volume[uuid:{0}, name:{1}] is Root Volume, can't attach it

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:231
# args: vol.getUuid()
data\ volume[uuid\:%s]\ is\ Disabled,\ can't\ attach = data volume[uuid:{0}] is Disabled, can't attach

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:239
# args: vol.getUuid()
data\ volume[uuid\:%s]\ has\ been\ attached\ to\ some\ vm,\ can't\ attach\ again = data volume[uuid:{0}] has been attached to some vm, can't attach again

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:244
# args: VolumeStatus.Ready,VolumeStatus.NotInstantiated,vol.getStatus()
data\ volume\ can\ only\ be\ attached\ when\ status\ is\ [%s,\ %s],\ current\ is\ %s = data volume can only be attached when status is [{0}, {1}], current is {2}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:252
# args: vol.getUuid(),vol.getFormat(),volHvType,msg.getVmInstanceUuid(),hvType
data\ volume[uuid\:%s]\ has\ format[%s]\ that\ can\ only\ be\ attached\ to\ hypervisor[%s],\ but\ vm[uuid\:%s]\ has\ hypervisor\ type[%s].\ Can't\ attach = data volume[uuid:{0}] has format[{1}] that can only be attached to hypervisor[{2}], but vm[uuid:{3}] has hypervisor type[{4}]. Can't attach

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:265
# args: hvType,maxDataVolumeNum,count,msg.getVmInstanceUuid()
hypervisor[%s]\ only\ allows\ max\ %s\ data\ volumes\ to\ be\ attached\ to\ a\ single\ vm;\ there\ have\ been\ %s\ data\ volumes\ attached\ to\ vm[uuid\:%s] = hypervisor[{0}] only allows max {1} data volumes to be attached to a single vm; there have been {2} data volumes attached to vm[uuid:{3}]

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:277
# args: msg.getUuid()
it's\ not\ allowed\ to\ backup\ root\ volume,\ uuid\:%s = it's not allowed to backup root volume, uuid:{0}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:296
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ Root\ volume,\ can't\ be\ deleted = volume[uuid:{0}] is Root volume, can't be deleted

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:301
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ already\ in\ status\ of\ deleted = volume[uuid:{0}] is already in status of deleted

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:315
# args: msg.getUuid()
it's\ not\ allowed\ to\ change\ state\ of\ root\ volume,\ uuid\:%s = it's not allowed to change state of root volume, uuid:{0}

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeBase.java:510
# args: self.getUuid(),self.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ yet,\ can't\ expunge\ it = the volume[uuid:{0}, name:{1}] is not deleted yet, can't expunge it

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:194
# args: template.getUuid(),template.getName()
the\ image[uuid\:%s,\ name\:%s]\ has\ been\ deleted\ on\ all\ backup\ storage = the image[uuid:{0}, name:{1}] has been deleted on all backup storage

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:211
# args: template.getUuid(),msg.getPrimaryStorageUuid()
cannot\ find\ a\ backup\ storage\ on\ which\ the\ image[uuid\:%s]\ is\ that\ satisfies\ all\ conditions\ of\:\ 1.\ has\ state\ Enabled\ 2.\ has\ status\ Connected.\ 3\ has\ attached\ to\ zone\ in\ which\ primary\ storage[uuid\:%s]\ is = cannot find a backup storage on which the image[uuid:{0}] is that satisfies all conditions of: 1. has state Enabled 2. has status Connected. 3 has attached to zone in which primary storage[uuid:{1}] is

# at: src/zstack/./storage/src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:715
# args: VolumeFactory.class.getSimpleName()
there\ should\ not\ be\ more\ than\ one\ %s\ implementation. = there should not be more than one {0} implementation.

# at: src/zstack/./tag/src/main/java/org/zstack/tag/TagApiInterceptor.java:58
# args: msg.getResourceType()
no\ resource\ type[%s]\ found\ in\ tag\ system = no resource type[{0}] found in tag system

# at: src/zstack/./tag/src/main/java/org/zstack/tag/TagApiInterceptor.java:76
# args: msg.getUuid()
tag[uuid\:%s]\ is\ an\ inherent\ system\ tag,\ can\ not\ be\ removed = tag[uuid:{0}] is an inherent system tag, can not be removed

# at: src/zstack/./tag/src/main/java/org/zstack/tag/TagApiInterceptor.java:99
# args: 
The\ argument\ \:'resourceType'\ doesn't\ match\ uuid = The argument :'resourceType' doesn't match uuid

# at: src/zstack/./tag/src/main/java/org/zstack/tag/TagManagerImpl.java:207
# args: tag,type,resourceType,resourceUuid
Duplicated\ Tag[tag\:%s,\ type\:%s,\ resourceType\:%s,\ resourceUuid\:%s] = Duplicated Tag[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]

# at: src/zstack/./tag/src/main/java/org/zstack/tag/TagManagerImpl.java:645
# args: tag,resourceType
no\ system\ tag\ matches[%s]\ for\ resourceType[%s] = no system tag matches[{0}] for resourceType[{1}]

# at: src/zstack/./tag/src/main/java/org/zstack/tag/TagManagerImpl.java:787
# args: tag
no\ system\ tag\ matches\ %s = no system tag matches {0}

<<<<<<< 6a149d306c0fa86ef72ec907c2e9f6b363445438
# at: src/zstack/./tag/src/main/java/org/zstack/tag/TagManagerImpl.java:816
# args: tag
tag[%s]\ is\ only\ for\ admin = tag[{0}] is only for admin
=======
# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3318
# args: vm.getConfig().getName(),hvo.getManagementIp()
Checking\ compatibility\ with\ vm\ %s\ failed\ on\ host\ %s = Checking compatibility with vm {0} failed on host {1}

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:16
# args: 
InsufficientData = InsufficientData

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:14
# args: 
Alarm = Alarm

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:12
# args: 
OK = OK

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:35
# args: 
LessThanOrEqualTo = LessThanOrEqualTo

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:33
# args: 
LessThan = LessThan

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:31
# args: 
GreaterThan = GreaterThan

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:29
# args: 
GreaterThanOrEqualTo = GreaterThanOrEqualTo
>>>>>>> Add translation for alarm terms
